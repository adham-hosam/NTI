
ADAS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ec  00800060  000075be  00007652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005e  0080024c  0080024c  0000783e  2**0
                  ALLOC
  3 .stab         00005d24  00000000  00000000  00007840  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000029ab  00000000  00000000  0000d564  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000ff0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000230  00000000  00000000  000100ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032e2  00000000  00000000  0001031f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000016c4  00000000  00000000  00013601  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000167e  00000000  00000000  00014cc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00016344  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000374  00000000  00000000  00016544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002360  00000000  00000000  000168b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00018c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__vector_1>
       8:	0c 94 b6 1b 	jmp	0x376c	; 0x376c <__vector_2>
       c:	0c 94 e9 1b 	jmp	0x37d2	; 0x37d2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 82 19 	jmp	0x3304	; 0x3304 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 bd 23 	jmp	0x477a	; 0x477a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee eb       	ldi	r30, 0xBE	; 190
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 28 3a 	call	0x7450	; 0x7450 <main>
      8a:	0c 94 dd 3a 	jmp	0x75ba	; 0x75ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 26 12 	call	0x244c	; 0x244c <__subsf3>
      be:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 ba 14 	call	0x2974	; 0x2974 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__divdi3>:
      ea:	a2 e7       	ldi	r26, 0x72	; 114
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 3a 	jmp	0x754c	; 0x754c <__prologue_saves__>
      f6:	98 2e       	mov	r9, r24
      f8:	89 2e       	mov	r8, r25
      fa:	71 2e       	mov	r7, r17
      fc:	88 e0       	ldi	r24, 0x08	; 8
      fe:	fe 01       	movw	r30, r28
     100:	31 96       	adiw	r30, 0x01	; 1
     102:	df 01       	movw	r26, r30
     104:	68 2e       	mov	r6, r24
     106:	1d 92       	st	X+, r1
     108:	6a 94       	dec	r6
     10a:	e9 f7       	brne	.-6      	; 0x106 <__divdi3+0x1c>
     10c:	29 83       	std	Y+1, r18	; 0x01
     10e:	3a 83       	std	Y+2, r19	; 0x02
     110:	4b 83       	std	Y+3, r20	; 0x03
     112:	5c 83       	std	Y+4, r21	; 0x04
     114:	6d 83       	std	Y+5, r22	; 0x05
     116:	7e 83       	std	Y+6, r23	; 0x06
     118:	9f 82       	std	Y+7, r9	; 0x07
     11a:	98 87       	std	Y+8, r25	; 0x08
     11c:	fe 01       	movw	r30, r28
     11e:	39 96       	adiw	r30, 0x09	; 9
     120:	df 01       	movw	r26, r30
     122:	1d 92       	st	X+, r1
     124:	8a 95       	dec	r24
     126:	e9 f7       	brne	.-6      	; 0x122 <__divdi3+0x38>
     128:	a9 86       	std	Y+9, r10	; 0x09
     12a:	ba 86       	std	Y+10, r11	; 0x0a
     12c:	cb 86       	std	Y+11, r12	; 0x0b
     12e:	dc 86       	std	Y+12, r13	; 0x0c
     130:	ed 86       	std	Y+13, r14	; 0x0d
     132:	fe 86       	std	Y+14, r15	; 0x0e
     134:	0f 87       	std	Y+15, r16	; 0x0f
     136:	18 8b       	std	Y+16, r17	; 0x10
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	9e 81       	ldd	r25, Y+6	; 0x06
     13c:	af 81       	ldd	r26, Y+7	; 0x07
     13e:	b8 85       	ldd	r27, Y+8	; 0x08
     140:	b7 fd       	sbrc	r27, 7
     142:	07 c0       	rjmp	.+14     	; 0x152 <__divdi3+0x68>
     144:	e1 96       	adiw	r28, 0x31	; 49
     146:	1c ae       	std	Y+60, r1	; 0x3c
     148:	1d ae       	std	Y+61, r1	; 0x3d
     14a:	1e ae       	std	Y+62, r1	; 0x3e
     14c:	1f ae       	std	Y+63, r1	; 0x3f
     14e:	e1 97       	sbiw	r28, 0x31	; 49
     150:	64 c0       	rjmp	.+200    	; 0x21a <__divdi3+0x130>
     152:	21 95       	neg	r18
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	12 16       	cp	r1, r18
     158:	08 f0       	brcs	.+2      	; 0x15c <__divdi3+0x72>
     15a:	80 e0       	ldi	r24, 0x00	; 0
     15c:	31 95       	neg	r19
     15e:	91 e0       	ldi	r25, 0x01	; 1
     160:	13 16       	cp	r1, r19
     162:	08 f0       	brcs	.+2      	; 0x166 <__divdi3+0x7c>
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	b3 2f       	mov	r27, r19
     168:	b8 1b       	sub	r27, r24
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	3b 17       	cp	r19, r27
     16e:	08 f0       	brcs	.+2      	; 0x172 <__divdi3+0x88>
     170:	80 e0       	ldi	r24, 0x00	; 0
     172:	98 2b       	or	r25, r24
     174:	41 95       	neg	r20
     176:	31 e0       	ldi	r19, 0x01	; 1
     178:	14 16       	cp	r1, r20
     17a:	08 f0       	brcs	.+2      	; 0x17e <__divdi3+0x94>
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a4 2f       	mov	r26, r20
     180:	a9 1b       	sub	r26, r25
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	4a 17       	cp	r20, r26
     186:	08 f0       	brcs	.+2      	; 0x18a <__divdi3+0xa0>
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	38 2b       	or	r19, r24
     18c:	51 95       	neg	r21
     18e:	91 e0       	ldi	r25, 0x01	; 1
     190:	15 16       	cp	r1, r21
     192:	08 f0       	brcs	.+2      	; 0x196 <__divdi3+0xac>
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	f5 2f       	mov	r31, r21
     198:	f3 1b       	sub	r31, r19
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	5f 17       	cp	r21, r31
     19e:	08 f0       	brcs	.+2      	; 0x1a2 <__divdi3+0xb8>
     1a0:	80 e0       	ldi	r24, 0x00	; 0
     1a2:	98 2b       	or	r25, r24
     1a4:	61 95       	neg	r22
     1a6:	31 e0       	ldi	r19, 0x01	; 1
     1a8:	16 16       	cp	r1, r22
     1aa:	08 f0       	brcs	.+2      	; 0x1ae <__divdi3+0xc4>
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	e6 2f       	mov	r30, r22
     1b0:	e9 1b       	sub	r30, r25
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	6e 17       	cp	r22, r30
     1b6:	08 f0       	brcs	.+2      	; 0x1ba <__divdi3+0xd0>
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	38 2b       	or	r19, r24
     1bc:	71 95       	neg	r23
     1be:	41 e0       	ldi	r20, 0x01	; 1
     1c0:	17 16       	cp	r1, r23
     1c2:	08 f0       	brcs	.+2      	; 0x1c6 <__divdi3+0xdc>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	57 2f       	mov	r21, r23
     1c8:	53 1b       	sub	r21, r19
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	75 17       	cp	r23, r21
     1ce:	08 f0       	brcs	.+2      	; 0x1d2 <__divdi3+0xe8>
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	48 2b       	or	r20, r24
     1d4:	89 2d       	mov	r24, r9
     1d6:	81 95       	neg	r24
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	18 16       	cp	r1, r24
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <__divdi3+0xf6>
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	68 2e       	mov	r6, r24
     1e2:	64 1a       	sub	r6, r20
     1e4:	46 2d       	mov	r20, r6
     1e6:	31 e0       	ldi	r19, 0x01	; 1
     1e8:	86 15       	cp	r24, r6
     1ea:	08 f0       	brcs	.+2      	; 0x1ee <__divdi3+0x104>
     1ec:	30 e0       	ldi	r19, 0x00	; 0
     1ee:	93 2b       	or	r25, r19
     1f0:	88 2d       	mov	r24, r8
     1f2:	81 95       	neg	r24
     1f4:	89 1b       	sub	r24, r25
     1f6:	29 83       	std	Y+1, r18	; 0x01
     1f8:	ba 83       	std	Y+2, r27	; 0x02
     1fa:	ab 83       	std	Y+3, r26	; 0x03
     1fc:	fc 83       	std	Y+4, r31	; 0x04
     1fe:	ed 83       	std	Y+5, r30	; 0x05
     200:	5e 83       	std	Y+6, r21	; 0x06
     202:	4f 83       	std	Y+7, r20	; 0x07
     204:	88 87       	std	Y+8, r24	; 0x08
     206:	2f ef       	ldi	r18, 0xFF	; 255
     208:	3f ef       	ldi	r19, 0xFF	; 255
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	e1 96       	adiw	r28, 0x31	; 49
     210:	2c af       	std	Y+60, r18	; 0x3c
     212:	3d af       	std	Y+61, r19	; 0x3d
     214:	4e af       	std	Y+62, r20	; 0x3e
     216:	5f af       	std	Y+63, r21	; 0x3f
     218:	e1 97       	sbiw	r28, 0x31	; 49
     21a:	8d 85       	ldd	r24, Y+13	; 0x0d
     21c:	9e 85       	ldd	r25, Y+14	; 0x0e
     21e:	af 85       	ldd	r26, Y+15	; 0x0f
     220:	b8 89       	ldd	r27, Y+16	; 0x10
     222:	b7 ff       	sbrs	r27, 7
     224:	6a c0       	rjmp	.+212    	; 0x2fa <__divdi3+0x210>
     226:	e1 96       	adiw	r28, 0x31	; 49
     228:	4c ad       	ldd	r20, Y+60	; 0x3c
     22a:	5d ad       	ldd	r21, Y+61	; 0x3d
     22c:	6e ad       	ldd	r22, Y+62	; 0x3e
     22e:	7f ad       	ldd	r23, Y+63	; 0x3f
     230:	e1 97       	sbiw	r28, 0x31	; 49
     232:	40 95       	com	r20
     234:	50 95       	com	r21
     236:	60 95       	com	r22
     238:	70 95       	com	r23
     23a:	e1 96       	adiw	r28, 0x31	; 49
     23c:	4c af       	std	Y+60, r20	; 0x3c
     23e:	5d af       	std	Y+61, r21	; 0x3d
     240:	6e af       	std	Y+62, r22	; 0x3e
     242:	7f af       	std	Y+63, r23	; 0x3f
     244:	e1 97       	sbiw	r28, 0x31	; 49
     246:	a1 94       	neg	r10
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	1a 14       	cp	r1, r10
     24c:	08 f0       	brcs	.+2      	; 0x250 <__divdi3+0x166>
     24e:	80 e0       	ldi	r24, 0x00	; 0
     250:	b1 94       	neg	r11
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	1b 14       	cp	r1, r11
     256:	08 f0       	brcs	.+2      	; 0x25a <__divdi3+0x170>
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	6b 2d       	mov	r22, r11
     25c:	68 1b       	sub	r22, r24
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	b6 16       	cp	r11, r22
     262:	08 f0       	brcs	.+2      	; 0x266 <__divdi3+0x17c>
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	98 2b       	or	r25, r24
     268:	c1 94       	neg	r12
     26a:	21 e0       	ldi	r18, 0x01	; 1
     26c:	1c 14       	cp	r1, r12
     26e:	08 f0       	brcs	.+2      	; 0x272 <__divdi3+0x188>
     270:	20 e0       	ldi	r18, 0x00	; 0
     272:	5c 2d       	mov	r21, r12
     274:	59 1b       	sub	r21, r25
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	c5 16       	cp	r12, r21
     27a:	08 f0       	brcs	.+2      	; 0x27e <__divdi3+0x194>
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	28 2b       	or	r18, r24
     280:	d1 94       	neg	r13
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	1d 14       	cp	r1, r13
     286:	08 f0       	brcs	.+2      	; 0x28a <__divdi3+0x1a0>
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	4d 2d       	mov	r20, r13
     28c:	42 1b       	sub	r20, r18
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	d4 16       	cp	r13, r20
     292:	08 f0       	brcs	.+2      	; 0x296 <__divdi3+0x1ac>
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	98 2b       	or	r25, r24
     298:	e1 94       	neg	r14
     29a:	21 e0       	ldi	r18, 0x01	; 1
     29c:	1e 14       	cp	r1, r14
     29e:	08 f0       	brcs	.+2      	; 0x2a2 <__divdi3+0x1b8>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	3e 2d       	mov	r19, r14
     2a4:	39 1b       	sub	r19, r25
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	e3 16       	cp	r14, r19
     2aa:	08 f0       	brcs	.+2      	; 0x2ae <__divdi3+0x1c4>
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	28 2b       	or	r18, r24
     2b0:	f1 94       	neg	r15
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	1f 14       	cp	r1, r15
     2b6:	08 f0       	brcs	.+2      	; 0x2ba <__divdi3+0x1d0>
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	7f 2d       	mov	r23, r15
     2bc:	72 1b       	sub	r23, r18
     2be:	27 2f       	mov	r18, r23
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	f7 16       	cp	r15, r23
     2c4:	08 f0       	brcs	.+2      	; 0x2c8 <__divdi3+0x1de>
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	98 2b       	or	r25, r24
     2ca:	01 95       	neg	r16
     2cc:	11 e0       	ldi	r17, 0x01	; 1
     2ce:	10 16       	cp	r1, r16
     2d0:	08 f0       	brcs	.+2      	; 0x2d4 <__divdi3+0x1ea>
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	80 2f       	mov	r24, r16
     2d6:	89 1b       	sub	r24, r25
     2d8:	98 2f       	mov	r25, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	09 17       	cp	r16, r25
     2de:	08 f0       	brcs	.+2      	; 0x2e2 <__divdi3+0x1f8>
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	18 2b       	or	r17, r24
     2e4:	87 2d       	mov	r24, r7
     2e6:	81 95       	neg	r24
     2e8:	81 1b       	sub	r24, r17
     2ea:	a9 86       	std	Y+9, r10	; 0x09
     2ec:	6a 87       	std	Y+10, r22	; 0x0a
     2ee:	5b 87       	std	Y+11, r21	; 0x0b
     2f0:	4c 87       	std	Y+12, r20	; 0x0c
     2f2:	3d 87       	std	Y+13, r19	; 0x0d
     2f4:	2e 87       	std	Y+14, r18	; 0x0e
     2f6:	9f 87       	std	Y+15, r25	; 0x0f
     2f8:	88 8b       	std	Y+16, r24	; 0x10
     2fa:	99 81       	ldd	r25, Y+1	; 0x01
     2fc:	2a 81       	ldd	r18, Y+2	; 0x02
     2fe:	3b 81       	ldd	r19, Y+3	; 0x03
     300:	4c 81       	ldd	r20, Y+4	; 0x04
     302:	5d 81       	ldd	r21, Y+5	; 0x05
     304:	6e 81       	ldd	r22, Y+6	; 0x06
     306:	7f 81       	ldd	r23, Y+7	; 0x07
     308:	a8 85       	ldd	r26, Y+8	; 0x08
     30a:	b9 85       	ldd	r27, Y+9	; 0x09
     30c:	1a 85       	ldd	r17, Y+10	; 0x0a
     30e:	0b 85       	ldd	r16, Y+11	; 0x0b
     310:	fc 84       	ldd	r15, Y+12	; 0x0c
     312:	ed 84       	ldd	r14, Y+13	; 0x0d
     314:	de 84       	ldd	r13, Y+14	; 0x0e
     316:	cf 84       	ldd	r12, Y+15	; 0x0f
     318:	b8 88       	ldd	r11, Y+16	; 0x10
     31a:	88 e0       	ldi	r24, 0x08	; 8
     31c:	e1 e1       	ldi	r30, 0x11	; 17
     31e:	8e 2e       	mov	r8, r30
     320:	91 2c       	mov	r9, r1
     322:	8c 0e       	add	r8, r28
     324:	9d 1e       	adc	r9, r29
     326:	f4 01       	movw	r30, r8
     328:	68 2e       	mov	r6, r24
     32a:	11 92       	st	Z+, r1
     32c:	6a 94       	dec	r6
     32e:	e9 f7       	brne	.-6      	; 0x32a <__divdi3+0x240>
     330:	99 8b       	std	Y+17, r25	; 0x11
     332:	2a 8b       	std	Y+18, r18	; 0x12
     334:	3b 8b       	std	Y+19, r19	; 0x13
     336:	4c 8b       	std	Y+20, r20	; 0x14
     338:	5d 8b       	std	Y+21, r21	; 0x15
     33a:	6e 8b       	std	Y+22, r22	; 0x16
     33c:	7f 8b       	std	Y+23, r23	; 0x17
     33e:	a8 8f       	std	Y+24, r26	; 0x18
     340:	9e 01       	movw	r18, r28
     342:	27 5e       	subi	r18, 0xE7	; 231
     344:	3f 4f       	sbci	r19, 0xFF	; 255
     346:	f9 01       	movw	r30, r18
     348:	11 92       	st	Z+, r1
     34a:	8a 95       	dec	r24
     34c:	e9 f7       	brne	.-6      	; 0x348 <__divdi3+0x25e>
     34e:	b9 8f       	std	Y+25, r27	; 0x19
     350:	1a 8f       	std	Y+26, r17	; 0x1a
     352:	0b 8f       	std	Y+27, r16	; 0x1b
     354:	fc 8e       	std	Y+28, r15	; 0x1c
     356:	ed 8e       	std	Y+29, r14	; 0x1d
     358:	de 8e       	std	Y+30, r13	; 0x1e
     35a:	cf 8e       	std	Y+31, r12	; 0x1f
     35c:	b8 a2       	std	Y+32, r11	; 0x20
     35e:	29 8c       	ldd	r2, Y+25	; 0x19
     360:	3a 8c       	ldd	r3, Y+26	; 0x1a
     362:	4b 8c       	ldd	r4, Y+27	; 0x1b
     364:	5c 8c       	ldd	r5, Y+28	; 0x1c
     366:	ed 8c       	ldd	r14, Y+29	; 0x1d
     368:	fe 8c       	ldd	r15, Y+30	; 0x1e
     36a:	0f 8d       	ldd	r16, Y+31	; 0x1f
     36c:	18 a1       	ldd	r17, Y+32	; 0x20
     36e:	69 88       	ldd	r6, Y+17	; 0x11
     370:	7a 88       	ldd	r7, Y+18	; 0x12
     372:	8b 88       	ldd	r8, Y+19	; 0x13
     374:	9c 88       	ldd	r9, Y+20	; 0x14
     376:	21 96       	adiw	r28, 0x01	; 1
     378:	6c ae       	std	Y+60, r6	; 0x3c
     37a:	7d ae       	std	Y+61, r7	; 0x3d
     37c:	8e ae       	std	Y+62, r8	; 0x3e
     37e:	9f ae       	std	Y+63, r9	; 0x3f
     380:	21 97       	sbiw	r28, 0x01	; 1
     382:	6d 88       	ldd	r6, Y+21	; 0x15
     384:	7e 88       	ldd	r7, Y+22	; 0x16
     386:	8f 88       	ldd	r8, Y+23	; 0x17
     388:	98 8c       	ldd	r9, Y+24	; 0x18
     38a:	e1 14       	cp	r14, r1
     38c:	f1 04       	cpc	r15, r1
     38e:	01 05       	cpc	r16, r1
     390:	11 05       	cpc	r17, r1
     392:	09 f0       	breq	.+2      	; 0x396 <__divdi3+0x2ac>
     394:	d9 c3       	rjmp	.+1970   	; 0xb48 <__stack+0x2e9>
     396:	62 14       	cp	r6, r2
     398:	73 04       	cpc	r7, r3
     39a:	84 04       	cpc	r8, r4
     39c:	95 04       	cpc	r9, r5
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <__divdi3+0x2b8>
     3a0:	57 c1       	rjmp	.+686    	; 0x650 <__divdi3+0x566>
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	20 16       	cp	r2, r16
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	30 06       	cpc	r3, r16
     3aa:	01 e0       	ldi	r16, 0x01	; 1
     3ac:	40 06       	cpc	r4, r16
     3ae:	00 e0       	ldi	r16, 0x00	; 0
     3b0:	50 06       	cpc	r5, r16
     3b2:	88 f4       	brcc	.+34     	; 0x3d6 <__divdi3+0x2ec>
     3b4:	1f ef       	ldi	r17, 0xFF	; 255
     3b6:	21 16       	cp	r2, r17
     3b8:	31 04       	cpc	r3, r1
     3ba:	41 04       	cpc	r4, r1
     3bc:	51 04       	cpc	r5, r1
     3be:	39 f0       	breq	.+14     	; 0x3ce <__divdi3+0x2e4>
     3c0:	30 f0       	brcs	.+12     	; 0x3ce <__divdi3+0x2e4>
     3c2:	48 e0       	ldi	r20, 0x08	; 8
     3c4:	e4 2e       	mov	r14, r20
     3c6:	f1 2c       	mov	r15, r1
     3c8:	01 2d       	mov	r16, r1
     3ca:	11 2d       	mov	r17, r1
     3cc:	18 c0       	rjmp	.+48     	; 0x3fe <__divdi3+0x314>
     3ce:	ee 24       	eor	r14, r14
     3d0:	ff 24       	eor	r15, r15
     3d2:	87 01       	movw	r16, r14
     3d4:	14 c0       	rjmp	.+40     	; 0x3fe <__divdi3+0x314>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	22 16       	cp	r2, r18
     3da:	20 e0       	ldi	r18, 0x00	; 0
     3dc:	32 06       	cpc	r3, r18
     3de:	20 e0       	ldi	r18, 0x00	; 0
     3e0:	42 06       	cpc	r4, r18
     3e2:	21 e0       	ldi	r18, 0x01	; 1
     3e4:	52 06       	cpc	r5, r18
     3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__divdi3+0x30a>
     3e8:	38 e1       	ldi	r19, 0x18	; 24
     3ea:	e3 2e       	mov	r14, r19
     3ec:	f1 2c       	mov	r15, r1
     3ee:	01 2d       	mov	r16, r1
     3f0:	11 2d       	mov	r17, r1
     3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__divdi3+0x314>
     3f4:	20 e1       	ldi	r18, 0x10	; 16
     3f6:	e2 2e       	mov	r14, r18
     3f8:	f1 2c       	mov	r15, r1
     3fa:	01 2d       	mov	r16, r1
     3fc:	11 2d       	mov	r17, r1
     3fe:	d2 01       	movw	r26, r4
     400:	c1 01       	movw	r24, r2
     402:	0e 2c       	mov	r0, r14
     404:	04 c0       	rjmp	.+8      	; 0x40e <__divdi3+0x324>
     406:	b6 95       	lsr	r27
     408:	a7 95       	ror	r26
     40a:	97 95       	ror	r25
     40c:	87 95       	ror	r24
     40e:	0a 94       	dec	r0
     410:	d2 f7       	brpl	.-12     	; 0x406 <__divdi3+0x31c>
     412:	87 5f       	subi	r24, 0xF7	; 247
     414:	9e 4f       	sbci	r25, 0xFE	; 254
     416:	dc 01       	movw	r26, r24
     418:	2c 91       	ld	r18, X
     41a:	80 e2       	ldi	r24, 0x20	; 32
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	8e 19       	sub	r24, r14
     424:	9f 09       	sbc	r25, r15
     426:	a0 0b       	sbc	r26, r16
     428:	b1 0b       	sbc	r27, r17
     42a:	7c 01       	movw	r14, r24
     42c:	8d 01       	movw	r16, r26
     42e:	e2 1a       	sub	r14, r18
     430:	f1 08       	sbc	r15, r1
     432:	01 09       	sbc	r16, r1
     434:	11 09       	sbc	r17, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	01 05       	cpc	r16, r1
     43c:	11 05       	cpc	r17, r1
     43e:	d1 f1       	breq	.+116    	; 0x4b4 <__divdi3+0x3ca>
     440:	0e 2c       	mov	r0, r14
     442:	04 c0       	rjmp	.+8      	; 0x44c <__divdi3+0x362>
     444:	22 0c       	add	r2, r2
     446:	33 1c       	adc	r3, r3
     448:	44 1c       	adc	r4, r4
     44a:	55 1c       	adc	r5, r5
     44c:	0a 94       	dec	r0
     44e:	d2 f7       	brpl	.-12     	; 0x444 <__divdi3+0x35a>
     450:	a4 01       	movw	r20, r8
     452:	93 01       	movw	r18, r6
     454:	0e 2c       	mov	r0, r14
     456:	04 c0       	rjmp	.+8      	; 0x460 <__divdi3+0x376>
     458:	22 0f       	add	r18, r18
     45a:	33 1f       	adc	r19, r19
     45c:	44 1f       	adc	r20, r20
     45e:	55 1f       	adc	r21, r21
     460:	0a 94       	dec	r0
     462:	d2 f7       	brpl	.-12     	; 0x458 <__divdi3+0x36e>
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	8e 19       	sub	r24, r14
     46a:	9f 09       	sbc	r25, r15
     46c:	21 96       	adiw	r28, 0x01	; 1
     46e:	6c ac       	ldd	r6, Y+60	; 0x3c
     470:	7d ac       	ldd	r7, Y+61	; 0x3d
     472:	8e ac       	ldd	r8, Y+62	; 0x3e
     474:	9f ac       	ldd	r9, Y+63	; 0x3f
     476:	21 97       	sbiw	r28, 0x01	; 1
     478:	04 c0       	rjmp	.+8      	; 0x482 <__divdi3+0x398>
     47a:	96 94       	lsr	r9
     47c:	87 94       	ror	r8
     47e:	77 94       	ror	r7
     480:	67 94       	ror	r6
     482:	8a 95       	dec	r24
     484:	d2 f7       	brpl	.-12     	; 0x47a <__divdi3+0x390>
     486:	62 2a       	or	r6, r18
     488:	73 2a       	or	r7, r19
     48a:	84 2a       	or	r8, r20
     48c:	95 2a       	or	r9, r21
     48e:	21 96       	adiw	r28, 0x01	; 1
     490:	ac ac       	ldd	r10, Y+60	; 0x3c
     492:	bd ac       	ldd	r11, Y+61	; 0x3d
     494:	ce ac       	ldd	r12, Y+62	; 0x3e
     496:	df ac       	ldd	r13, Y+63	; 0x3f
     498:	21 97       	sbiw	r28, 0x01	; 1
     49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__divdi3+0x3ba>
     49c:	aa 0c       	add	r10, r10
     49e:	bb 1c       	adc	r11, r11
     4a0:	cc 1c       	adc	r12, r12
     4a2:	dd 1c       	adc	r13, r13
     4a4:	ea 94       	dec	r14
     4a6:	d2 f7       	brpl	.-12     	; 0x49c <__divdi3+0x3b2>
     4a8:	21 96       	adiw	r28, 0x01	; 1
     4aa:	ac ae       	std	Y+60, r10	; 0x3c
     4ac:	bd ae       	std	Y+61, r11	; 0x3d
     4ae:	ce ae       	std	Y+62, r12	; 0x3e
     4b0:	df ae       	std	Y+63, r13	; 0x3f
     4b2:	21 97       	sbiw	r28, 0x01	; 1
     4b4:	62 01       	movw	r12, r4
     4b6:	ee 24       	eor	r14, r14
     4b8:	ff 24       	eor	r15, r15
     4ba:	29 96       	adiw	r28, 0x09	; 9
     4bc:	cc ae       	std	Y+60, r12	; 0x3c
     4be:	dd ae       	std	Y+61, r13	; 0x3d
     4c0:	ee ae       	std	Y+62, r14	; 0x3e
     4c2:	ff ae       	std	Y+63, r15	; 0x3f
     4c4:	29 97       	sbiw	r28, 0x09	; 9
     4c6:	92 01       	movw	r18, r4
     4c8:	81 01       	movw	r16, r2
     4ca:	20 70       	andi	r18, 0x00	; 0
     4cc:	30 70       	andi	r19, 0x00	; 0
     4ce:	2d 96       	adiw	r28, 0x0d	; 13
     4d0:	0c af       	std	Y+60, r16	; 0x3c
     4d2:	1d af       	std	Y+61, r17	; 0x3d
     4d4:	2e af       	std	Y+62, r18	; 0x3e
     4d6:	3f af       	std	Y+63, r19	; 0x3f
     4d8:	2d 97       	sbiw	r28, 0x0d	; 13
     4da:	c4 01       	movw	r24, r8
     4dc:	b3 01       	movw	r22, r6
     4de:	a7 01       	movw	r20, r14
     4e0:	96 01       	movw	r18, r12
     4e2:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     4e6:	7b 01       	movw	r14, r22
     4e8:	8c 01       	movw	r16, r24
     4ea:	c4 01       	movw	r24, r8
     4ec:	b3 01       	movw	r22, r6
     4ee:	29 96       	adiw	r28, 0x09	; 9
     4f0:	2c ad       	ldd	r18, Y+60	; 0x3c
     4f2:	3d ad       	ldd	r19, Y+61	; 0x3d
     4f4:	4e ad       	ldd	r20, Y+62	; 0x3e
     4f6:	5f ad       	ldd	r21, Y+63	; 0x3f
     4f8:	29 97       	sbiw	r28, 0x09	; 9
     4fa:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     4fe:	c9 01       	movw	r24, r18
     500:	da 01       	movw	r26, r20
     502:	3c 01       	movw	r6, r24
     504:	4d 01       	movw	r8, r26
     506:	c4 01       	movw	r24, r8
     508:	b3 01       	movw	r22, r6
     50a:	2d 96       	adiw	r28, 0x0d	; 13
     50c:	2c ad       	ldd	r18, Y+60	; 0x3c
     50e:	3d ad       	ldd	r19, Y+61	; 0x3d
     510:	4e ad       	ldd	r20, Y+62	; 0x3e
     512:	5f ad       	ldd	r21, Y+63	; 0x3f
     514:	2d 97       	sbiw	r28, 0x0d	; 13
     516:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     51a:	9b 01       	movw	r18, r22
     51c:	ac 01       	movw	r20, r24
     51e:	87 01       	movw	r16, r14
     520:	ff 24       	eor	r15, r15
     522:	ee 24       	eor	r14, r14
     524:	21 96       	adiw	r28, 0x01	; 1
     526:	ac ac       	ldd	r10, Y+60	; 0x3c
     528:	bd ac       	ldd	r11, Y+61	; 0x3d
     52a:	ce ac       	ldd	r12, Y+62	; 0x3e
     52c:	df ac       	ldd	r13, Y+63	; 0x3f
     52e:	21 97       	sbiw	r28, 0x01	; 1
     530:	c6 01       	movw	r24, r12
     532:	aa 27       	eor	r26, r26
     534:	bb 27       	eor	r27, r27
     536:	57 01       	movw	r10, r14
     538:	68 01       	movw	r12, r16
     53a:	a8 2a       	or	r10, r24
     53c:	b9 2a       	or	r11, r25
     53e:	ca 2a       	or	r12, r26
     540:	db 2a       	or	r13, r27
     542:	a2 16       	cp	r10, r18
     544:	b3 06       	cpc	r11, r19
     546:	c4 06       	cpc	r12, r20
     548:	d5 06       	cpc	r13, r21
     54a:	e0 f4       	brcc	.+56     	; 0x584 <__divdi3+0x49a>
     54c:	08 94       	sec
     54e:	61 08       	sbc	r6, r1
     550:	71 08       	sbc	r7, r1
     552:	81 08       	sbc	r8, r1
     554:	91 08       	sbc	r9, r1
     556:	a2 0c       	add	r10, r2
     558:	b3 1c       	adc	r11, r3
     55a:	c4 1c       	adc	r12, r4
     55c:	d5 1c       	adc	r13, r5
     55e:	a2 14       	cp	r10, r2
     560:	b3 04       	cpc	r11, r3
     562:	c4 04       	cpc	r12, r4
     564:	d5 04       	cpc	r13, r5
     566:	70 f0       	brcs	.+28     	; 0x584 <__divdi3+0x49a>
     568:	a2 16       	cp	r10, r18
     56a:	b3 06       	cpc	r11, r19
     56c:	c4 06       	cpc	r12, r20
     56e:	d5 06       	cpc	r13, r21
     570:	48 f4       	brcc	.+18     	; 0x584 <__divdi3+0x49a>
     572:	08 94       	sec
     574:	61 08       	sbc	r6, r1
     576:	71 08       	sbc	r7, r1
     578:	81 08       	sbc	r8, r1
     57a:	91 08       	sbc	r9, r1
     57c:	a2 0c       	add	r10, r2
     57e:	b3 1c       	adc	r11, r3
     580:	c4 1c       	adc	r12, r4
     582:	d5 1c       	adc	r13, r5
     584:	a2 1a       	sub	r10, r18
     586:	b3 0a       	sbc	r11, r19
     588:	c4 0a       	sbc	r12, r20
     58a:	d5 0a       	sbc	r13, r21
     58c:	c6 01       	movw	r24, r12
     58e:	b5 01       	movw	r22, r10
     590:	29 96       	adiw	r28, 0x09	; 9
     592:	2c ad       	ldd	r18, Y+60	; 0x3c
     594:	3d ad       	ldd	r19, Y+61	; 0x3d
     596:	4e ad       	ldd	r20, Y+62	; 0x3e
     598:	5f ad       	ldd	r21, Y+63	; 0x3f
     59a:	29 97       	sbiw	r28, 0x09	; 9
     59c:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     5a0:	7b 01       	movw	r14, r22
     5a2:	8c 01       	movw	r16, r24
     5a4:	c6 01       	movw	r24, r12
     5a6:	b5 01       	movw	r22, r10
     5a8:	29 96       	adiw	r28, 0x09	; 9
     5aa:	2c ad       	ldd	r18, Y+60	; 0x3c
     5ac:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ae:	4e ad       	ldd	r20, Y+62	; 0x3e
     5b0:	5f ad       	ldd	r21, Y+63	; 0x3f
     5b2:	29 97       	sbiw	r28, 0x09	; 9
     5b4:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     5b8:	c9 01       	movw	r24, r18
     5ba:	da 01       	movw	r26, r20
     5bc:	5c 01       	movw	r10, r24
     5be:	6d 01       	movw	r12, r26
     5c0:	c6 01       	movw	r24, r12
     5c2:	b5 01       	movw	r22, r10
     5c4:	2d 96       	adiw	r28, 0x0d	; 13
     5c6:	2c ad       	ldd	r18, Y+60	; 0x3c
     5c8:	3d ad       	ldd	r19, Y+61	; 0x3d
     5ca:	4e ad       	ldd	r20, Y+62	; 0x3e
     5cc:	5f ad       	ldd	r21, Y+63	; 0x3f
     5ce:	2d 97       	sbiw	r28, 0x0d	; 13
     5d0:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	87 01       	movw	r16, r14
     5da:	ff 24       	eor	r15, r15
     5dc:	ee 24       	eor	r14, r14
     5de:	21 96       	adiw	r28, 0x01	; 1
     5e0:	8c ad       	ldd	r24, Y+60	; 0x3c
     5e2:	9d ad       	ldd	r25, Y+61	; 0x3d
     5e4:	ae ad       	ldd	r26, Y+62	; 0x3e
     5e6:	bf ad       	ldd	r27, Y+63	; 0x3f
     5e8:	21 97       	sbiw	r28, 0x01	; 1
     5ea:	a0 70       	andi	r26, 0x00	; 0
     5ec:	b0 70       	andi	r27, 0x00	; 0
     5ee:	e8 2a       	or	r14, r24
     5f0:	f9 2a       	or	r15, r25
     5f2:	0a 2b       	or	r16, r26
     5f4:	1b 2b       	or	r17, r27
     5f6:	e2 16       	cp	r14, r18
     5f8:	f3 06       	cpc	r15, r19
     5fa:	04 07       	cpc	r16, r20
     5fc:	15 07       	cpc	r17, r21
     5fe:	c0 f4       	brcc	.+48     	; 0x630 <__divdi3+0x546>
     600:	08 94       	sec
     602:	a1 08       	sbc	r10, r1
     604:	b1 08       	sbc	r11, r1
     606:	c1 08       	sbc	r12, r1
     608:	d1 08       	sbc	r13, r1
     60a:	e2 0c       	add	r14, r2
     60c:	f3 1c       	adc	r15, r3
     60e:	04 1d       	adc	r16, r4
     610:	15 1d       	adc	r17, r5
     612:	e2 14       	cp	r14, r2
     614:	f3 04       	cpc	r15, r3
     616:	04 05       	cpc	r16, r4
     618:	15 05       	cpc	r17, r5
     61a:	50 f0       	brcs	.+20     	; 0x630 <__divdi3+0x546>
     61c:	e2 16       	cp	r14, r18
     61e:	f3 06       	cpc	r15, r19
     620:	04 07       	cpc	r16, r20
     622:	15 07       	cpc	r17, r21
     624:	28 f4       	brcc	.+10     	; 0x630 <__divdi3+0x546>
     626:	08 94       	sec
     628:	a1 08       	sbc	r10, r1
     62a:	b1 08       	sbc	r11, r1
     62c:	c1 08       	sbc	r12, r1
     62e:	d1 08       	sbc	r13, r1
     630:	d3 01       	movw	r26, r6
     632:	99 27       	eor	r25, r25
     634:	88 27       	eor	r24, r24
     636:	86 01       	movw	r16, r12
     638:	75 01       	movw	r14, r10
     63a:	e8 2a       	or	r14, r24
     63c:	f9 2a       	or	r15, r25
     63e:	0a 2b       	or	r16, r26
     640:	1b 2b       	or	r17, r27
     642:	25 96       	adiw	r28, 0x05	; 5
     644:	ec ae       	std	Y+60, r14	; 0x3c
     646:	fd ae       	std	Y+61, r15	; 0x3d
     648:	0e af       	std	Y+62, r16	; 0x3e
     64a:	1f af       	std	Y+63, r17	; 0x3f
     64c:	25 97       	sbiw	r28, 0x05	; 5
     64e:	eb c4       	rjmp	.+2518   	; 0x1026 <__stack+0x7c7>
     650:	21 14       	cp	r2, r1
     652:	31 04       	cpc	r3, r1
     654:	41 04       	cpc	r4, r1
     656:	51 04       	cpc	r5, r1
     658:	71 f4       	brne	.+28     	; 0x676 <__divdi3+0x58c>
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	1c 01       	movw	r2, r24
     674:	2d 01       	movw	r4, r26
     676:	00 e0       	ldi	r16, 0x00	; 0
     678:	20 16       	cp	r2, r16
     67a:	00 e0       	ldi	r16, 0x00	; 0
     67c:	30 06       	cpc	r3, r16
     67e:	01 e0       	ldi	r16, 0x01	; 1
     680:	40 06       	cpc	r4, r16
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	50 06       	cpc	r5, r16
     686:	88 f4       	brcc	.+34     	; 0x6aa <__divdi3+0x5c0>
     688:	1f ef       	ldi	r17, 0xFF	; 255
     68a:	21 16       	cp	r2, r17
     68c:	31 04       	cpc	r3, r1
     68e:	41 04       	cpc	r4, r1
     690:	51 04       	cpc	r5, r1
     692:	31 f0       	breq	.+12     	; 0x6a0 <__divdi3+0x5b6>
     694:	28 f0       	brcs	.+10     	; 0x6a0 <__divdi3+0x5b6>
     696:	48 e0       	ldi	r20, 0x08	; 8
     698:	50 e0       	ldi	r21, 0x00	; 0
     69a:	60 e0       	ldi	r22, 0x00	; 0
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	17 c0       	rjmp	.+46     	; 0x6ce <__divdi3+0x5e4>
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	70 e0       	ldi	r23, 0x00	; 0
     6a8:	12 c0       	rjmp	.+36     	; 0x6ce <__divdi3+0x5e4>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	22 16       	cp	r2, r18
     6ae:	20 e0       	ldi	r18, 0x00	; 0
     6b0:	32 06       	cpc	r3, r18
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	42 06       	cpc	r4, r18
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	52 06       	cpc	r5, r18
     6ba:	28 f0       	brcs	.+10     	; 0x6c6 <__divdi3+0x5dc>
     6bc:	48 e1       	ldi	r20, 0x18	; 24
     6be:	50 e0       	ldi	r21, 0x00	; 0
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	04 c0       	rjmp	.+8      	; 0x6ce <__divdi3+0x5e4>
     6c6:	40 e1       	ldi	r20, 0x10	; 16
     6c8:	50 e0       	ldi	r21, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	d2 01       	movw	r26, r4
     6d0:	c1 01       	movw	r24, r2
     6d2:	04 2e       	mov	r0, r20
     6d4:	04 c0       	rjmp	.+8      	; 0x6de <__divdi3+0x5f4>
     6d6:	b6 95       	lsr	r27
     6d8:	a7 95       	ror	r26
     6da:	97 95       	ror	r25
     6dc:	87 95       	ror	r24
     6de:	0a 94       	dec	r0
     6e0:	d2 f7       	brpl	.-12     	; 0x6d6 <__divdi3+0x5ec>
     6e2:	87 5f       	subi	r24, 0xF7	; 247
     6e4:	9e 4f       	sbci	r25, 0xFE	; 254
     6e6:	dc 01       	movw	r26, r24
     6e8:	2c 91       	ld	r18, X
     6ea:	e0 e2       	ldi	r30, 0x20	; 32
     6ec:	ee 2e       	mov	r14, r30
     6ee:	f1 2c       	mov	r15, r1
     6f0:	01 2d       	mov	r16, r1
     6f2:	11 2d       	mov	r17, r1
     6f4:	d8 01       	movw	r26, r16
     6f6:	c7 01       	movw	r24, r14
     6f8:	84 1b       	sub	r24, r20
     6fa:	95 0b       	sbc	r25, r21
     6fc:	a6 0b       	sbc	r26, r22
     6fe:	b7 0b       	sbc	r27, r23
     700:	82 1b       	sub	r24, r18
     702:	91 09       	sbc	r25, r1
     704:	a1 09       	sbc	r26, r1
     706:	b1 09       	sbc	r27, r1
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	a1 05       	cpc	r26, r1
     70c:	b1 05       	cpc	r27, r1
     70e:	61 f4       	brne	.+24     	; 0x728 <__divdi3+0x63e>
     710:	64 01       	movw	r12, r8
     712:	53 01       	movw	r10, r6
     714:	a2 18       	sub	r10, r2
     716:	b3 08       	sbc	r11, r3
     718:	c4 08       	sbc	r12, r4
     71a:	d5 08       	sbc	r13, r5
     71c:	31 e0       	ldi	r19, 0x01	; 1
     71e:	63 2e       	mov	r6, r19
     720:	71 2c       	mov	r7, r1
     722:	81 2c       	mov	r8, r1
     724:	91 2c       	mov	r9, r1
     726:	24 c1       	rjmp	.+584    	; 0x970 <__stack+0x111>
     728:	e3 96       	adiw	r28, 0x33	; 51
     72a:	8f af       	std	Y+63, r24	; 0x3f
     72c:	e3 97       	sbiw	r28, 0x33	; 51
     72e:	08 2e       	mov	r0, r24
     730:	04 c0       	rjmp	.+8      	; 0x73a <__divdi3+0x650>
     732:	22 0c       	add	r2, r2
     734:	33 1c       	adc	r3, r3
     736:	44 1c       	adc	r4, r4
     738:	55 1c       	adc	r5, r5
     73a:	0a 94       	dec	r0
     73c:	d2 f7       	brpl	.-12     	; 0x732 <__divdi3+0x648>
     73e:	ee 2d       	mov	r30, r14
     740:	e8 1b       	sub	r30, r24
     742:	64 01       	movw	r12, r8
     744:	53 01       	movw	r10, r6
     746:	0e 2e       	mov	r0, r30
     748:	04 c0       	rjmp	.+8      	; 0x752 <__divdi3+0x668>
     74a:	d6 94       	lsr	r13
     74c:	c7 94       	ror	r12
     74e:	b7 94       	ror	r11
     750:	a7 94       	ror	r10
     752:	0a 94       	dec	r0
     754:	d2 f7       	brpl	.-12     	; 0x74a <__divdi3+0x660>
     756:	a4 01       	movw	r20, r8
     758:	93 01       	movw	r18, r6
     75a:	e3 96       	adiw	r28, 0x33	; 51
     75c:	0f ac       	ldd	r0, Y+63	; 0x3f
     75e:	e3 97       	sbiw	r28, 0x33	; 51
     760:	04 c0       	rjmp	.+8      	; 0x76a <__divdi3+0x680>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	44 1f       	adc	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	0a 94       	dec	r0
     76c:	d2 f7       	brpl	.-12     	; 0x762 <__divdi3+0x678>
     76e:	21 96       	adiw	r28, 0x01	; 1
     770:	6c ac       	ldd	r6, Y+60	; 0x3c
     772:	7d ac       	ldd	r7, Y+61	; 0x3d
     774:	8e ac       	ldd	r8, Y+62	; 0x3e
     776:	9f ac       	ldd	r9, Y+63	; 0x3f
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	0e 2e       	mov	r0, r30
     77c:	04 c0       	rjmp	.+8      	; 0x786 <__divdi3+0x69c>
     77e:	96 94       	lsr	r9
     780:	87 94       	ror	r8
     782:	77 94       	ror	r7
     784:	67 94       	ror	r6
     786:	0a 94       	dec	r0
     788:	d2 f7       	brpl	.-12     	; 0x77e <__divdi3+0x694>
     78a:	84 01       	movw	r16, r8
     78c:	73 01       	movw	r14, r6
     78e:	e2 2a       	or	r14, r18
     790:	f3 2a       	or	r15, r19
     792:	04 2b       	or	r16, r20
     794:	15 2b       	or	r17, r21
     796:	e9 ae       	std	Y+57, r14	; 0x39
     798:	fa ae       	std	Y+58, r15	; 0x3a
     79a:	0b af       	std	Y+59, r16	; 0x3b
     79c:	1c af       	std	Y+60, r17	; 0x3c
     79e:	32 01       	movw	r6, r4
     7a0:	88 24       	eor	r8, r8
     7a2:	99 24       	eor	r9, r9
     7a4:	92 01       	movw	r18, r4
     7a6:	81 01       	movw	r16, r2
     7a8:	20 70       	andi	r18, 0x00	; 0
     7aa:	30 70       	andi	r19, 0x00	; 0
     7ac:	61 96       	adiw	r28, 0x11	; 17
     7ae:	0c af       	std	Y+60, r16	; 0x3c
     7b0:	1d af       	std	Y+61, r17	; 0x3d
     7b2:	2e af       	std	Y+62, r18	; 0x3e
     7b4:	3f af       	std	Y+63, r19	; 0x3f
     7b6:	61 97       	sbiw	r28, 0x11	; 17
     7b8:	c6 01       	movw	r24, r12
     7ba:	b5 01       	movw	r22, r10
     7bc:	a4 01       	movw	r20, r8
     7be:	93 01       	movw	r18, r6
     7c0:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     7c4:	7b 01       	movw	r14, r22
     7c6:	8c 01       	movw	r16, r24
     7c8:	c6 01       	movw	r24, r12
     7ca:	b5 01       	movw	r22, r10
     7cc:	a4 01       	movw	r20, r8
     7ce:	93 01       	movw	r18, r6
     7d0:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     7d4:	c9 01       	movw	r24, r18
     7d6:	da 01       	movw	r26, r20
     7d8:	65 96       	adiw	r28, 0x15	; 21
     7da:	8c af       	std	Y+60, r24	; 0x3c
     7dc:	9d af       	std	Y+61, r25	; 0x3d
     7de:	ae af       	std	Y+62, r26	; 0x3e
     7e0:	bf af       	std	Y+63, r27	; 0x3f
     7e2:	65 97       	sbiw	r28, 0x15	; 21
     7e4:	bc 01       	movw	r22, r24
     7e6:	cd 01       	movw	r24, r26
     7e8:	61 96       	adiw	r28, 0x11	; 17
     7ea:	2c ad       	ldd	r18, Y+60	; 0x3c
     7ec:	3d ad       	ldd	r19, Y+61	; 0x3d
     7ee:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f0:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f2:	61 97       	sbiw	r28, 0x11	; 17
     7f4:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     7f8:	9b 01       	movw	r18, r22
     7fa:	ac 01       	movw	r20, r24
     7fc:	87 01       	movw	r16, r14
     7fe:	ff 24       	eor	r15, r15
     800:	ee 24       	eor	r14, r14
     802:	a9 ac       	ldd	r10, Y+57	; 0x39
     804:	ba ac       	ldd	r11, Y+58	; 0x3a
     806:	cb ac       	ldd	r12, Y+59	; 0x3b
     808:	dc ac       	ldd	r13, Y+60	; 0x3c
     80a:	c6 01       	movw	r24, r12
     80c:	aa 27       	eor	r26, r26
     80e:	bb 27       	eor	r27, r27
     810:	5c 01       	movw	r10, r24
     812:	6d 01       	movw	r12, r26
     814:	ae 28       	or	r10, r14
     816:	bf 28       	or	r11, r15
     818:	c0 2a       	or	r12, r16
     81a:	d1 2a       	or	r13, r17
     81c:	a2 16       	cp	r10, r18
     81e:	b3 06       	cpc	r11, r19
     820:	c4 06       	cpc	r12, r20
     822:	d5 06       	cpc	r13, r21
     824:	60 f5       	brcc	.+88     	; 0x87e <__stack+0x1f>
     826:	65 96       	adiw	r28, 0x15	; 21
     828:	6c ad       	ldd	r22, Y+60	; 0x3c
     82a:	7d ad       	ldd	r23, Y+61	; 0x3d
     82c:	8e ad       	ldd	r24, Y+62	; 0x3e
     82e:	9f ad       	ldd	r25, Y+63	; 0x3f
     830:	65 97       	sbiw	r28, 0x15	; 21
     832:	61 50       	subi	r22, 0x01	; 1
     834:	70 40       	sbci	r23, 0x00	; 0
     836:	80 40       	sbci	r24, 0x00	; 0
     838:	90 40       	sbci	r25, 0x00	; 0
     83a:	65 96       	adiw	r28, 0x15	; 21
     83c:	6c af       	std	Y+60, r22	; 0x3c
     83e:	7d af       	std	Y+61, r23	; 0x3d
     840:	8e af       	std	Y+62, r24	; 0x3e
     842:	9f af       	std	Y+63, r25	; 0x3f
     844:	65 97       	sbiw	r28, 0x15	; 21
     846:	a2 0c       	add	r10, r2
     848:	b3 1c       	adc	r11, r3
     84a:	c4 1c       	adc	r12, r4
     84c:	d5 1c       	adc	r13, r5
     84e:	a2 14       	cp	r10, r2
     850:	b3 04       	cpc	r11, r3
     852:	c4 04       	cpc	r12, r4
     854:	d5 04       	cpc	r13, r5
     856:	98 f0       	brcs	.+38     	; 0x87e <__stack+0x1f>
     858:	a2 16       	cp	r10, r18
     85a:	b3 06       	cpc	r11, r19
     85c:	c4 06       	cpc	r12, r20
     85e:	d5 06       	cpc	r13, r21
     860:	70 f4       	brcc	.+28     	; 0x87e <__stack+0x1f>
     862:	61 50       	subi	r22, 0x01	; 1
     864:	70 40       	sbci	r23, 0x00	; 0
     866:	80 40       	sbci	r24, 0x00	; 0
     868:	90 40       	sbci	r25, 0x00	; 0
     86a:	65 96       	adiw	r28, 0x15	; 21
     86c:	6c af       	std	Y+60, r22	; 0x3c
     86e:	7d af       	std	Y+61, r23	; 0x3d
     870:	8e af       	std	Y+62, r24	; 0x3e
     872:	9f af       	std	Y+63, r25	; 0x3f
     874:	65 97       	sbiw	r28, 0x15	; 21
     876:	a2 0c       	add	r10, r2
     878:	b3 1c       	adc	r11, r3
     87a:	c4 1c       	adc	r12, r4
     87c:	d5 1c       	adc	r13, r5
     87e:	a2 1a       	sub	r10, r18
     880:	b3 0a       	sbc	r11, r19
     882:	c4 0a       	sbc	r12, r20
     884:	d5 0a       	sbc	r13, r21
     886:	c6 01       	movw	r24, r12
     888:	b5 01       	movw	r22, r10
     88a:	a4 01       	movw	r20, r8
     88c:	93 01       	movw	r18, r6
     88e:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     892:	7b 01       	movw	r14, r22
     894:	8c 01       	movw	r16, r24
     896:	c6 01       	movw	r24, r12
     898:	b5 01       	movw	r22, r10
     89a:	a4 01       	movw	r20, r8
     89c:	93 01       	movw	r18, r6
     89e:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     8a2:	c9 01       	movw	r24, r18
     8a4:	da 01       	movw	r26, r20
     8a6:	3c 01       	movw	r6, r24
     8a8:	4d 01       	movw	r8, r26
     8aa:	c4 01       	movw	r24, r8
     8ac:	b3 01       	movw	r22, r6
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b2:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b4:	4e ad       	ldd	r20, Y+62	; 0x3e
     8b6:	5f ad       	ldd	r21, Y+63	; 0x3f
     8b8:	61 97       	sbiw	r28, 0x11	; 17
     8ba:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	87 01       	movw	r16, r14
     8c4:	ff 24       	eor	r15, r15
     8c6:	ee 24       	eor	r14, r14
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	9a ad       	ldd	r25, Y+58	; 0x3a
     8cc:	ab ad       	ldd	r26, Y+59	; 0x3b
     8ce:	bc ad       	ldd	r27, Y+60	; 0x3c
     8d0:	a0 70       	andi	r26, 0x00	; 0
     8d2:	b0 70       	andi	r27, 0x00	; 0
     8d4:	57 01       	movw	r10, r14
     8d6:	68 01       	movw	r12, r16
     8d8:	a8 2a       	or	r10, r24
     8da:	b9 2a       	or	r11, r25
     8dc:	ca 2a       	or	r12, r26
     8de:	db 2a       	or	r13, r27
     8e0:	a2 16       	cp	r10, r18
     8e2:	b3 06       	cpc	r11, r19
     8e4:	c4 06       	cpc	r12, r20
     8e6:	d5 06       	cpc	r13, r21
     8e8:	e0 f4       	brcc	.+56     	; 0x922 <__stack+0xc3>
     8ea:	08 94       	sec
     8ec:	61 08       	sbc	r6, r1
     8ee:	71 08       	sbc	r7, r1
     8f0:	81 08       	sbc	r8, r1
     8f2:	91 08       	sbc	r9, r1
     8f4:	a2 0c       	add	r10, r2
     8f6:	b3 1c       	adc	r11, r3
     8f8:	c4 1c       	adc	r12, r4
     8fa:	d5 1c       	adc	r13, r5
     8fc:	a2 14       	cp	r10, r2
     8fe:	b3 04       	cpc	r11, r3
     900:	c4 04       	cpc	r12, r4
     902:	d5 04       	cpc	r13, r5
     904:	70 f0       	brcs	.+28     	; 0x922 <__stack+0xc3>
     906:	a2 16       	cp	r10, r18
     908:	b3 06       	cpc	r11, r19
     90a:	c4 06       	cpc	r12, r20
     90c:	d5 06       	cpc	r13, r21
     90e:	48 f4       	brcc	.+18     	; 0x922 <__stack+0xc3>
     910:	08 94       	sec
     912:	61 08       	sbc	r6, r1
     914:	71 08       	sbc	r7, r1
     916:	81 08       	sbc	r8, r1
     918:	91 08       	sbc	r9, r1
     91a:	a2 0c       	add	r10, r2
     91c:	b3 1c       	adc	r11, r3
     91e:	c4 1c       	adc	r12, r4
     920:	d5 1c       	adc	r13, r5
     922:	21 96       	adiw	r28, 0x01	; 1
     924:	8c ad       	ldd	r24, Y+60	; 0x3c
     926:	9d ad       	ldd	r25, Y+61	; 0x3d
     928:	ae ad       	ldd	r26, Y+62	; 0x3e
     92a:	bf ad       	ldd	r27, Y+63	; 0x3f
     92c:	21 97       	sbiw	r28, 0x01	; 1
     92e:	e3 96       	adiw	r28, 0x33	; 51
     930:	0f ac       	ldd	r0, Y+63	; 0x3f
     932:	e3 97       	sbiw	r28, 0x33	; 51
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0xdf>
     936:	88 0f       	add	r24, r24
     938:	99 1f       	adc	r25, r25
     93a:	aa 1f       	adc	r26, r26
     93c:	bb 1f       	adc	r27, r27
     93e:	0a 94       	dec	r0
     940:	d2 f7       	brpl	.-12     	; 0x936 <__stack+0xd7>
     942:	21 96       	adiw	r28, 0x01	; 1
     944:	8c af       	std	Y+60, r24	; 0x3c
     946:	9d af       	std	Y+61, r25	; 0x3d
     948:	ae af       	std	Y+62, r26	; 0x3e
     94a:	bf af       	std	Y+63, r27	; 0x3f
     94c:	21 97       	sbiw	r28, 0x01	; 1
     94e:	a2 1a       	sub	r10, r18
     950:	b3 0a       	sbc	r11, r19
     952:	c4 0a       	sbc	r12, r20
     954:	d5 0a       	sbc	r13, r21
     956:	65 96       	adiw	r28, 0x15	; 21
     958:	ec ac       	ldd	r14, Y+60	; 0x3c
     95a:	fd ac       	ldd	r15, Y+61	; 0x3d
     95c:	0e ad       	ldd	r16, Y+62	; 0x3e
     95e:	1f ad       	ldd	r17, Y+63	; 0x3f
     960:	65 97       	sbiw	r28, 0x15	; 21
     962:	d7 01       	movw	r26, r14
     964:	99 27       	eor	r25, r25
     966:	88 27       	eor	r24, r24
     968:	68 2a       	or	r6, r24
     96a:	79 2a       	or	r7, r25
     96c:	8a 2a       	or	r8, r26
     96e:	9b 2a       	or	r9, r27
     970:	82 01       	movw	r16, r4
     972:	22 27       	eor	r18, r18
     974:	33 27       	eor	r19, r19
     976:	69 96       	adiw	r28, 0x19	; 25
     978:	0c af       	std	Y+60, r16	; 0x3c
     97a:	1d af       	std	Y+61, r17	; 0x3d
     97c:	2e af       	std	Y+62, r18	; 0x3e
     97e:	3f af       	std	Y+63, r19	; 0x3f
     980:	69 97       	sbiw	r28, 0x19	; 25
     982:	a2 01       	movw	r20, r4
     984:	91 01       	movw	r18, r2
     986:	40 70       	andi	r20, 0x00	; 0
     988:	50 70       	andi	r21, 0x00	; 0
     98a:	6d 96       	adiw	r28, 0x1d	; 29
     98c:	2c af       	std	Y+60, r18	; 0x3c
     98e:	3d af       	std	Y+61, r19	; 0x3d
     990:	4e af       	std	Y+62, r20	; 0x3e
     992:	5f af       	std	Y+63, r21	; 0x3f
     994:	6d 97       	sbiw	r28, 0x1d	; 29
     996:	c6 01       	movw	r24, r12
     998:	b5 01       	movw	r22, r10
     99a:	69 96       	adiw	r28, 0x19	; 25
     99c:	2c ad       	ldd	r18, Y+60	; 0x3c
     99e:	3d ad       	ldd	r19, Y+61	; 0x3d
     9a0:	4e ad       	ldd	r20, Y+62	; 0x3e
     9a2:	5f ad       	ldd	r21, Y+63	; 0x3f
     9a4:	69 97       	sbiw	r28, 0x19	; 25
     9a6:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     9aa:	7b 01       	movw	r14, r22
     9ac:	8c 01       	movw	r16, r24
     9ae:	c6 01       	movw	r24, r12
     9b0:	b5 01       	movw	r22, r10
     9b2:	69 96       	adiw	r28, 0x19	; 25
     9b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     9b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     9b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     9ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     9bc:	69 97       	sbiw	r28, 0x19	; 25
     9be:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     9c2:	c9 01       	movw	r24, r18
     9c4:	da 01       	movw	r26, r20
     9c6:	a1 96       	adiw	r28, 0x21	; 33
     9c8:	8c af       	std	Y+60, r24	; 0x3c
     9ca:	9d af       	std	Y+61, r25	; 0x3d
     9cc:	ae af       	std	Y+62, r26	; 0x3e
     9ce:	bf af       	std	Y+63, r27	; 0x3f
     9d0:	a1 97       	sbiw	r28, 0x21	; 33
     9d2:	bc 01       	movw	r22, r24
     9d4:	cd 01       	movw	r24, r26
     9d6:	6d 96       	adiw	r28, 0x1d	; 29
     9d8:	2c ad       	ldd	r18, Y+60	; 0x3c
     9da:	3d ad       	ldd	r19, Y+61	; 0x3d
     9dc:	4e ad       	ldd	r20, Y+62	; 0x3e
     9de:	5f ad       	ldd	r21, Y+63	; 0x3f
     9e0:	6d 97       	sbiw	r28, 0x1d	; 29
     9e2:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	87 01       	movw	r16, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	ee 24       	eor	r14, r14
     9f0:	21 96       	adiw	r28, 0x01	; 1
     9f2:	ac ac       	ldd	r10, Y+60	; 0x3c
     9f4:	bd ac       	ldd	r11, Y+61	; 0x3d
     9f6:	ce ac       	ldd	r12, Y+62	; 0x3e
     9f8:	df ac       	ldd	r13, Y+63	; 0x3f
     9fa:	21 97       	sbiw	r28, 0x01	; 1
     9fc:	c6 01       	movw	r24, r12
     9fe:	aa 27       	eor	r26, r26
     a00:	bb 27       	eor	r27, r27
     a02:	57 01       	movw	r10, r14
     a04:	68 01       	movw	r12, r16
     a06:	a8 2a       	or	r10, r24
     a08:	b9 2a       	or	r11, r25
     a0a:	ca 2a       	or	r12, r26
     a0c:	db 2a       	or	r13, r27
     a0e:	a2 16       	cp	r10, r18
     a10:	b3 06       	cpc	r11, r19
     a12:	c4 06       	cpc	r12, r20
     a14:	d5 06       	cpc	r13, r21
     a16:	60 f5       	brcc	.+88     	; 0xa70 <__stack+0x211>
     a18:	a1 96       	adiw	r28, 0x21	; 33
     a1a:	6c ad       	ldd	r22, Y+60	; 0x3c
     a1c:	7d ad       	ldd	r23, Y+61	; 0x3d
     a1e:	8e ad       	ldd	r24, Y+62	; 0x3e
     a20:	9f ad       	ldd	r25, Y+63	; 0x3f
     a22:	a1 97       	sbiw	r28, 0x21	; 33
     a24:	61 50       	subi	r22, 0x01	; 1
     a26:	70 40       	sbci	r23, 0x00	; 0
     a28:	80 40       	sbci	r24, 0x00	; 0
     a2a:	90 40       	sbci	r25, 0x00	; 0
     a2c:	a1 96       	adiw	r28, 0x21	; 33
     a2e:	6c af       	std	Y+60, r22	; 0x3c
     a30:	7d af       	std	Y+61, r23	; 0x3d
     a32:	8e af       	std	Y+62, r24	; 0x3e
     a34:	9f af       	std	Y+63, r25	; 0x3f
     a36:	a1 97       	sbiw	r28, 0x21	; 33
     a38:	a2 0c       	add	r10, r2
     a3a:	b3 1c       	adc	r11, r3
     a3c:	c4 1c       	adc	r12, r4
     a3e:	d5 1c       	adc	r13, r5
     a40:	a2 14       	cp	r10, r2
     a42:	b3 04       	cpc	r11, r3
     a44:	c4 04       	cpc	r12, r4
     a46:	d5 04       	cpc	r13, r5
     a48:	98 f0       	brcs	.+38     	; 0xa70 <__stack+0x211>
     a4a:	a2 16       	cp	r10, r18
     a4c:	b3 06       	cpc	r11, r19
     a4e:	c4 06       	cpc	r12, r20
     a50:	d5 06       	cpc	r13, r21
     a52:	70 f4       	brcc	.+28     	; 0xa70 <__stack+0x211>
     a54:	61 50       	subi	r22, 0x01	; 1
     a56:	70 40       	sbci	r23, 0x00	; 0
     a58:	80 40       	sbci	r24, 0x00	; 0
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a1 96       	adiw	r28, 0x21	; 33
     a5e:	6c af       	std	Y+60, r22	; 0x3c
     a60:	7d af       	std	Y+61, r23	; 0x3d
     a62:	8e af       	std	Y+62, r24	; 0x3e
     a64:	9f af       	std	Y+63, r25	; 0x3f
     a66:	a1 97       	sbiw	r28, 0x21	; 33
     a68:	a2 0c       	add	r10, r2
     a6a:	b3 1c       	adc	r11, r3
     a6c:	c4 1c       	adc	r12, r4
     a6e:	d5 1c       	adc	r13, r5
     a70:	a2 1a       	sub	r10, r18
     a72:	b3 0a       	sbc	r11, r19
     a74:	c4 0a       	sbc	r12, r20
     a76:	d5 0a       	sbc	r13, r21
     a78:	c6 01       	movw	r24, r12
     a7a:	b5 01       	movw	r22, r10
     a7c:	69 96       	adiw	r28, 0x19	; 25
     a7e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a80:	3d ad       	ldd	r19, Y+61	; 0x3d
     a82:	4e ad       	ldd	r20, Y+62	; 0x3e
     a84:	5f ad       	ldd	r21, Y+63	; 0x3f
     a86:	69 97       	sbiw	r28, 0x19	; 25
     a88:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     a8c:	7b 01       	movw	r14, r22
     a8e:	8c 01       	movw	r16, r24
     a90:	c6 01       	movw	r24, r12
     a92:	b5 01       	movw	r22, r10
     a94:	69 96       	adiw	r28, 0x19	; 25
     a96:	2c ad       	ldd	r18, Y+60	; 0x3c
     a98:	3d ad       	ldd	r19, Y+61	; 0x3d
     a9a:	4e ad       	ldd	r20, Y+62	; 0x3e
     a9c:	5f ad       	ldd	r21, Y+63	; 0x3f
     a9e:	69 97       	sbiw	r28, 0x19	; 25
     aa0:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     aa4:	c9 01       	movw	r24, r18
     aa6:	da 01       	movw	r26, r20
     aa8:	5c 01       	movw	r10, r24
     aaa:	6d 01       	movw	r12, r26
     aac:	c6 01       	movw	r24, r12
     aae:	b5 01       	movw	r22, r10
     ab0:	6d 96       	adiw	r28, 0x1d	; 29
     ab2:	2c ad       	ldd	r18, Y+60	; 0x3c
     ab4:	3d ad       	ldd	r19, Y+61	; 0x3d
     ab6:	4e ad       	ldd	r20, Y+62	; 0x3e
     ab8:	5f ad       	ldd	r21, Y+63	; 0x3f
     aba:	6d 97       	sbiw	r28, 0x1d	; 29
     abc:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	87 01       	movw	r16, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	ee 24       	eor	r14, r14
     aca:	21 96       	adiw	r28, 0x01	; 1
     acc:	8c ad       	ldd	r24, Y+60	; 0x3c
     ace:	9d ad       	ldd	r25, Y+61	; 0x3d
     ad0:	ae ad       	ldd	r26, Y+62	; 0x3e
     ad2:	bf ad       	ldd	r27, Y+63	; 0x3f
     ad4:	21 97       	sbiw	r28, 0x01	; 1
     ad6:	a0 70       	andi	r26, 0x00	; 0
     ad8:	b0 70       	andi	r27, 0x00	; 0
     ada:	e8 2a       	or	r14, r24
     adc:	f9 2a       	or	r15, r25
     ade:	0a 2b       	or	r16, r26
     ae0:	1b 2b       	or	r17, r27
     ae2:	e2 16       	cp	r14, r18
     ae4:	f3 06       	cpc	r15, r19
     ae6:	04 07       	cpc	r16, r20
     ae8:	15 07       	cpc	r17, r21
     aea:	c0 f4       	brcc	.+48     	; 0xb1c <__stack+0x2bd>
     aec:	08 94       	sec
     aee:	a1 08       	sbc	r10, r1
     af0:	b1 08       	sbc	r11, r1
     af2:	c1 08       	sbc	r12, r1
     af4:	d1 08       	sbc	r13, r1
     af6:	e2 0c       	add	r14, r2
     af8:	f3 1c       	adc	r15, r3
     afa:	04 1d       	adc	r16, r4
     afc:	15 1d       	adc	r17, r5
     afe:	e2 14       	cp	r14, r2
     b00:	f3 04       	cpc	r15, r3
     b02:	04 05       	cpc	r16, r4
     b04:	15 05       	cpc	r17, r5
     b06:	50 f0       	brcs	.+20     	; 0xb1c <__stack+0x2bd>
     b08:	e2 16       	cp	r14, r18
     b0a:	f3 06       	cpc	r15, r19
     b0c:	04 07       	cpc	r16, r20
     b0e:	15 07       	cpc	r17, r21
     b10:	28 f4       	brcc	.+10     	; 0xb1c <__stack+0x2bd>
     b12:	08 94       	sec
     b14:	a1 08       	sbc	r10, r1
     b16:	b1 08       	sbc	r11, r1
     b18:	c1 08       	sbc	r12, r1
     b1a:	d1 08       	sbc	r13, r1
     b1c:	a1 96       	adiw	r28, 0x21	; 33
     b1e:	ec ac       	ldd	r14, Y+60	; 0x3c
     b20:	fd ac       	ldd	r15, Y+61	; 0x3d
     b22:	0e ad       	ldd	r16, Y+62	; 0x3e
     b24:	1f ad       	ldd	r17, Y+63	; 0x3f
     b26:	a1 97       	sbiw	r28, 0x21	; 33
     b28:	d7 01       	movw	r26, r14
     b2a:	99 27       	eor	r25, r25
     b2c:	88 27       	eor	r24, r24
     b2e:	96 01       	movw	r18, r12
     b30:	85 01       	movw	r16, r10
     b32:	08 2b       	or	r16, r24
     b34:	19 2b       	or	r17, r25
     b36:	2a 2b       	or	r18, r26
     b38:	3b 2b       	or	r19, r27
     b3a:	25 96       	adiw	r28, 0x05	; 5
     b3c:	0c af       	std	Y+60, r16	; 0x3c
     b3e:	1d af       	std	Y+61, r17	; 0x3d
     b40:	2e af       	std	Y+62, r18	; 0x3e
     b42:	3f af       	std	Y+63, r19	; 0x3f
     b44:	25 97       	sbiw	r28, 0x05	; 5
     b46:	72 c2       	rjmp	.+1252   	; 0x102c <__stack+0x7cd>
     b48:	6e 14       	cp	r6, r14
     b4a:	7f 04       	cpc	r7, r15
     b4c:	80 06       	cpc	r8, r16
     b4e:	91 06       	cpc	r9, r17
     b50:	08 f4       	brcc	.+2      	; 0xb54 <__stack+0x2f5>
     b52:	5f c2       	rjmp	.+1214   	; 0x1012 <__stack+0x7b3>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	e2 16       	cp	r14, r18
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	f2 06       	cpc	r15, r18
     b5c:	21 e0       	ldi	r18, 0x01	; 1
     b5e:	02 07       	cpc	r16, r18
     b60:	20 e0       	ldi	r18, 0x00	; 0
     b62:	12 07       	cpc	r17, r18
     b64:	88 f4       	brcc	.+34     	; 0xb88 <__stack+0x329>
     b66:	3f ef       	ldi	r19, 0xFF	; 255
     b68:	e3 16       	cp	r14, r19
     b6a:	f1 04       	cpc	r15, r1
     b6c:	01 05       	cpc	r16, r1
     b6e:	11 05       	cpc	r17, r1
     b70:	31 f0       	breq	.+12     	; 0xb7e <__stack+0x31f>
     b72:	28 f0       	brcs	.+10     	; 0xb7e <__stack+0x31f>
     b74:	48 e0       	ldi	r20, 0x08	; 8
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	17 c0       	rjmp	.+46     	; 0xbac <__stack+0x34d>
     b7e:	40 e0       	ldi	r20, 0x00	; 0
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	60 e0       	ldi	r22, 0x00	; 0
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	12 c0       	rjmp	.+36     	; 0xbac <__stack+0x34d>
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	e4 16       	cp	r14, r20
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	f4 06       	cpc	r15, r20
     b90:	40 e0       	ldi	r20, 0x00	; 0
     b92:	04 07       	cpc	r16, r20
     b94:	41 e0       	ldi	r20, 0x01	; 1
     b96:	14 07       	cpc	r17, r20
     b98:	28 f0       	brcs	.+10     	; 0xba4 <__stack+0x345>
     b9a:	48 e1       	ldi	r20, 0x18	; 24
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	04 c0       	rjmp	.+8      	; 0xbac <__stack+0x34d>
     ba4:	40 e1       	ldi	r20, 0x10	; 16
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	d8 01       	movw	r26, r16
     bae:	c7 01       	movw	r24, r14
     bb0:	04 2e       	mov	r0, r20
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__stack+0x35d>
     bb4:	b6 95       	lsr	r27
     bb6:	a7 95       	ror	r26
     bb8:	97 95       	ror	r25
     bba:	87 95       	ror	r24
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__stack+0x355>
     bc0:	87 5f       	subi	r24, 0xF7	; 247
     bc2:	9e 4f       	sbci	r25, 0xFE	; 254
     bc4:	dc 01       	movw	r26, r24
     bc6:	2c 91       	ld	r18, X
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	a3 2e       	mov	r10, r19
     bcc:	b1 2c       	mov	r11, r1
     bce:	c1 2c       	mov	r12, r1
     bd0:	d1 2c       	mov	r13, r1
     bd2:	d6 01       	movw	r26, r12
     bd4:	c5 01       	movw	r24, r10
     bd6:	84 1b       	sub	r24, r20
     bd8:	95 0b       	sbc	r25, r21
     bda:	a6 0b       	sbc	r26, r22
     bdc:	b7 0b       	sbc	r27, r23
     bde:	82 1b       	sub	r24, r18
     be0:	91 09       	sbc	r25, r1
     be2:	a1 09       	sbc	r26, r1
     be4:	b1 09       	sbc	r27, r1
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	a1 05       	cpc	r26, r1
     bea:	b1 05       	cpc	r27, r1
     bec:	99 f4       	brne	.+38     	; 0xc14 <__stack+0x3b5>
     bee:	e6 14       	cp	r14, r6
     bf0:	f7 04       	cpc	r15, r7
     bf2:	08 05       	cpc	r16, r8
     bf4:	19 05       	cpc	r17, r9
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__stack+0x39b>
     bf8:	fe c1       	rjmp	.+1020   	; 0xff6 <__stack+0x797>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	6c ac       	ldd	r6, Y+60	; 0x3c
     bfe:	7d ac       	ldd	r7, Y+61	; 0x3d
     c00:	8e ac       	ldd	r8, Y+62	; 0x3e
     c02:	9f ac       	ldd	r9, Y+63	; 0x3f
     c04:	21 97       	sbiw	r28, 0x01	; 1
     c06:	62 14       	cp	r6, r2
     c08:	73 04       	cpc	r7, r3
     c0a:	84 04       	cpc	r8, r4
     c0c:	95 04       	cpc	r9, r5
     c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x3b3>
     c10:	f2 c1       	rjmp	.+996    	; 0xff6 <__stack+0x797>
     c12:	ff c1       	rjmp	.+1022   	; 0x1012 <__stack+0x7b3>
     c14:	e2 96       	adiw	r28, 0x32	; 50
     c16:	8f af       	std	Y+63, r24	; 0x3f
     c18:	e2 97       	sbiw	r28, 0x32	; 50
     c1a:	08 2e       	mov	r0, r24
     c1c:	04 c0       	rjmp	.+8      	; 0xc26 <__stack+0x3c7>
     c1e:	ee 0c       	add	r14, r14
     c20:	ff 1c       	adc	r15, r15
     c22:	00 1f       	adc	r16, r16
     c24:	11 1f       	adc	r17, r17
     c26:	0a 94       	dec	r0
     c28:	d2 f7       	brpl	.-12     	; 0xc1e <__stack+0x3bf>
     c2a:	6a 2d       	mov	r22, r10
     c2c:	68 1b       	sub	r22, r24
     c2e:	d2 01       	movw	r26, r4
     c30:	c1 01       	movw	r24, r2
     c32:	06 2e       	mov	r0, r22
     c34:	04 c0       	rjmp	.+8      	; 0xc3e <__stack+0x3df>
     c36:	b6 95       	lsr	r27
     c38:	a7 95       	ror	r26
     c3a:	97 95       	ror	r25
     c3c:	87 95       	ror	r24
     c3e:	0a 94       	dec	r0
     c40:	d2 f7       	brpl	.-12     	; 0xc36 <__stack+0x3d7>
     c42:	5c 01       	movw	r10, r24
     c44:	6d 01       	movw	r12, r26
     c46:	ae 28       	or	r10, r14
     c48:	bf 28       	or	r11, r15
     c4a:	c0 2a       	or	r12, r16
     c4c:	d1 2a       	or	r13, r17
     c4e:	ad aa       	std	Y+53, r10	; 0x35
     c50:	be aa       	std	Y+54, r11	; 0x36
     c52:	cf aa       	std	Y+55, r12	; 0x37
     c54:	d8 ae       	std	Y+56, r13	; 0x38
     c56:	72 01       	movw	r14, r4
     c58:	61 01       	movw	r12, r2
     c5a:	e2 96       	adiw	r28, 0x32	; 50
     c5c:	0f ac       	ldd	r0, Y+63	; 0x3f
     c5e:	e2 97       	sbiw	r28, 0x32	; 50
     c60:	04 c0       	rjmp	.+8      	; 0xc6a <__stack+0x40b>
     c62:	cc 0c       	add	r12, r12
     c64:	dd 1c       	adc	r13, r13
     c66:	ee 1c       	adc	r14, r14
     c68:	ff 1c       	adc	r15, r15
     c6a:	0a 94       	dec	r0
     c6c:	d2 f7       	brpl	.-12     	; 0xc62 <__stack+0x403>
     c6e:	c9 aa       	std	Y+49, r12	; 0x31
     c70:	da aa       	std	Y+50, r13	; 0x32
     c72:	eb aa       	std	Y+51, r14	; 0x33
     c74:	fc aa       	std	Y+52, r15	; 0x34
     c76:	64 01       	movw	r12, r8
     c78:	53 01       	movw	r10, r6
     c7a:	06 2e       	mov	r0, r22
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__stack+0x427>
     c7e:	d6 94       	lsr	r13
     c80:	c7 94       	ror	r12
     c82:	b7 94       	ror	r11
     c84:	a7 94       	ror	r10
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__stack+0x41f>
     c8a:	d4 01       	movw	r26, r8
     c8c:	c3 01       	movw	r24, r6
     c8e:	e2 96       	adiw	r28, 0x32	; 50
     c90:	0f ac       	ldd	r0, Y+63	; 0x3f
     c92:	e2 97       	sbiw	r28, 0x32	; 50
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__stack+0x43f>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__stack+0x437>
     ca2:	21 96       	adiw	r28, 0x01	; 1
     ca4:	ec ac       	ldd	r14, Y+60	; 0x3c
     ca6:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca8:	0e ad       	ldd	r16, Y+62	; 0x3e
     caa:	1f ad       	ldd	r17, Y+63	; 0x3f
     cac:	21 97       	sbiw	r28, 0x01	; 1
     cae:	04 c0       	rjmp	.+8      	; 0xcb8 <__stack+0x459>
     cb0:	16 95       	lsr	r17
     cb2:	07 95       	ror	r16
     cb4:	f7 94       	ror	r15
     cb6:	e7 94       	ror	r14
     cb8:	6a 95       	dec	r22
     cba:	d2 f7       	brpl	.-12     	; 0xcb0 <__stack+0x451>
     cbc:	37 01       	movw	r6, r14
     cbe:	48 01       	movw	r8, r16
     cc0:	68 2a       	or	r6, r24
     cc2:	79 2a       	or	r7, r25
     cc4:	8a 2a       	or	r8, r26
     cc6:	9b 2a       	or	r9, r27
     cc8:	6d a6       	std	Y+45, r6	; 0x2d
     cca:	7e a6       	std	Y+46, r7	; 0x2e
     ccc:	8f a6       	std	Y+47, r8	; 0x2f
     cce:	98 aa       	std	Y+48, r9	; 0x30
     cd0:	ed a8       	ldd	r14, Y+53	; 0x35
     cd2:	fe a8       	ldd	r15, Y+54	; 0x36
     cd4:	0f a9       	ldd	r16, Y+55	; 0x37
     cd6:	18 ad       	ldd	r17, Y+56	; 0x38
     cd8:	38 01       	movw	r6, r16
     cda:	88 24       	eor	r8, r8
     cdc:	99 24       	eor	r9, r9
     cde:	98 01       	movw	r18, r16
     ce0:	87 01       	movw	r16, r14
     ce2:	20 70       	andi	r18, 0x00	; 0
     ce4:	30 70       	andi	r19, 0x00	; 0
     ce6:	a5 96       	adiw	r28, 0x25	; 37
     ce8:	0c af       	std	Y+60, r16	; 0x3c
     cea:	1d af       	std	Y+61, r17	; 0x3d
     cec:	2e af       	std	Y+62, r18	; 0x3e
     cee:	3f af       	std	Y+63, r19	; 0x3f
     cf0:	a5 97       	sbiw	r28, 0x25	; 37
     cf2:	c6 01       	movw	r24, r12
     cf4:	b5 01       	movw	r22, r10
     cf6:	a4 01       	movw	r20, r8
     cf8:	93 01       	movw	r18, r6
     cfa:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     cfe:	7b 01       	movw	r14, r22
     d00:	8c 01       	movw	r16, r24
     d02:	c6 01       	movw	r24, r12
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	93 01       	movw	r18, r6
     d0a:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     d0e:	c9 01       	movw	r24, r18
     d10:	da 01       	movw	r26, r20
     d12:	1c 01       	movw	r2, r24
     d14:	2d 01       	movw	r4, r26
     d16:	c2 01       	movw	r24, r4
     d18:	b1 01       	movw	r22, r2
     d1a:	a5 96       	adiw	r28, 0x25	; 37
     d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     d20:	4e ad       	ldd	r20, Y+62	; 0x3e
     d22:	5f ad       	ldd	r21, Y+63	; 0x3f
     d24:	a5 97       	sbiw	r28, 0x25	; 37
     d26:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     d2a:	9b 01       	movw	r18, r22
     d2c:	ac 01       	movw	r20, r24
     d2e:	87 01       	movw	r16, r14
     d30:	ff 24       	eor	r15, r15
     d32:	ee 24       	eor	r14, r14
     d34:	ad a4       	ldd	r10, Y+45	; 0x2d
     d36:	be a4       	ldd	r11, Y+46	; 0x2e
     d38:	cf a4       	ldd	r12, Y+47	; 0x2f
     d3a:	d8 a8       	ldd	r13, Y+48	; 0x30
     d3c:	c6 01       	movw	r24, r12
     d3e:	aa 27       	eor	r26, r26
     d40:	bb 27       	eor	r27, r27
     d42:	57 01       	movw	r10, r14
     d44:	68 01       	movw	r12, r16
     d46:	a8 2a       	or	r10, r24
     d48:	b9 2a       	or	r11, r25
     d4a:	ca 2a       	or	r12, r26
     d4c:	db 2a       	or	r13, r27
     d4e:	a2 16       	cp	r10, r18
     d50:	b3 06       	cpc	r11, r19
     d52:	c4 06       	cpc	r12, r20
     d54:	d5 06       	cpc	r13, r21
     d56:	00 f5       	brcc	.+64     	; 0xd98 <__stack+0x539>
     d58:	08 94       	sec
     d5a:	21 08       	sbc	r2, r1
     d5c:	31 08       	sbc	r3, r1
     d5e:	41 08       	sbc	r4, r1
     d60:	51 08       	sbc	r5, r1
     d62:	ed a8       	ldd	r14, Y+53	; 0x35
     d64:	fe a8       	ldd	r15, Y+54	; 0x36
     d66:	0f a9       	ldd	r16, Y+55	; 0x37
     d68:	18 ad       	ldd	r17, Y+56	; 0x38
     d6a:	ae 0c       	add	r10, r14
     d6c:	bf 1c       	adc	r11, r15
     d6e:	c0 1e       	adc	r12, r16
     d70:	d1 1e       	adc	r13, r17
     d72:	ae 14       	cp	r10, r14
     d74:	bf 04       	cpc	r11, r15
     d76:	c0 06       	cpc	r12, r16
     d78:	d1 06       	cpc	r13, r17
     d7a:	70 f0       	brcs	.+28     	; 0xd98 <__stack+0x539>
     d7c:	a2 16       	cp	r10, r18
     d7e:	b3 06       	cpc	r11, r19
     d80:	c4 06       	cpc	r12, r20
     d82:	d5 06       	cpc	r13, r21
     d84:	48 f4       	brcc	.+18     	; 0xd98 <__stack+0x539>
     d86:	08 94       	sec
     d88:	21 08       	sbc	r2, r1
     d8a:	31 08       	sbc	r3, r1
     d8c:	41 08       	sbc	r4, r1
     d8e:	51 08       	sbc	r5, r1
     d90:	ae 0c       	add	r10, r14
     d92:	bf 1c       	adc	r11, r15
     d94:	c0 1e       	adc	r12, r16
     d96:	d1 1e       	adc	r13, r17
     d98:	a2 1a       	sub	r10, r18
     d9a:	b3 0a       	sbc	r11, r19
     d9c:	c4 0a       	sbc	r12, r20
     d9e:	d5 0a       	sbc	r13, r21
     da0:	c6 01       	movw	r24, r12
     da2:	b5 01       	movw	r22, r10
     da4:	a4 01       	movw	r20, r8
     da6:	93 01       	movw	r18, r6
     da8:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     dac:	7b 01       	movw	r14, r22
     dae:	8c 01       	movw	r16, r24
     db0:	c6 01       	movw	r24, r12
     db2:	b5 01       	movw	r22, r10
     db4:	a4 01       	movw	r20, r8
     db6:	93 01       	movw	r18, r6
     db8:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
     dbc:	c9 01       	movw	r24, r18
     dbe:	da 01       	movw	r26, r20
     dc0:	3c 01       	movw	r6, r24
     dc2:	4d 01       	movw	r8, r26
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	a5 96       	adiw	r28, 0x25	; 37
     dca:	2c ad       	ldd	r18, Y+60	; 0x3c
     dcc:	3d ad       	ldd	r19, Y+61	; 0x3d
     dce:	4e ad       	ldd	r20, Y+62	; 0x3e
     dd0:	5f ad       	ldd	r21, Y+63	; 0x3f
     dd2:	a5 97       	sbiw	r28, 0x25	; 37
     dd4:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	87 01       	movw	r16, r14
     dde:	ff 24       	eor	r15, r15
     de0:	ee 24       	eor	r14, r14
     de2:	8d a5       	ldd	r24, Y+45	; 0x2d
     de4:	9e a5       	ldd	r25, Y+46	; 0x2e
     de6:	af a5       	ldd	r26, Y+47	; 0x2f
     de8:	b8 a9       	ldd	r27, Y+48	; 0x30
     dea:	a0 70       	andi	r26, 0x00	; 0
     dec:	b0 70       	andi	r27, 0x00	; 0
     dee:	57 01       	movw	r10, r14
     df0:	68 01       	movw	r12, r16
     df2:	a8 2a       	or	r10, r24
     df4:	b9 2a       	or	r11, r25
     df6:	ca 2a       	or	r12, r26
     df8:	db 2a       	or	r13, r27
     dfa:	a2 16       	cp	r10, r18
     dfc:	b3 06       	cpc	r11, r19
     dfe:	c4 06       	cpc	r12, r20
     e00:	d5 06       	cpc	r13, r21
     e02:	00 f5       	brcc	.+64     	; 0xe44 <__stack+0x5e5>
     e04:	08 94       	sec
     e06:	61 08       	sbc	r6, r1
     e08:	71 08       	sbc	r7, r1
     e0a:	81 08       	sbc	r8, r1
     e0c:	91 08       	sbc	r9, r1
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	a6 0e       	add	r10, r22
     e18:	b7 1e       	adc	r11, r23
     e1a:	c8 1e       	adc	r12, r24
     e1c:	d9 1e       	adc	r13, r25
     e1e:	a6 16       	cp	r10, r22
     e20:	b7 06       	cpc	r11, r23
     e22:	c8 06       	cpc	r12, r24
     e24:	d9 06       	cpc	r13, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <__stack+0x5e5>
     e28:	a2 16       	cp	r10, r18
     e2a:	b3 06       	cpc	r11, r19
     e2c:	c4 06       	cpc	r12, r20
     e2e:	d5 06       	cpc	r13, r21
     e30:	48 f4       	brcc	.+18     	; 0xe44 <__stack+0x5e5>
     e32:	08 94       	sec
     e34:	61 08       	sbc	r6, r1
     e36:	71 08       	sbc	r7, r1
     e38:	81 08       	sbc	r8, r1
     e3a:	91 08       	sbc	r9, r1
     e3c:	a6 0e       	add	r10, r22
     e3e:	b7 1e       	adc	r11, r23
     e40:	c8 1e       	adc	r12, r24
     e42:	d9 1e       	adc	r13, r25
     e44:	d6 01       	movw	r26, r12
     e46:	c5 01       	movw	r24, r10
     e48:	82 1b       	sub	r24, r18
     e4a:	93 0b       	sbc	r25, r19
     e4c:	a4 0b       	sbc	r26, r20
     e4e:	b5 0b       	sbc	r27, r21
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	9a a7       	std	Y+42, r25	; 0x2a
     e54:	ab a7       	std	Y+43, r26	; 0x2b
     e56:	bc a7       	std	Y+44, r27	; 0x2c
     e58:	d1 01       	movw	r26, r2
     e5a:	99 27       	eor	r25, r25
     e5c:	88 27       	eor	r24, r24
     e5e:	64 01       	movw	r12, r8
     e60:	53 01       	movw	r10, r6
     e62:	a8 2a       	or	r10, r24
     e64:	b9 2a       	or	r11, r25
     e66:	ca 2a       	or	r12, r26
     e68:	db 2a       	or	r13, r27
     e6a:	25 96       	adiw	r28, 0x05	; 5
     e6c:	ac ae       	std	Y+60, r10	; 0x3c
     e6e:	bd ae       	std	Y+61, r11	; 0x3d
     e70:	ce ae       	std	Y+62, r12	; 0x3e
     e72:	df ae       	std	Y+63, r13	; 0x3f
     e74:	25 97       	sbiw	r28, 0x05	; 5
     e76:	86 01       	movw	r16, r12
     e78:	75 01       	movw	r14, r10
     e7a:	2f ef       	ldi	r18, 0xFF	; 255
     e7c:	3f ef       	ldi	r19, 0xFF	; 255
     e7e:	40 e0       	ldi	r20, 0x00	; 0
     e80:	50 e0       	ldi	r21, 0x00	; 0
     e82:	e2 22       	and	r14, r18
     e84:	f3 22       	and	r15, r19
     e86:	04 23       	and	r16, r20
     e88:	15 23       	and	r17, r21
     e8a:	a6 01       	movw	r20, r12
     e8c:	66 27       	eor	r22, r22
     e8e:	77 27       	eor	r23, r23
     e90:	ad 96       	adiw	r28, 0x2d	; 45
     e92:	4c af       	std	Y+60, r20	; 0x3c
     e94:	5d af       	std	Y+61, r21	; 0x3d
     e96:	6e af       	std	Y+62, r22	; 0x3e
     e98:	7f af       	std	Y+63, r23	; 0x3f
     e9a:	ad 97       	sbiw	r28, 0x2d	; 45
     e9c:	a9 a8       	ldd	r10, Y+49	; 0x31
     e9e:	ba a8       	ldd	r11, Y+50	; 0x32
     ea0:	cb a8       	ldd	r12, Y+51	; 0x33
     ea2:	dc a8       	ldd	r13, Y+52	; 0x34
     ea4:	6f ef       	ldi	r22, 0xFF	; 255
     ea6:	7f ef       	ldi	r23, 0xFF	; 255
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a6 22       	and	r10, r22
     eae:	b7 22       	and	r11, r23
     eb0:	c8 22       	and	r12, r24
     eb2:	d9 22       	and	r13, r25
     eb4:	89 a9       	ldd	r24, Y+49	; 0x31
     eb6:	9a a9       	ldd	r25, Y+50	; 0x32
     eb8:	ab a9       	ldd	r26, Y+51	; 0x33
     eba:	bc a9       	ldd	r27, Y+52	; 0x34
     ebc:	1d 01       	movw	r2, r26
     ebe:	44 24       	eor	r4, r4
     ec0:	55 24       	eor	r5, r5
     ec2:	c8 01       	movw	r24, r16
     ec4:	b7 01       	movw	r22, r14
     ec6:	a6 01       	movw	r20, r12
     ec8:	95 01       	movw	r18, r10
     eca:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     ece:	a9 96       	adiw	r28, 0x29	; 41
     ed0:	6c af       	std	Y+60, r22	; 0x3c
     ed2:	7d af       	std	Y+61, r23	; 0x3d
     ed4:	8e af       	std	Y+62, r24	; 0x3e
     ed6:	9f af       	std	Y+63, r25	; 0x3f
     ed8:	a9 97       	sbiw	r28, 0x29	; 41
     eda:	c8 01       	movw	r24, r16
     edc:	b7 01       	movw	r22, r14
     ede:	a2 01       	movw	r20, r4
     ee0:	91 01       	movw	r18, r2
     ee2:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     ee6:	3b 01       	movw	r6, r22
     ee8:	4c 01       	movw	r8, r24
     eea:	ad 96       	adiw	r28, 0x2d	; 45
     eec:	6c ad       	ldd	r22, Y+60	; 0x3c
     eee:	7d ad       	ldd	r23, Y+61	; 0x3d
     ef0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ef2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ef4:	ad 97       	sbiw	r28, 0x2d	; 45
     ef6:	a6 01       	movw	r20, r12
     ef8:	95 01       	movw	r18, r10
     efa:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     efe:	7b 01       	movw	r14, r22
     f00:	8c 01       	movw	r16, r24
     f02:	ad 96       	adiw	r28, 0x2d	; 45
     f04:	6c ad       	ldd	r22, Y+60	; 0x3c
     f06:	7d ad       	ldd	r23, Y+61	; 0x3d
     f08:	8e ad       	ldd	r24, Y+62	; 0x3e
     f0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     f0c:	ad 97       	sbiw	r28, 0x2d	; 45
     f0e:	a2 01       	movw	r20, r4
     f10:	91 01       	movw	r18, r2
     f12:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
     f16:	5b 01       	movw	r10, r22
     f18:	6c 01       	movw	r12, r24
     f1a:	a8 01       	movw	r20, r16
     f1c:	97 01       	movw	r18, r14
     f1e:	26 0d       	add	r18, r6
     f20:	37 1d       	adc	r19, r7
     f22:	48 1d       	adc	r20, r8
     f24:	59 1d       	adc	r21, r9
     f26:	a9 96       	adiw	r28, 0x29	; 41
     f28:	6c ac       	ldd	r6, Y+60	; 0x3c
     f2a:	7d ac       	ldd	r7, Y+61	; 0x3d
     f2c:	8e ac       	ldd	r8, Y+62	; 0x3e
     f2e:	9f ac       	ldd	r9, Y+63	; 0x3f
     f30:	a9 97       	sbiw	r28, 0x29	; 41
     f32:	c4 01       	movw	r24, r8
     f34:	aa 27       	eor	r26, r26
     f36:	bb 27       	eor	r27, r27
     f38:	28 0f       	add	r18, r24
     f3a:	39 1f       	adc	r19, r25
     f3c:	4a 1f       	adc	r20, r26
     f3e:	5b 1f       	adc	r21, r27
     f40:	2e 15       	cp	r18, r14
     f42:	3f 05       	cpc	r19, r15
     f44:	40 07       	cpc	r20, r16
     f46:	51 07       	cpc	r21, r17
     f48:	48 f4       	brcc	.+18     	; 0xf5c <__stack+0x6fd>
     f4a:	e1 2c       	mov	r14, r1
     f4c:	f1 2c       	mov	r15, r1
     f4e:	61 e0       	ldi	r22, 0x01	; 1
     f50:	06 2f       	mov	r16, r22
     f52:	11 2d       	mov	r17, r1
     f54:	ae 0c       	add	r10, r14
     f56:	bf 1c       	adc	r11, r15
     f58:	c0 1e       	adc	r12, r16
     f5a:	d1 1e       	adc	r13, r17
     f5c:	ca 01       	movw	r24, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	bb 27       	eor	r27, r27
     f62:	bc 01       	movw	r22, r24
     f64:	cd 01       	movw	r24, r26
     f66:	6a 0d       	add	r22, r10
     f68:	7b 1d       	adc	r23, r11
     f6a:	8c 1d       	adc	r24, r12
     f6c:	9d 1d       	adc	r25, r13
     f6e:	69 a4       	ldd	r6, Y+41	; 0x29
     f70:	7a a4       	ldd	r7, Y+42	; 0x2a
     f72:	8b a4       	ldd	r8, Y+43	; 0x2b
     f74:	9c a4       	ldd	r9, Y+44	; 0x2c
     f76:	66 16       	cp	r6, r22
     f78:	77 06       	cpc	r7, r23
     f7a:	88 06       	cpc	r8, r24
     f7c:	99 06       	cpc	r9, r25
     f7e:	50 f1       	brcs	.+84     	; 0xfd4 <__stack+0x775>
     f80:	66 15       	cp	r22, r6
     f82:	77 05       	cpc	r23, r7
     f84:	88 05       	cpc	r24, r8
     f86:	99 05       	cpc	r25, r9
     f88:	09 f0       	breq	.+2      	; 0xf8c <__stack+0x72d>
     f8a:	4d c0       	rjmp	.+154    	; 0x1026 <__stack+0x7c7>
     f8c:	d9 01       	movw	r26, r18
     f8e:	99 27       	eor	r25, r25
     f90:	88 27       	eor	r24, r24
     f92:	a9 96       	adiw	r28, 0x29	; 41
     f94:	2c ad       	ldd	r18, Y+60	; 0x3c
     f96:	3d ad       	ldd	r19, Y+61	; 0x3d
     f98:	4e ad       	ldd	r20, Y+62	; 0x3e
     f9a:	5f ad       	ldd	r21, Y+63	; 0x3f
     f9c:	a9 97       	sbiw	r28, 0x29	; 41
     f9e:	40 70       	andi	r20, 0x00	; 0
     fa0:	50 70       	andi	r21, 0x00	; 0
     fa2:	82 0f       	add	r24, r18
     fa4:	93 1f       	adc	r25, r19
     fa6:	a4 1f       	adc	r26, r20
     fa8:	b5 1f       	adc	r27, r21
     faa:	21 96       	adiw	r28, 0x01	; 1
     fac:	2c ad       	ldd	r18, Y+60	; 0x3c
     fae:	3d ad       	ldd	r19, Y+61	; 0x3d
     fb0:	4e ad       	ldd	r20, Y+62	; 0x3e
     fb2:	5f ad       	ldd	r21, Y+63	; 0x3f
     fb4:	21 97       	sbiw	r28, 0x01	; 1
     fb6:	e2 96       	adiw	r28, 0x32	; 50
     fb8:	0f ac       	ldd	r0, Y+63	; 0x3f
     fba:	e2 97       	sbiw	r28, 0x32	; 50
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <__stack+0x767>
     fbe:	22 0f       	add	r18, r18
     fc0:	33 1f       	adc	r19, r19
     fc2:	44 1f       	adc	r20, r20
     fc4:	55 1f       	adc	r21, r21
     fc6:	0a 94       	dec	r0
     fc8:	d2 f7       	brpl	.-12     	; 0xfbe <__stack+0x75f>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	4a 07       	cpc	r20, r26
     fd0:	5b 07       	cpc	r21, r27
     fd2:	48 f5       	brcc	.+82     	; 0x1026 <__stack+0x7c7>
     fd4:	25 96       	adiw	r28, 0x05	; 5
     fd6:	0c ad       	ldd	r16, Y+60	; 0x3c
     fd8:	1d ad       	ldd	r17, Y+61	; 0x3d
     fda:	2e ad       	ldd	r18, Y+62	; 0x3e
     fdc:	3f ad       	ldd	r19, Y+63	; 0x3f
     fde:	25 97       	sbiw	r28, 0x05	; 5
     fe0:	01 50       	subi	r16, 0x01	; 1
     fe2:	10 40       	sbci	r17, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	30 40       	sbci	r19, 0x00	; 0
     fe8:	25 96       	adiw	r28, 0x05	; 5
     fea:	0c af       	std	Y+60, r16	; 0x3c
     fec:	1d af       	std	Y+61, r17	; 0x3d
     fee:	2e af       	std	Y+62, r18	; 0x3e
     ff0:	3f af       	std	Y+63, r19	; 0x3f
     ff2:	25 97       	sbiw	r28, 0x05	; 5
     ff4:	18 c0       	rjmp	.+48     	; 0x1026 <__stack+0x7c7>
     ff6:	66 24       	eor	r6, r6
     ff8:	77 24       	eor	r7, r7
     ffa:	43 01       	movw	r8, r6
     ffc:	21 e0       	ldi	r18, 0x01	; 1
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	40 e0       	ldi	r20, 0x00	; 0
    1002:	50 e0       	ldi	r21, 0x00	; 0
    1004:	25 96       	adiw	r28, 0x05	; 5
    1006:	2c af       	std	Y+60, r18	; 0x3c
    1008:	3d af       	std	Y+61, r19	; 0x3d
    100a:	4e af       	std	Y+62, r20	; 0x3e
    100c:	5f af       	std	Y+63, r21	; 0x3f
    100e:	25 97       	sbiw	r28, 0x05	; 5
    1010:	0d c0       	rjmp	.+26     	; 0x102c <__stack+0x7cd>
    1012:	66 24       	eor	r6, r6
    1014:	77 24       	eor	r7, r7
    1016:	43 01       	movw	r8, r6
    1018:	25 96       	adiw	r28, 0x05	; 5
    101a:	1c ae       	std	Y+60, r1	; 0x3c
    101c:	1d ae       	std	Y+61, r1	; 0x3d
    101e:	1e ae       	std	Y+62, r1	; 0x3e
    1020:	1f ae       	std	Y+63, r1	; 0x3f
    1022:	25 97       	sbiw	r28, 0x05	; 5
    1024:	03 c0       	rjmp	.+6      	; 0x102c <__stack+0x7cd>
    1026:	66 24       	eor	r6, r6
    1028:	77 24       	eor	r7, r7
    102a:	43 01       	movw	r8, r6
    102c:	fe 01       	movw	r30, r28
    102e:	b1 96       	adiw	r30, 0x21	; 33
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	df 01       	movw	r26, r30
    1034:	1d 92       	st	X+, r1
    1036:	8a 95       	dec	r24
    1038:	e9 f7       	brne	.-6      	; 0x1034 <__stack+0x7d5>
    103a:	25 96       	adiw	r28, 0x05	; 5
    103c:	ac ac       	ldd	r10, Y+60	; 0x3c
    103e:	bd ac       	ldd	r11, Y+61	; 0x3d
    1040:	ce ac       	ldd	r12, Y+62	; 0x3e
    1042:	df ac       	ldd	r13, Y+63	; 0x3f
    1044:	25 97       	sbiw	r28, 0x05	; 5
    1046:	a9 a2       	std	Y+33, r10	; 0x21
    1048:	ba a2       	std	Y+34, r11	; 0x22
    104a:	cb a2       	std	Y+35, r12	; 0x23
    104c:	dc a2       	std	Y+36, r13	; 0x24
    104e:	6d a2       	std	Y+37, r6	; 0x25
    1050:	7e a2       	std	Y+38, r7	; 0x26
    1052:	8f a2       	std	Y+39, r8	; 0x27
    1054:	98 a6       	std	Y+40, r9	; 0x28
    1056:	22 96       	adiw	r28, 0x02	; 2
    1058:	2f ad       	ldd	r18, Y+63	; 0x3f
    105a:	22 97       	sbiw	r28, 0x02	; 2
    105c:	3a a1       	ldd	r19, Y+34	; 0x22
    105e:	4b a1       	ldd	r20, Y+35	; 0x23
    1060:	5c a1       	ldd	r21, Y+36	; 0x24
    1062:	66 2d       	mov	r22, r6
    1064:	7e a1       	ldd	r23, Y+38	; 0x26
    1066:	df a0       	ldd	r13, Y+39	; 0x27
    1068:	98 a5       	ldd	r25, Y+40	; 0x28
    106a:	e1 96       	adiw	r28, 0x31	; 49
    106c:	ec ac       	ldd	r14, Y+60	; 0x3c
    106e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1070:	0e ad       	ldd	r16, Y+62	; 0x3e
    1072:	1f ad       	ldd	r17, Y+63	; 0x3f
    1074:	e1 97       	sbiw	r28, 0x31	; 49
    1076:	e1 14       	cp	r14, r1
    1078:	f1 04       	cpc	r15, r1
    107a:	01 05       	cpc	r16, r1
    107c:	11 05       	cpc	r17, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <__stack+0x823>
    1080:	56 c0       	rjmp	.+172    	; 0x112e <__stack+0x8cf>
    1082:	21 95       	neg	r18
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	12 16       	cp	r1, r18
    1088:	08 f0       	brcs	.+2      	; 0x108c <__stack+0x82d>
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	31 95       	neg	r19
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	13 16       	cp	r1, r19
    1092:	08 f0       	brcs	.+2      	; 0x1096 <__stack+0x837>
    1094:	e0 e0       	ldi	r30, 0x00	; 0
    1096:	93 2e       	mov	r9, r19
    1098:	98 1a       	sub	r9, r24
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	39 15       	cp	r19, r9
    109e:	08 f0       	brcs	.+2      	; 0x10a2 <__stack+0x843>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	e8 2b       	or	r30, r24
    10a4:	41 95       	neg	r20
    10a6:	f1 e0       	ldi	r31, 0x01	; 1
    10a8:	14 16       	cp	r1, r20
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <__stack+0x84f>
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	a4 2e       	mov	r10, r20
    10b0:	ae 1a       	sub	r10, r30
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	4a 15       	cp	r20, r10
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <__stack+0x85b>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	f8 2b       	or	r31, r24
    10bc:	51 95       	neg	r21
    10be:	e1 e0       	ldi	r30, 0x01	; 1
    10c0:	15 16       	cp	r1, r21
    10c2:	08 f0       	brcs	.+2      	; 0x10c6 <__stack+0x867>
    10c4:	e0 e0       	ldi	r30, 0x00	; 0
    10c6:	b5 2e       	mov	r11, r21
    10c8:	bf 1a       	sub	r11, r31
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	5b 15       	cp	r21, r11
    10ce:	08 f0       	brcs	.+2      	; 0x10d2 <__stack+0x873>
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	e8 2b       	or	r30, r24
    10d4:	61 95       	neg	r22
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	16 16       	cp	r1, r22
    10da:	08 f0       	brcs	.+2      	; 0x10de <__stack+0x87f>
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	a6 2f       	mov	r26, r22
    10e0:	ae 1b       	sub	r26, r30
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	6a 17       	cp	r22, r26
    10e6:	08 f0       	brcs	.+2      	; 0x10ea <__stack+0x88b>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	f8 2b       	or	r31, r24
    10ec:	71 95       	neg	r23
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	17 16       	cp	r1, r23
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <__stack+0x897>
    10f4:	e0 e0       	ldi	r30, 0x00	; 0
    10f6:	c7 2e       	mov	r12, r23
    10f8:	cf 1a       	sub	r12, r31
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	7c 15       	cp	r23, r12
    10fe:	08 f0       	brcs	.+2      	; 0x1102 <__stack+0x8a3>
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	e8 2b       	or	r30, r24
    1104:	8d 2d       	mov	r24, r13
    1106:	81 95       	neg	r24
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	18 16       	cp	r1, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__stack+0x8b1>
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	d8 2e       	mov	r13, r24
    1112:	de 1a       	sub	r13, r30
    1114:	e1 e0       	ldi	r30, 0x01	; 1
    1116:	8d 15       	cp	r24, r13
    1118:	08 f0       	brcs	.+2      	; 0x111c <__stack+0x8bd>
    111a:	e0 e0       	ldi	r30, 0x00	; 0
    111c:	fe 2b       	or	r31, r30
    111e:	89 2f       	mov	r24, r25
    1120:	81 95       	neg	r24
    1122:	39 2d       	mov	r19, r9
    1124:	a5 01       	movw	r20, r10
    1126:	6a 2f       	mov	r22, r26
    1128:	7c 2d       	mov	r23, r12
    112a:	98 2f       	mov	r25, r24
    112c:	9f 1b       	sub	r25, r31
    112e:	8d 2d       	mov	r24, r13
    1130:	ce 58       	subi	r28, 0x8E	; 142
    1132:	df 4f       	sbci	r29, 0xFF	; 255
    1134:	e2 e1       	ldi	r30, 0x12	; 18
    1136:	0c 94 c2 3a 	jmp	0x7584	; 0x7584 <__epilogue_restores__>

0000113a <__moddi3>:
    113a:	a7 e7       	ldi	r26, 0x77	; 119
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e3 ea       	ldi	r30, 0xA3	; 163
    1140:	f8 e0       	ldi	r31, 0x08	; 8
    1142:	0c 94 a6 3a 	jmp	0x754c	; 0x754c <__prologue_saves__>
    1146:	98 2e       	mov	r9, r24
    1148:	89 2e       	mov	r8, r25
    114a:	71 2e       	mov	r7, r17
    114c:	88 e0       	ldi	r24, 0x08	; 8
    114e:	fe 01       	movw	r30, r28
    1150:	31 96       	adiw	r30, 0x01	; 1
    1152:	df 01       	movw	r26, r30
    1154:	68 2e       	mov	r6, r24
    1156:	1d 92       	st	X+, r1
    1158:	6a 94       	dec	r6
    115a:	e9 f7       	brne	.-6      	; 0x1156 <__moddi3+0x1c>
    115c:	29 83       	std	Y+1, r18	; 0x01
    115e:	3a 83       	std	Y+2, r19	; 0x02
    1160:	4b 83       	std	Y+3, r20	; 0x03
    1162:	5c 83       	std	Y+4, r21	; 0x04
    1164:	6d 83       	std	Y+5, r22	; 0x05
    1166:	7e 83       	std	Y+6, r23	; 0x06
    1168:	9f 82       	std	Y+7, r9	; 0x07
    116a:	98 87       	std	Y+8, r25	; 0x08
    116c:	fe 01       	movw	r30, r28
    116e:	39 96       	adiw	r30, 0x09	; 9
    1170:	df 01       	movw	r26, r30
    1172:	1d 92       	st	X+, r1
    1174:	8a 95       	dec	r24
    1176:	e9 f7       	brne	.-6      	; 0x1172 <__moddi3+0x38>
    1178:	a9 86       	std	Y+9, r10	; 0x09
    117a:	ba 86       	std	Y+10, r11	; 0x0a
    117c:	cb 86       	std	Y+11, r12	; 0x0b
    117e:	dc 86       	std	Y+12, r13	; 0x0c
    1180:	ed 86       	std	Y+13, r14	; 0x0d
    1182:	fe 86       	std	Y+14, r15	; 0x0e
    1184:	0f 87       	std	Y+15, r16	; 0x0f
    1186:	18 8b       	std	Y+16, r17	; 0x10
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	af 81       	ldd	r26, Y+7	; 0x07
    118e:	b8 85       	ldd	r27, Y+8	; 0x08
    1190:	b7 fd       	sbrc	r27, 7
    1192:	07 c0       	rjmp	.+14     	; 0x11a2 <__moddi3+0x68>
    1194:	e1 96       	adiw	r28, 0x31	; 49
    1196:	1c ae       	std	Y+60, r1	; 0x3c
    1198:	1d ae       	std	Y+61, r1	; 0x3d
    119a:	1e ae       	std	Y+62, r1	; 0x3e
    119c:	1f ae       	std	Y+63, r1	; 0x3f
    119e:	e1 97       	sbiw	r28, 0x31	; 49
    11a0:	64 c0       	rjmp	.+200    	; 0x126a <__moddi3+0x130>
    11a2:	21 95       	neg	r18
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	12 16       	cp	r1, r18
    11a8:	08 f0       	brcs	.+2      	; 0x11ac <__moddi3+0x72>
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	31 95       	neg	r19
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	13 16       	cp	r1, r19
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <__moddi3+0x7c>
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	b3 2f       	mov	r27, r19
    11b8:	b8 1b       	sub	r27, r24
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	3b 17       	cp	r19, r27
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <__moddi3+0x88>
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	98 2b       	or	r25, r24
    11c4:	41 95       	neg	r20
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	14 16       	cp	r1, r20
    11ca:	08 f0       	brcs	.+2      	; 0x11ce <__moddi3+0x94>
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	a4 2f       	mov	r26, r20
    11d0:	a9 1b       	sub	r26, r25
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	4a 17       	cp	r20, r26
    11d6:	08 f0       	brcs	.+2      	; 0x11da <__moddi3+0xa0>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	38 2b       	or	r19, r24
    11dc:	51 95       	neg	r21
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	15 16       	cp	r1, r21
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <__moddi3+0xac>
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	f5 2f       	mov	r31, r21
    11e8:	f3 1b       	sub	r31, r19
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	5f 17       	cp	r21, r31
    11ee:	08 f0       	brcs	.+2      	; 0x11f2 <__moddi3+0xb8>
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	98 2b       	or	r25, r24
    11f4:	61 95       	neg	r22
    11f6:	31 e0       	ldi	r19, 0x01	; 1
    11f8:	16 16       	cp	r1, r22
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__moddi3+0xc4>
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	e6 2f       	mov	r30, r22
    1200:	e9 1b       	sub	r30, r25
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	6e 17       	cp	r22, r30
    1206:	08 f0       	brcs	.+2      	; 0x120a <__moddi3+0xd0>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	38 2b       	or	r19, r24
    120c:	71 95       	neg	r23
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	17 16       	cp	r1, r23
    1212:	08 f0       	brcs	.+2      	; 0x1216 <__moddi3+0xdc>
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	57 2f       	mov	r21, r23
    1218:	53 1b       	sub	r21, r19
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	75 17       	cp	r23, r21
    121e:	08 f0       	brcs	.+2      	; 0x1222 <__moddi3+0xe8>
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	48 2b       	or	r20, r24
    1224:	89 2d       	mov	r24, r9
    1226:	81 95       	neg	r24
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	18 16       	cp	r1, r24
    122c:	08 f0       	brcs	.+2      	; 0x1230 <__moddi3+0xf6>
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	68 2e       	mov	r6, r24
    1232:	64 1a       	sub	r6, r20
    1234:	46 2d       	mov	r20, r6
    1236:	31 e0       	ldi	r19, 0x01	; 1
    1238:	86 15       	cp	r24, r6
    123a:	08 f0       	brcs	.+2      	; 0x123e <__moddi3+0x104>
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	93 2b       	or	r25, r19
    1240:	88 2d       	mov	r24, r8
    1242:	81 95       	neg	r24
    1244:	89 1b       	sub	r24, r25
    1246:	29 83       	std	Y+1, r18	; 0x01
    1248:	ba 83       	std	Y+2, r27	; 0x02
    124a:	ab 83       	std	Y+3, r26	; 0x03
    124c:	fc 83       	std	Y+4, r31	; 0x04
    124e:	ed 83       	std	Y+5, r30	; 0x05
    1250:	5e 83       	std	Y+6, r21	; 0x06
    1252:	4f 83       	std	Y+7, r20	; 0x07
    1254:	88 87       	std	Y+8, r24	; 0x08
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	3f ef       	ldi	r19, 0xFF	; 255
    125a:	4f ef       	ldi	r20, 0xFF	; 255
    125c:	5f ef       	ldi	r21, 0xFF	; 255
    125e:	e1 96       	adiw	r28, 0x31	; 49
    1260:	2c af       	std	Y+60, r18	; 0x3c
    1262:	3d af       	std	Y+61, r19	; 0x3d
    1264:	4e af       	std	Y+62, r20	; 0x3e
    1266:	5f af       	std	Y+63, r21	; 0x3f
    1268:	e1 97       	sbiw	r28, 0x31	; 49
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	af 85       	ldd	r26, Y+15	; 0x0f
    1270:	b8 89       	ldd	r27, Y+16	; 0x10
    1272:	b7 ff       	sbrs	r27, 7
    1274:	5a c0       	rjmp	.+180    	; 0x132a <__moddi3+0x1f0>
    1276:	a1 94       	neg	r10
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	1a 14       	cp	r1, r10
    127c:	08 f0       	brcs	.+2      	; 0x1280 <__moddi3+0x146>
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	b1 94       	neg	r11
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	1b 14       	cp	r1, r11
    1286:	08 f0       	brcs	.+2      	; 0x128a <__moddi3+0x150>
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	6b 2d       	mov	r22, r11
    128c:	68 1b       	sub	r22, r24
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	b6 16       	cp	r11, r22
    1292:	08 f0       	brcs	.+2      	; 0x1296 <__moddi3+0x15c>
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	98 2b       	or	r25, r24
    1298:	c1 94       	neg	r12
    129a:	21 e0       	ldi	r18, 0x01	; 1
    129c:	1c 14       	cp	r1, r12
    129e:	08 f0       	brcs	.+2      	; 0x12a2 <__moddi3+0x168>
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	5c 2d       	mov	r21, r12
    12a4:	59 1b       	sub	r21, r25
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	c5 16       	cp	r12, r21
    12aa:	08 f0       	brcs	.+2      	; 0x12ae <__moddi3+0x174>
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	28 2b       	or	r18, r24
    12b0:	d1 94       	neg	r13
    12b2:	91 e0       	ldi	r25, 0x01	; 1
    12b4:	1d 14       	cp	r1, r13
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__moddi3+0x180>
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	4d 2d       	mov	r20, r13
    12bc:	42 1b       	sub	r20, r18
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	d4 16       	cp	r13, r20
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <__moddi3+0x18c>
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	98 2b       	or	r25, r24
    12c8:	e1 94       	neg	r14
    12ca:	21 e0       	ldi	r18, 0x01	; 1
    12cc:	1e 14       	cp	r1, r14
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <__moddi3+0x198>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	3e 2d       	mov	r19, r14
    12d4:	39 1b       	sub	r19, r25
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	e3 16       	cp	r14, r19
    12da:	08 f0       	brcs	.+2      	; 0x12de <__moddi3+0x1a4>
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	28 2b       	or	r18, r24
    12e0:	f1 94       	neg	r15
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	1f 14       	cp	r1, r15
    12e6:	08 f0       	brcs	.+2      	; 0x12ea <__moddi3+0x1b0>
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	7f 2d       	mov	r23, r15
    12ec:	72 1b       	sub	r23, r18
    12ee:	27 2f       	mov	r18, r23
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	f7 16       	cp	r15, r23
    12f4:	08 f0       	brcs	.+2      	; 0x12f8 <__moddi3+0x1be>
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	98 2b       	or	r25, r24
    12fa:	01 95       	neg	r16
    12fc:	11 e0       	ldi	r17, 0x01	; 1
    12fe:	10 16       	cp	r1, r16
    1300:	08 f0       	brcs	.+2      	; 0x1304 <__moddi3+0x1ca>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	80 2f       	mov	r24, r16
    1306:	89 1b       	sub	r24, r25
    1308:	98 2f       	mov	r25, r24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	09 17       	cp	r16, r25
    130e:	08 f0       	brcs	.+2      	; 0x1312 <__moddi3+0x1d8>
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	18 2b       	or	r17, r24
    1314:	87 2d       	mov	r24, r7
    1316:	81 95       	neg	r24
    1318:	81 1b       	sub	r24, r17
    131a:	a9 86       	std	Y+9, r10	; 0x09
    131c:	6a 87       	std	Y+10, r22	; 0x0a
    131e:	5b 87       	std	Y+11, r21	; 0x0b
    1320:	4c 87       	std	Y+12, r20	; 0x0c
    1322:	3d 87       	std	Y+13, r19	; 0x0d
    1324:	2e 87       	std	Y+14, r18	; 0x0e
    1326:	9f 87       	std	Y+15, r25	; 0x0f
    1328:	88 8b       	std	Y+16, r24	; 0x10
    132a:	99 81       	ldd	r25, Y+1	; 0x01
    132c:	2a 81       	ldd	r18, Y+2	; 0x02
    132e:	3b 81       	ldd	r19, Y+3	; 0x03
    1330:	4c 81       	ldd	r20, Y+4	; 0x04
    1332:	5d 81       	ldd	r21, Y+5	; 0x05
    1334:	6e 81       	ldd	r22, Y+6	; 0x06
    1336:	7f 81       	ldd	r23, Y+7	; 0x07
    1338:	a8 85       	ldd	r26, Y+8	; 0x08
    133a:	b9 85       	ldd	r27, Y+9	; 0x09
    133c:	1a 85       	ldd	r17, Y+10	; 0x0a
    133e:	0b 85       	ldd	r16, Y+11	; 0x0b
    1340:	fc 84       	ldd	r15, Y+12	; 0x0c
    1342:	ed 84       	ldd	r14, Y+13	; 0x0d
    1344:	de 84       	ldd	r13, Y+14	; 0x0e
    1346:	cf 84       	ldd	r12, Y+15	; 0x0f
    1348:	b8 88       	ldd	r11, Y+16	; 0x10
    134a:	88 e0       	ldi	r24, 0x08	; 8
    134c:	e9 e1       	ldi	r30, 0x19	; 25
    134e:	8e 2e       	mov	r8, r30
    1350:	91 2c       	mov	r9, r1
    1352:	8c 0e       	add	r8, r28
    1354:	9d 1e       	adc	r9, r29
    1356:	f4 01       	movw	r30, r8
    1358:	68 2e       	mov	r6, r24
    135a:	11 92       	st	Z+, r1
    135c:	6a 94       	dec	r6
    135e:	e9 f7       	brne	.-6      	; 0x135a <__moddi3+0x220>
    1360:	99 8f       	std	Y+25, r25	; 0x19
    1362:	2a 8f       	std	Y+26, r18	; 0x1a
    1364:	3b 8f       	std	Y+27, r19	; 0x1b
    1366:	4c 8f       	std	Y+28, r20	; 0x1c
    1368:	5d 8f       	std	Y+29, r21	; 0x1d
    136a:	6e 8f       	std	Y+30, r22	; 0x1e
    136c:	7f 8f       	std	Y+31, r23	; 0x1f
    136e:	a8 a3       	std	Y+32, r26	; 0x20
    1370:	9e 01       	movw	r18, r28
    1372:	2f 5d       	subi	r18, 0xDF	; 223
    1374:	3f 4f       	sbci	r19, 0xFF	; 255
    1376:	f9 01       	movw	r30, r18
    1378:	11 92       	st	Z+, r1
    137a:	8a 95       	dec	r24
    137c:	e9 f7       	brne	.-6      	; 0x1378 <__moddi3+0x23e>
    137e:	b9 a3       	std	Y+33, r27	; 0x21
    1380:	1a a3       	std	Y+34, r17	; 0x22
    1382:	0b a3       	std	Y+35, r16	; 0x23
    1384:	fc a2       	std	Y+36, r15	; 0x24
    1386:	ed a2       	std	Y+37, r14	; 0x25
    1388:	de a2       	std	Y+38, r13	; 0x26
    138a:	cf a2       	std	Y+39, r12	; 0x27
    138c:	b8 a6       	std	Y+40, r11	; 0x28
    138e:	29 a0       	ldd	r2, Y+33	; 0x21
    1390:	3a a0       	ldd	r3, Y+34	; 0x22
    1392:	4b a0       	ldd	r4, Y+35	; 0x23
    1394:	5c a0       	ldd	r5, Y+36	; 0x24
    1396:	ad a0       	ldd	r10, Y+37	; 0x25
    1398:	be a0       	ldd	r11, Y+38	; 0x26
    139a:	cf a0       	ldd	r12, Y+39	; 0x27
    139c:	d8 a4       	ldd	r13, Y+40	; 0x28
    139e:	49 8d       	ldd	r20, Y+25	; 0x19
    13a0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    13a2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13a4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    13a6:	e5 96       	adiw	r28, 0x35	; 53
    13a8:	4f af       	std	Y+63, r20	; 0x3f
    13aa:	e5 97       	sbiw	r28, 0x35	; 53
    13ac:	e6 96       	adiw	r28, 0x36	; 54
    13ae:	5f af       	std	Y+63, r21	; 0x3f
    13b0:	e6 97       	sbiw	r28, 0x36	; 54
    13b2:	e7 96       	adiw	r28, 0x37	; 55
    13b4:	6f af       	std	Y+63, r22	; 0x3f
    13b6:	e7 97       	sbiw	r28, 0x37	; 55
    13b8:	e8 96       	adiw	r28, 0x38	; 56
    13ba:	7f af       	std	Y+63, r23	; 0x3f
    13bc:	e8 97       	sbiw	r28, 0x38	; 56
    13be:	e8 96       	adiw	r28, 0x38	; 56
    13c0:	6c ac       	ldd	r6, Y+60	; 0x3c
    13c2:	7d ac       	ldd	r7, Y+61	; 0x3d
    13c4:	8e ac       	ldd	r8, Y+62	; 0x3e
    13c6:	9f ac       	ldd	r9, Y+63	; 0x3f
    13c8:	e8 97       	sbiw	r28, 0x38	; 56
    13ca:	2d 96       	adiw	r28, 0x0d	; 13
    13cc:	6c ae       	std	Y+60, r6	; 0x3c
    13ce:	7d ae       	std	Y+61, r7	; 0x3d
    13d0:	8e ae       	std	Y+62, r8	; 0x3e
    13d2:	9f ae       	std	Y+63, r9	; 0x3f
    13d4:	2d 97       	sbiw	r28, 0x0d	; 13
    13d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13da:	2f 8d       	ldd	r18, Y+31	; 0x1f
    13dc:	38 a1       	ldd	r19, Y+32	; 0x20
    13de:	3c 01       	movw	r6, r24
    13e0:	49 01       	movw	r8, r18
    13e2:	61 96       	adiw	r28, 0x11	; 17
    13e4:	6c ae       	std	Y+60, r6	; 0x3c
    13e6:	7d ae       	std	Y+61, r7	; 0x3d
    13e8:	8e ae       	std	Y+62, r8	; 0x3e
    13ea:	9f ae       	std	Y+63, r9	; 0x3f
    13ec:	61 97       	sbiw	r28, 0x11	; 17
    13ee:	a1 14       	cp	r10, r1
    13f0:	b1 04       	cpc	r11, r1
    13f2:	c1 04       	cpc	r12, r1
    13f4:	d1 04       	cpc	r13, r1
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__moddi3+0x2c0>
    13f8:	28 c3       	rjmp	.+1616   	; 0x1a4a <__moddi3+0x910>
    13fa:	62 14       	cp	r6, r2
    13fc:	73 04       	cpc	r7, r3
    13fe:	84 04       	cpc	r8, r4
    1400:	95 04       	cpc	r9, r5
    1402:	08 f0       	brcs	.+2      	; 0x1406 <__moddi3+0x2cc>
    1404:	0e c1       	rjmp	.+540    	; 0x1622 <__moddi3+0x4e8>
    1406:	00 e0       	ldi	r16, 0x00	; 0
    1408:	20 16       	cp	r2, r16
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	30 06       	cpc	r3, r16
    140e:	01 e0       	ldi	r16, 0x01	; 1
    1410:	40 06       	cpc	r4, r16
    1412:	00 e0       	ldi	r16, 0x00	; 0
    1414:	50 06       	cpc	r5, r16
    1416:	88 f4       	brcc	.+34     	; 0x143a <__moddi3+0x300>
    1418:	1f ef       	ldi	r17, 0xFF	; 255
    141a:	21 16       	cp	r2, r17
    141c:	31 04       	cpc	r3, r1
    141e:	41 04       	cpc	r4, r1
    1420:	51 04       	cpc	r5, r1
    1422:	39 f0       	breq	.+14     	; 0x1432 <__moddi3+0x2f8>
    1424:	30 f0       	brcs	.+12     	; 0x1432 <__moddi3+0x2f8>
    1426:	88 e0       	ldi	r24, 0x08	; 8
    1428:	e8 2e       	mov	r14, r24
    142a:	f1 2c       	mov	r15, r1
    142c:	01 2d       	mov	r16, r1
    142e:	11 2d       	mov	r17, r1
    1430:	18 c0       	rjmp	.+48     	; 0x1462 <__moddi3+0x328>
    1432:	ee 24       	eor	r14, r14
    1434:	ff 24       	eor	r15, r15
    1436:	87 01       	movw	r16, r14
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <__moddi3+0x328>
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	22 16       	cp	r2, r18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	32 06       	cpc	r3, r18
    1442:	20 e0       	ldi	r18, 0x00	; 0
    1444:	42 06       	cpc	r4, r18
    1446:	21 e0       	ldi	r18, 0x01	; 1
    1448:	52 06       	cpc	r5, r18
    144a:	30 f0       	brcs	.+12     	; 0x1458 <__moddi3+0x31e>
    144c:	b8 e1       	ldi	r27, 0x18	; 24
    144e:	eb 2e       	mov	r14, r27
    1450:	f1 2c       	mov	r15, r1
    1452:	01 2d       	mov	r16, r1
    1454:	11 2d       	mov	r17, r1
    1456:	05 c0       	rjmp	.+10     	; 0x1462 <__moddi3+0x328>
    1458:	a0 e1       	ldi	r26, 0x10	; 16
    145a:	ea 2e       	mov	r14, r26
    145c:	f1 2c       	mov	r15, r1
    145e:	01 2d       	mov	r16, r1
    1460:	11 2d       	mov	r17, r1
    1462:	d2 01       	movw	r26, r4
    1464:	c1 01       	movw	r24, r2
    1466:	0e 2c       	mov	r0, r14
    1468:	04 c0       	rjmp	.+8      	; 0x1472 <__moddi3+0x338>
    146a:	b6 95       	lsr	r27
    146c:	a7 95       	ror	r26
    146e:	97 95       	ror	r25
    1470:	87 95       	ror	r24
    1472:	0a 94       	dec	r0
    1474:	d2 f7       	brpl	.-12     	; 0x146a <__moddi3+0x330>
    1476:	87 5f       	subi	r24, 0xF7	; 247
    1478:	9e 4f       	sbci	r25, 0xFE	; 254
    147a:	dc 01       	movw	r26, r24
    147c:	2c 91       	ld	r18, X
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e0       	ldi	r26, 0x00	; 0
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	8e 19       	sub	r24, r14
    1488:	9f 09       	sbc	r25, r15
    148a:	a0 0b       	sbc	r26, r16
    148c:	b1 0b       	sbc	r27, r17
    148e:	5c 01       	movw	r10, r24
    1490:	6d 01       	movw	r12, r26
    1492:	a2 1a       	sub	r10, r18
    1494:	b1 08       	sbc	r11, r1
    1496:	c1 08       	sbc	r12, r1
    1498:	d1 08       	sbc	r13, r1
    149a:	65 96       	adiw	r28, 0x15	; 21
    149c:	ac ae       	std	Y+60, r10	; 0x3c
    149e:	bd ae       	std	Y+61, r11	; 0x3d
    14a0:	ce ae       	std	Y+62, r12	; 0x3e
    14a2:	df ae       	std	Y+63, r13	; 0x3f
    14a4:	65 97       	sbiw	r28, 0x15	; 21
    14a6:	a1 14       	cp	r10, r1
    14a8:	b1 04       	cpc	r11, r1
    14aa:	c1 04       	cpc	r12, r1
    14ac:	d1 04       	cpc	r13, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <__moddi3+0x378>
    14b0:	45 c0       	rjmp	.+138    	; 0x153c <__moddi3+0x402>
    14b2:	62 96       	adiw	r28, 0x12	; 18
    14b4:	6f ad       	ldd	r22, Y+63	; 0x3f
    14b6:	62 97       	sbiw	r28, 0x12	; 18
    14b8:	06 2e       	mov	r0, r22
    14ba:	04 c0       	rjmp	.+8      	; 0x14c4 <__moddi3+0x38a>
    14bc:	22 0c       	add	r2, r2
    14be:	33 1c       	adc	r3, r3
    14c0:	44 1c       	adc	r4, r4
    14c2:	55 1c       	adc	r5, r5
    14c4:	0a 94       	dec	r0
    14c6:	d2 f7       	brpl	.-12     	; 0x14bc <__moddi3+0x382>
    14c8:	a4 01       	movw	r20, r8
    14ca:	93 01       	movw	r18, r6
    14cc:	06 2e       	mov	r0, r22
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <__moddi3+0x39e>
    14d0:	22 0f       	add	r18, r18
    14d2:	33 1f       	adc	r19, r19
    14d4:	44 1f       	adc	r20, r20
    14d6:	55 1f       	adc	r21, r21
    14d8:	0a 94       	dec	r0
    14da:	d2 f7       	brpl	.-12     	; 0x14d0 <__moddi3+0x396>
    14dc:	80 e2       	ldi	r24, 0x20	; 32
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	8a 19       	sub	r24, r10
    14e2:	9b 09       	sbc	r25, r11
    14e4:	e8 96       	adiw	r28, 0x38	; 56
    14e6:	cc ac       	ldd	r12, Y+60	; 0x3c
    14e8:	dd ac       	ldd	r13, Y+61	; 0x3d
    14ea:	ee ac       	ldd	r14, Y+62	; 0x3e
    14ec:	ff ac       	ldd	r15, Y+63	; 0x3f
    14ee:	e8 97       	sbiw	r28, 0x38	; 56
    14f0:	04 c0       	rjmp	.+8      	; 0x14fa <__moddi3+0x3c0>
    14f2:	f6 94       	lsr	r15
    14f4:	e7 94       	ror	r14
    14f6:	d7 94       	ror	r13
    14f8:	c7 94       	ror	r12
    14fa:	8a 95       	dec	r24
    14fc:	d2 f7       	brpl	.-12     	; 0x14f2 <__moddi3+0x3b8>
    14fe:	87 01       	movw	r16, r14
    1500:	76 01       	movw	r14, r12
    1502:	e2 2a       	or	r14, r18
    1504:	f3 2a       	or	r15, r19
    1506:	04 2b       	or	r16, r20
    1508:	15 2b       	or	r17, r21
    150a:	61 96       	adiw	r28, 0x11	; 17
    150c:	ec ae       	std	Y+60, r14	; 0x3c
    150e:	fd ae       	std	Y+61, r15	; 0x3d
    1510:	0e af       	std	Y+62, r16	; 0x3e
    1512:	1f af       	std	Y+63, r17	; 0x3f
    1514:	61 97       	sbiw	r28, 0x11	; 17
    1516:	e8 96       	adiw	r28, 0x38	; 56
    1518:	0c ad       	ldd	r16, Y+60	; 0x3c
    151a:	1d ad       	ldd	r17, Y+61	; 0x3d
    151c:	2e ad       	ldd	r18, Y+62	; 0x3e
    151e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1520:	e8 97       	sbiw	r28, 0x38	; 56
    1522:	04 c0       	rjmp	.+8      	; 0x152c <__moddi3+0x3f2>
    1524:	00 0f       	add	r16, r16
    1526:	11 1f       	adc	r17, r17
    1528:	22 1f       	adc	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	6a 95       	dec	r22
    152e:	d2 f7       	brpl	.-12     	; 0x1524 <__moddi3+0x3ea>
    1530:	2d 96       	adiw	r28, 0x0d	; 13
    1532:	0c af       	std	Y+60, r16	; 0x3c
    1534:	1d af       	std	Y+61, r17	; 0x3d
    1536:	2e af       	std	Y+62, r18	; 0x3e
    1538:	3f af       	std	Y+63, r19	; 0x3f
    153a:	2d 97       	sbiw	r28, 0x0d	; 13
    153c:	32 01       	movw	r6, r4
    153e:	88 24       	eor	r8, r8
    1540:	99 24       	eor	r9, r9
    1542:	a2 01       	movw	r20, r4
    1544:	91 01       	movw	r18, r2
    1546:	40 70       	andi	r20, 0x00	; 0
    1548:	50 70       	andi	r21, 0x00	; 0
    154a:	69 96       	adiw	r28, 0x19	; 25
    154c:	2c af       	std	Y+60, r18	; 0x3c
    154e:	3d af       	std	Y+61, r19	; 0x3d
    1550:	4e af       	std	Y+62, r20	; 0x3e
    1552:	5f af       	std	Y+63, r21	; 0x3f
    1554:	69 97       	sbiw	r28, 0x19	; 25
    1556:	61 96       	adiw	r28, 0x11	; 17
    1558:	6c ad       	ldd	r22, Y+60	; 0x3c
    155a:	7d ad       	ldd	r23, Y+61	; 0x3d
    155c:	8e ad       	ldd	r24, Y+62	; 0x3e
    155e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1560:	61 97       	sbiw	r28, 0x11	; 17
    1562:	a4 01       	movw	r20, r8
    1564:	93 01       	movw	r18, r6
    1566:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    156a:	7b 01       	movw	r14, r22
    156c:	8c 01       	movw	r16, r24
    156e:	61 96       	adiw	r28, 0x11	; 17
    1570:	6c ad       	ldd	r22, Y+60	; 0x3c
    1572:	7d ad       	ldd	r23, Y+61	; 0x3d
    1574:	8e ad       	ldd	r24, Y+62	; 0x3e
    1576:	9f ad       	ldd	r25, Y+63	; 0x3f
    1578:	61 97       	sbiw	r28, 0x11	; 17
    157a:	a4 01       	movw	r20, r8
    157c:	93 01       	movw	r18, r6
    157e:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1582:	ca 01       	movw	r24, r20
    1584:	b9 01       	movw	r22, r18
    1586:	69 96       	adiw	r28, 0x19	; 25
    1588:	2c ad       	ldd	r18, Y+60	; 0x3c
    158a:	3d ad       	ldd	r19, Y+61	; 0x3d
    158c:	4e ad       	ldd	r20, Y+62	; 0x3e
    158e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1590:	69 97       	sbiw	r28, 0x19	; 25
    1592:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	87 01       	movw	r16, r14
    159c:	ff 24       	eor	r15, r15
    159e:	ee 24       	eor	r14, r14
    15a0:	2d 96       	adiw	r28, 0x0d	; 13
    15a2:	ac ac       	ldd	r10, Y+60	; 0x3c
    15a4:	bd ac       	ldd	r11, Y+61	; 0x3d
    15a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    15a8:	df ac       	ldd	r13, Y+63	; 0x3f
    15aa:	2d 97       	sbiw	r28, 0x0d	; 13
    15ac:	c6 01       	movw	r24, r12
    15ae:	aa 27       	eor	r26, r26
    15b0:	bb 27       	eor	r27, r27
    15b2:	57 01       	movw	r10, r14
    15b4:	68 01       	movw	r12, r16
    15b6:	a8 2a       	or	r10, r24
    15b8:	b9 2a       	or	r11, r25
    15ba:	ca 2a       	or	r12, r26
    15bc:	db 2a       	or	r13, r27
    15be:	a2 16       	cp	r10, r18
    15c0:	b3 06       	cpc	r11, r19
    15c2:	c4 06       	cpc	r12, r20
    15c4:	d5 06       	cpc	r13, r21
    15c6:	90 f4       	brcc	.+36     	; 0x15ec <__moddi3+0x4b2>
    15c8:	a2 0c       	add	r10, r2
    15ca:	b3 1c       	adc	r11, r3
    15cc:	c4 1c       	adc	r12, r4
    15ce:	d5 1c       	adc	r13, r5
    15d0:	a2 14       	cp	r10, r2
    15d2:	b3 04       	cpc	r11, r3
    15d4:	c4 04       	cpc	r12, r4
    15d6:	d5 04       	cpc	r13, r5
    15d8:	48 f0       	brcs	.+18     	; 0x15ec <__moddi3+0x4b2>
    15da:	a2 16       	cp	r10, r18
    15dc:	b3 06       	cpc	r11, r19
    15de:	c4 06       	cpc	r12, r20
    15e0:	d5 06       	cpc	r13, r21
    15e2:	20 f4       	brcc	.+8      	; 0x15ec <__moddi3+0x4b2>
    15e4:	a2 0c       	add	r10, r2
    15e6:	b3 1c       	adc	r11, r3
    15e8:	c4 1c       	adc	r12, r4
    15ea:	d5 1c       	adc	r13, r5
    15ec:	a2 1a       	sub	r10, r18
    15ee:	b3 0a       	sbc	r11, r19
    15f0:	c4 0a       	sbc	r12, r20
    15f2:	d5 0a       	sbc	r13, r21
    15f4:	c6 01       	movw	r24, r12
    15f6:	b5 01       	movw	r22, r10
    15f8:	a4 01       	movw	r20, r8
    15fa:	93 01       	movw	r18, r6
    15fc:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1600:	7b 01       	movw	r14, r22
    1602:	8c 01       	movw	r16, r24
    1604:	c6 01       	movw	r24, r12
    1606:	b5 01       	movw	r22, r10
    1608:	a4 01       	movw	r20, r8
    160a:	93 01       	movw	r18, r6
    160c:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1610:	ca 01       	movw	r24, r20
    1612:	b9 01       	movw	r22, r18
    1614:	69 96       	adiw	r28, 0x19	; 25
    1616:	2c ad       	ldd	r18, Y+60	; 0x3c
    1618:	3d ad       	ldd	r19, Y+61	; 0x3d
    161a:	4e ad       	ldd	r20, Y+62	; 0x3e
    161c:	5f ad       	ldd	r21, Y+63	; 0x3f
    161e:	69 97       	sbiw	r28, 0x19	; 25
    1620:	c8 c1       	rjmp	.+912    	; 0x19b2 <__moddi3+0x878>
    1622:	21 14       	cp	r2, r1
    1624:	31 04       	cpc	r3, r1
    1626:	41 04       	cpc	r4, r1
    1628:	51 04       	cpc	r5, r1
    162a:	71 f4       	brne	.+28     	; 0x1648 <__moddi3+0x50e>
    162c:	61 e0       	ldi	r22, 0x01	; 1
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1640:	c9 01       	movw	r24, r18
    1642:	da 01       	movw	r26, r20
    1644:	1c 01       	movw	r2, r24
    1646:	2d 01       	movw	r4, r26
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	20 16       	cp	r2, r16
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	30 06       	cpc	r3, r16
    1650:	01 e0       	ldi	r16, 0x01	; 1
    1652:	40 06       	cpc	r4, r16
    1654:	00 e0       	ldi	r16, 0x00	; 0
    1656:	50 06       	cpc	r5, r16
    1658:	88 f4       	brcc	.+34     	; 0x167c <__moddi3+0x542>
    165a:	1f ef       	ldi	r17, 0xFF	; 255
    165c:	21 16       	cp	r2, r17
    165e:	31 04       	cpc	r3, r1
    1660:	41 04       	cpc	r4, r1
    1662:	51 04       	cpc	r5, r1
    1664:	39 f0       	breq	.+14     	; 0x1674 <__moddi3+0x53a>
    1666:	30 f0       	brcs	.+12     	; 0x1674 <__moddi3+0x53a>
    1668:	68 e0       	ldi	r22, 0x08	; 8
    166a:	e6 2e       	mov	r14, r22
    166c:	f1 2c       	mov	r15, r1
    166e:	01 2d       	mov	r16, r1
    1670:	11 2d       	mov	r17, r1
    1672:	18 c0       	rjmp	.+48     	; 0x16a4 <__moddi3+0x56a>
    1674:	ee 24       	eor	r14, r14
    1676:	ff 24       	eor	r15, r15
    1678:	87 01       	movw	r16, r14
    167a:	14 c0       	rjmp	.+40     	; 0x16a4 <__moddi3+0x56a>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	22 16       	cp	r2, r18
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	32 06       	cpc	r3, r18
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	42 06       	cpc	r4, r18
    1688:	21 e0       	ldi	r18, 0x01	; 1
    168a:	52 06       	cpc	r5, r18
    168c:	30 f0       	brcs	.+12     	; 0x169a <__moddi3+0x560>
    168e:	58 e1       	ldi	r21, 0x18	; 24
    1690:	e5 2e       	mov	r14, r21
    1692:	f1 2c       	mov	r15, r1
    1694:	01 2d       	mov	r16, r1
    1696:	11 2d       	mov	r17, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <__moddi3+0x56a>
    169a:	40 e1       	ldi	r20, 0x10	; 16
    169c:	e4 2e       	mov	r14, r20
    169e:	f1 2c       	mov	r15, r1
    16a0:	01 2d       	mov	r16, r1
    16a2:	11 2d       	mov	r17, r1
    16a4:	d2 01       	movw	r26, r4
    16a6:	c1 01       	movw	r24, r2
    16a8:	0e 2c       	mov	r0, r14
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <__moddi3+0x57a>
    16ac:	b6 95       	lsr	r27
    16ae:	a7 95       	ror	r26
    16b0:	97 95       	ror	r25
    16b2:	87 95       	ror	r24
    16b4:	0a 94       	dec	r0
    16b6:	d2 f7       	brpl	.-12     	; 0x16ac <__moddi3+0x572>
    16b8:	87 5f       	subi	r24, 0xF7	; 247
    16ba:	9e 4f       	sbci	r25, 0xFE	; 254
    16bc:	dc 01       	movw	r26, r24
    16be:	2c 91       	ld	r18, X
    16c0:	30 e2       	ldi	r19, 0x20	; 32
    16c2:	a3 2e       	mov	r10, r19
    16c4:	b1 2c       	mov	r11, r1
    16c6:	c1 2c       	mov	r12, r1
    16c8:	d1 2c       	mov	r13, r1
    16ca:	d6 01       	movw	r26, r12
    16cc:	c5 01       	movw	r24, r10
    16ce:	8e 19       	sub	r24, r14
    16d0:	9f 09       	sbc	r25, r15
    16d2:	a0 0b       	sbc	r26, r16
    16d4:	b1 0b       	sbc	r27, r17
    16d6:	7c 01       	movw	r14, r24
    16d8:	8d 01       	movw	r16, r26
    16da:	e2 1a       	sub	r14, r18
    16dc:	f1 08       	sbc	r15, r1
    16de:	01 09       	sbc	r16, r1
    16e0:	11 09       	sbc	r17, r1
    16e2:	65 96       	adiw	r28, 0x15	; 21
    16e4:	ec ae       	std	Y+60, r14	; 0x3c
    16e6:	fd ae       	std	Y+61, r15	; 0x3d
    16e8:	0e af       	std	Y+62, r16	; 0x3e
    16ea:	1f af       	std	Y+63, r17	; 0x3f
    16ec:	65 97       	sbiw	r28, 0x15	; 21
    16ee:	e1 14       	cp	r14, r1
    16f0:	f1 04       	cpc	r15, r1
    16f2:	01 05       	cpc	r16, r1
    16f4:	11 05       	cpc	r17, r1
    16f6:	39 f4       	brne	.+14     	; 0x1706 <__moddi3+0x5cc>
    16f8:	64 01       	movw	r12, r8
    16fa:	53 01       	movw	r10, r6
    16fc:	a2 18       	sub	r10, r2
    16fe:	b3 08       	sbc	r11, r3
    1700:	c4 08       	sbc	r12, r4
    1702:	d5 08       	sbc	r13, r5
    1704:	ec c0       	rjmp	.+472    	; 0x18de <__moddi3+0x7a4>
    1706:	62 96       	adiw	r28, 0x12	; 18
    1708:	ff ac       	ldd	r15, Y+63	; 0x3f
    170a:	62 97       	sbiw	r28, 0x12	; 18
    170c:	e4 96       	adiw	r28, 0x34	; 52
    170e:	ff ae       	std	Y+63, r15	; 0x3f
    1710:	e4 97       	sbiw	r28, 0x34	; 52
    1712:	0f 2c       	mov	r0, r15
    1714:	04 c0       	rjmp	.+8      	; 0x171e <__moddi3+0x5e4>
    1716:	22 0c       	add	r2, r2
    1718:	33 1c       	adc	r3, r3
    171a:	44 1c       	adc	r4, r4
    171c:	55 1c       	adc	r5, r5
    171e:	0a 94       	dec	r0
    1720:	d2 f7       	brpl	.-12     	; 0x1716 <__moddi3+0x5dc>
    1722:	8a 2d       	mov	r24, r10
    1724:	8f 19       	sub	r24, r15
    1726:	64 01       	movw	r12, r8
    1728:	53 01       	movw	r10, r6
    172a:	08 2e       	mov	r0, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <__moddi3+0x5fc>
    172e:	d6 94       	lsr	r13
    1730:	c7 94       	ror	r12
    1732:	b7 94       	ror	r11
    1734:	a7 94       	ror	r10
    1736:	0a 94       	dec	r0
    1738:	d2 f7       	brpl	.-12     	; 0x172e <__moddi3+0x5f4>
    173a:	a4 01       	movw	r20, r8
    173c:	93 01       	movw	r18, r6
    173e:	04 c0       	rjmp	.+8      	; 0x1748 <__moddi3+0x60e>
    1740:	22 0f       	add	r18, r18
    1742:	33 1f       	adc	r19, r19
    1744:	44 1f       	adc	r20, r20
    1746:	55 1f       	adc	r21, r21
    1748:	fa 94       	dec	r15
    174a:	d2 f7       	brpl	.-12     	; 0x1740 <__moddi3+0x606>
    174c:	e8 96       	adiw	r28, 0x38	; 56
    174e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1750:	7d ac       	ldd	r7, Y+61	; 0x3d
    1752:	8e ac       	ldd	r8, Y+62	; 0x3e
    1754:	9f ac       	ldd	r9, Y+63	; 0x3f
    1756:	e8 97       	sbiw	r28, 0x38	; 56
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__moddi3+0x628>
    175a:	96 94       	lsr	r9
    175c:	87 94       	ror	r8
    175e:	77 94       	ror	r7
    1760:	67 94       	ror	r6
    1762:	8a 95       	dec	r24
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__moddi3+0x620>
    1766:	84 01       	movw	r16, r8
    1768:	73 01       	movw	r14, r6
    176a:	e2 2a       	or	r14, r18
    176c:	f3 2a       	or	r15, r19
    176e:	04 2b       	or	r16, r20
    1770:	15 2b       	or	r17, r21
    1772:	29 96       	adiw	r28, 0x09	; 9
    1774:	ec ae       	std	Y+60, r14	; 0x3c
    1776:	fd ae       	std	Y+61, r15	; 0x3d
    1778:	0e af       	std	Y+62, r16	; 0x3e
    177a:	1f af       	std	Y+63, r17	; 0x3f
    177c:	29 97       	sbiw	r28, 0x09	; 9
    177e:	32 01       	movw	r6, r4
    1780:	88 24       	eor	r8, r8
    1782:	99 24       	eor	r9, r9
    1784:	92 01       	movw	r18, r4
    1786:	81 01       	movw	r16, r2
    1788:	20 70       	andi	r18, 0x00	; 0
    178a:	30 70       	andi	r19, 0x00	; 0
    178c:	6d 96       	adiw	r28, 0x1d	; 29
    178e:	0c af       	std	Y+60, r16	; 0x3c
    1790:	1d af       	std	Y+61, r17	; 0x3d
    1792:	2e af       	std	Y+62, r18	; 0x3e
    1794:	3f af       	std	Y+63, r19	; 0x3f
    1796:	6d 97       	sbiw	r28, 0x1d	; 29
    1798:	c6 01       	movw	r24, r12
    179a:	b5 01       	movw	r22, r10
    179c:	a4 01       	movw	r20, r8
    179e:	93 01       	movw	r18, r6
    17a0:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    17a4:	7b 01       	movw	r14, r22
    17a6:	8c 01       	movw	r16, r24
    17a8:	c6 01       	movw	r24, r12
    17aa:	b5 01       	movw	r22, r10
    17ac:	a4 01       	movw	r20, r8
    17ae:	93 01       	movw	r18, r6
    17b0:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    17b4:	ca 01       	movw	r24, r20
    17b6:	b9 01       	movw	r22, r18
    17b8:	6d 96       	adiw	r28, 0x1d	; 29
    17ba:	2c ad       	ldd	r18, Y+60	; 0x3c
    17bc:	3d ad       	ldd	r19, Y+61	; 0x3d
    17be:	4e ad       	ldd	r20, Y+62	; 0x3e
    17c0:	5f ad       	ldd	r21, Y+63	; 0x3f
    17c2:	6d 97       	sbiw	r28, 0x1d	; 29
    17c4:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    17c8:	9b 01       	movw	r18, r22
    17ca:	ac 01       	movw	r20, r24
    17cc:	87 01       	movw	r16, r14
    17ce:	ff 24       	eor	r15, r15
    17d0:	ee 24       	eor	r14, r14
    17d2:	29 96       	adiw	r28, 0x09	; 9
    17d4:	ac ac       	ldd	r10, Y+60	; 0x3c
    17d6:	bd ac       	ldd	r11, Y+61	; 0x3d
    17d8:	ce ac       	ldd	r12, Y+62	; 0x3e
    17da:	df ac       	ldd	r13, Y+63	; 0x3f
    17dc:	29 97       	sbiw	r28, 0x09	; 9
    17de:	c6 01       	movw	r24, r12
    17e0:	aa 27       	eor	r26, r26
    17e2:	bb 27       	eor	r27, r27
    17e4:	5c 01       	movw	r10, r24
    17e6:	6d 01       	movw	r12, r26
    17e8:	ae 28       	or	r10, r14
    17ea:	bf 28       	or	r11, r15
    17ec:	c0 2a       	or	r12, r16
    17ee:	d1 2a       	or	r13, r17
    17f0:	a2 16       	cp	r10, r18
    17f2:	b3 06       	cpc	r11, r19
    17f4:	c4 06       	cpc	r12, r20
    17f6:	d5 06       	cpc	r13, r21
    17f8:	90 f4       	brcc	.+36     	; 0x181e <__moddi3+0x6e4>
    17fa:	a2 0c       	add	r10, r2
    17fc:	b3 1c       	adc	r11, r3
    17fe:	c4 1c       	adc	r12, r4
    1800:	d5 1c       	adc	r13, r5
    1802:	a2 14       	cp	r10, r2
    1804:	b3 04       	cpc	r11, r3
    1806:	c4 04       	cpc	r12, r4
    1808:	d5 04       	cpc	r13, r5
    180a:	48 f0       	brcs	.+18     	; 0x181e <__moddi3+0x6e4>
    180c:	a2 16       	cp	r10, r18
    180e:	b3 06       	cpc	r11, r19
    1810:	c4 06       	cpc	r12, r20
    1812:	d5 06       	cpc	r13, r21
    1814:	20 f4       	brcc	.+8      	; 0x181e <__moddi3+0x6e4>
    1816:	a2 0c       	add	r10, r2
    1818:	b3 1c       	adc	r11, r3
    181a:	c4 1c       	adc	r12, r4
    181c:	d5 1c       	adc	r13, r5
    181e:	a2 1a       	sub	r10, r18
    1820:	b3 0a       	sbc	r11, r19
    1822:	c4 0a       	sbc	r12, r20
    1824:	d5 0a       	sbc	r13, r21
    1826:	c6 01       	movw	r24, r12
    1828:	b5 01       	movw	r22, r10
    182a:	a4 01       	movw	r20, r8
    182c:	93 01       	movw	r18, r6
    182e:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1832:	7b 01       	movw	r14, r22
    1834:	8c 01       	movw	r16, r24
    1836:	c6 01       	movw	r24, r12
    1838:	b5 01       	movw	r22, r10
    183a:	a4 01       	movw	r20, r8
    183c:	93 01       	movw	r18, r6
    183e:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1842:	ca 01       	movw	r24, r20
    1844:	b9 01       	movw	r22, r18
    1846:	6d 96       	adiw	r28, 0x1d	; 29
    1848:	2c ad       	ldd	r18, Y+60	; 0x3c
    184a:	3d ad       	ldd	r19, Y+61	; 0x3d
    184c:	4e ad       	ldd	r20, Y+62	; 0x3e
    184e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1850:	6d 97       	sbiw	r28, 0x1d	; 29
    1852:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1856:	9b 01       	movw	r18, r22
    1858:	ac 01       	movw	r20, r24
    185a:	87 01       	movw	r16, r14
    185c:	ff 24       	eor	r15, r15
    185e:	ee 24       	eor	r14, r14
    1860:	29 96       	adiw	r28, 0x09	; 9
    1862:	8c ad       	ldd	r24, Y+60	; 0x3c
    1864:	9d ad       	ldd	r25, Y+61	; 0x3d
    1866:	ae ad       	ldd	r26, Y+62	; 0x3e
    1868:	bf ad       	ldd	r27, Y+63	; 0x3f
    186a:	29 97       	sbiw	r28, 0x09	; 9
    186c:	a0 70       	andi	r26, 0x00	; 0
    186e:	b0 70       	andi	r27, 0x00	; 0
    1870:	57 01       	movw	r10, r14
    1872:	68 01       	movw	r12, r16
    1874:	a8 2a       	or	r10, r24
    1876:	b9 2a       	or	r11, r25
    1878:	ca 2a       	or	r12, r26
    187a:	db 2a       	or	r13, r27
    187c:	a2 16       	cp	r10, r18
    187e:	b3 06       	cpc	r11, r19
    1880:	c4 06       	cpc	r12, r20
    1882:	d5 06       	cpc	r13, r21
    1884:	90 f4       	brcc	.+36     	; 0x18aa <__moddi3+0x770>
    1886:	a2 0c       	add	r10, r2
    1888:	b3 1c       	adc	r11, r3
    188a:	c4 1c       	adc	r12, r4
    188c:	d5 1c       	adc	r13, r5
    188e:	a2 14       	cp	r10, r2
    1890:	b3 04       	cpc	r11, r3
    1892:	c4 04       	cpc	r12, r4
    1894:	d5 04       	cpc	r13, r5
    1896:	48 f0       	brcs	.+18     	; 0x18aa <__moddi3+0x770>
    1898:	a2 16       	cp	r10, r18
    189a:	b3 06       	cpc	r11, r19
    189c:	c4 06       	cpc	r12, r20
    189e:	d5 06       	cpc	r13, r21
    18a0:	20 f4       	brcc	.+8      	; 0x18aa <__moddi3+0x770>
    18a2:	a2 0c       	add	r10, r2
    18a4:	b3 1c       	adc	r11, r3
    18a6:	c4 1c       	adc	r12, r4
    18a8:	d5 1c       	adc	r13, r5
    18aa:	e8 96       	adiw	r28, 0x38	; 56
    18ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    18ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    18b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    18b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    18b4:	e8 97       	sbiw	r28, 0x38	; 56
    18b6:	e4 96       	adiw	r28, 0x34	; 52
    18b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    18ba:	e4 97       	sbiw	r28, 0x34	; 52
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <__moddi3+0x78c>
    18be:	ee 0c       	add	r14, r14
    18c0:	ff 1c       	adc	r15, r15
    18c2:	00 1f       	adc	r16, r16
    18c4:	11 1f       	adc	r17, r17
    18c6:	0a 94       	dec	r0
    18c8:	d2 f7       	brpl	.-12     	; 0x18be <__moddi3+0x784>
    18ca:	2d 96       	adiw	r28, 0x0d	; 13
    18cc:	ec ae       	std	Y+60, r14	; 0x3c
    18ce:	fd ae       	std	Y+61, r15	; 0x3d
    18d0:	0e af       	std	Y+62, r16	; 0x3e
    18d2:	1f af       	std	Y+63, r17	; 0x3f
    18d4:	2d 97       	sbiw	r28, 0x0d	; 13
    18d6:	a2 1a       	sub	r10, r18
    18d8:	b3 0a       	sbc	r11, r19
    18da:	c4 0a       	sbc	r12, r20
    18dc:	d5 0a       	sbc	r13, r21
    18de:	32 01       	movw	r6, r4
    18e0:	88 24       	eor	r8, r8
    18e2:	99 24       	eor	r9, r9
    18e4:	92 01       	movw	r18, r4
    18e6:	81 01       	movw	r16, r2
    18e8:	20 70       	andi	r18, 0x00	; 0
    18ea:	30 70       	andi	r19, 0x00	; 0
    18ec:	a1 96       	adiw	r28, 0x21	; 33
    18ee:	0c af       	std	Y+60, r16	; 0x3c
    18f0:	1d af       	std	Y+61, r17	; 0x3d
    18f2:	2e af       	std	Y+62, r18	; 0x3e
    18f4:	3f af       	std	Y+63, r19	; 0x3f
    18f6:	a1 97       	sbiw	r28, 0x21	; 33
    18f8:	c6 01       	movw	r24, r12
    18fa:	b5 01       	movw	r22, r10
    18fc:	a4 01       	movw	r20, r8
    18fe:	93 01       	movw	r18, r6
    1900:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1904:	7b 01       	movw	r14, r22
    1906:	8c 01       	movw	r16, r24
    1908:	c6 01       	movw	r24, r12
    190a:	b5 01       	movw	r22, r10
    190c:	a4 01       	movw	r20, r8
    190e:	93 01       	movw	r18, r6
    1910:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1914:	ca 01       	movw	r24, r20
    1916:	b9 01       	movw	r22, r18
    1918:	a1 96       	adiw	r28, 0x21	; 33
    191a:	2c ad       	ldd	r18, Y+60	; 0x3c
    191c:	3d ad       	ldd	r19, Y+61	; 0x3d
    191e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1920:	5f ad       	ldd	r21, Y+63	; 0x3f
    1922:	a1 97       	sbiw	r28, 0x21	; 33
    1924:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1928:	9b 01       	movw	r18, r22
    192a:	ac 01       	movw	r20, r24
    192c:	87 01       	movw	r16, r14
    192e:	ff 24       	eor	r15, r15
    1930:	ee 24       	eor	r14, r14
    1932:	2d 96       	adiw	r28, 0x0d	; 13
    1934:	ac ac       	ldd	r10, Y+60	; 0x3c
    1936:	bd ac       	ldd	r11, Y+61	; 0x3d
    1938:	ce ac       	ldd	r12, Y+62	; 0x3e
    193a:	df ac       	ldd	r13, Y+63	; 0x3f
    193c:	2d 97       	sbiw	r28, 0x0d	; 13
    193e:	c6 01       	movw	r24, r12
    1940:	aa 27       	eor	r26, r26
    1942:	bb 27       	eor	r27, r27
    1944:	57 01       	movw	r10, r14
    1946:	68 01       	movw	r12, r16
    1948:	a8 2a       	or	r10, r24
    194a:	b9 2a       	or	r11, r25
    194c:	ca 2a       	or	r12, r26
    194e:	db 2a       	or	r13, r27
    1950:	a2 16       	cp	r10, r18
    1952:	b3 06       	cpc	r11, r19
    1954:	c4 06       	cpc	r12, r20
    1956:	d5 06       	cpc	r13, r21
    1958:	90 f4       	brcc	.+36     	; 0x197e <__moddi3+0x844>
    195a:	a2 0c       	add	r10, r2
    195c:	b3 1c       	adc	r11, r3
    195e:	c4 1c       	adc	r12, r4
    1960:	d5 1c       	adc	r13, r5
    1962:	a2 14       	cp	r10, r2
    1964:	b3 04       	cpc	r11, r3
    1966:	c4 04       	cpc	r12, r4
    1968:	d5 04       	cpc	r13, r5
    196a:	48 f0       	brcs	.+18     	; 0x197e <__moddi3+0x844>
    196c:	a2 16       	cp	r10, r18
    196e:	b3 06       	cpc	r11, r19
    1970:	c4 06       	cpc	r12, r20
    1972:	d5 06       	cpc	r13, r21
    1974:	20 f4       	brcc	.+8      	; 0x197e <__moddi3+0x844>
    1976:	a2 0c       	add	r10, r2
    1978:	b3 1c       	adc	r11, r3
    197a:	c4 1c       	adc	r12, r4
    197c:	d5 1c       	adc	r13, r5
    197e:	a2 1a       	sub	r10, r18
    1980:	b3 0a       	sbc	r11, r19
    1982:	c4 0a       	sbc	r12, r20
    1984:	d5 0a       	sbc	r13, r21
    1986:	c6 01       	movw	r24, r12
    1988:	b5 01       	movw	r22, r10
    198a:	a4 01       	movw	r20, r8
    198c:	93 01       	movw	r18, r6
    198e:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1992:	7b 01       	movw	r14, r22
    1994:	8c 01       	movw	r16, r24
    1996:	c6 01       	movw	r24, r12
    1998:	b5 01       	movw	r22, r10
    199a:	a4 01       	movw	r20, r8
    199c:	93 01       	movw	r18, r6
    199e:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    19a2:	ca 01       	movw	r24, r20
    19a4:	b9 01       	movw	r22, r18
    19a6:	a1 96       	adiw	r28, 0x21	; 33
    19a8:	2c ad       	ldd	r18, Y+60	; 0x3c
    19aa:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ac:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ae:	5f ad       	ldd	r21, Y+63	; 0x3f
    19b0:	a1 97       	sbiw	r28, 0x21	; 33
    19b2:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    19b6:	9b 01       	movw	r18, r22
    19b8:	ac 01       	movw	r20, r24
    19ba:	87 01       	movw	r16, r14
    19bc:	ff 24       	eor	r15, r15
    19be:	ee 24       	eor	r14, r14
    19c0:	2d 96       	adiw	r28, 0x0d	; 13
    19c2:	8c ad       	ldd	r24, Y+60	; 0x3c
    19c4:	9d ad       	ldd	r25, Y+61	; 0x3d
    19c6:	ae ad       	ldd	r26, Y+62	; 0x3e
    19c8:	bf ad       	ldd	r27, Y+63	; 0x3f
    19ca:	2d 97       	sbiw	r28, 0x0d	; 13
    19cc:	a0 70       	andi	r26, 0x00	; 0
    19ce:	b0 70       	andi	r27, 0x00	; 0
    19d0:	e8 2a       	or	r14, r24
    19d2:	f9 2a       	or	r15, r25
    19d4:	0a 2b       	or	r16, r26
    19d6:	1b 2b       	or	r17, r27
    19d8:	e2 16       	cp	r14, r18
    19da:	f3 06       	cpc	r15, r19
    19dc:	04 07       	cpc	r16, r20
    19de:	15 07       	cpc	r17, r21
    19e0:	90 f4       	brcc	.+36     	; 0x1a06 <__moddi3+0x8cc>
    19e2:	e2 0c       	add	r14, r2
    19e4:	f3 1c       	adc	r15, r3
    19e6:	04 1d       	adc	r16, r4
    19e8:	15 1d       	adc	r17, r5
    19ea:	e2 14       	cp	r14, r2
    19ec:	f3 04       	cpc	r15, r3
    19ee:	04 05       	cpc	r16, r4
    19f0:	15 05       	cpc	r17, r5
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <__moddi3+0x8cc>
    19f4:	e2 16       	cp	r14, r18
    19f6:	f3 06       	cpc	r15, r19
    19f8:	04 07       	cpc	r16, r20
    19fa:	15 07       	cpc	r17, r21
    19fc:	20 f4       	brcc	.+8      	; 0x1a06 <__moddi3+0x8cc>
    19fe:	e2 0c       	add	r14, r2
    1a00:	f3 1c       	adc	r15, r3
    1a02:	04 1d       	adc	r16, r4
    1a04:	15 1d       	adc	r17, r5
    1a06:	e2 1a       	sub	r14, r18
    1a08:	f3 0a       	sbc	r15, r19
    1a0a:	04 0b       	sbc	r16, r20
    1a0c:	15 0b       	sbc	r17, r21
    1a0e:	d8 01       	movw	r26, r16
    1a10:	c7 01       	movw	r24, r14
    1a12:	62 96       	adiw	r28, 0x12	; 18
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	62 97       	sbiw	r28, 0x12	; 18
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__moddi3+0x8e8>
    1a1a:	b6 95       	lsr	r27
    1a1c:	a7 95       	ror	r26
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__moddi3+0x8e0>
    1a26:	89 a7       	std	Y+41, r24	; 0x29
    1a28:	9a a7       	std	Y+42, r25	; 0x2a
    1a2a:	ab a7       	std	Y+43, r26	; 0x2b
    1a2c:	bc a7       	std	Y+44, r27	; 0x2c
    1a2e:	1d a6       	std	Y+45, r1	; 0x2d
    1a30:	1e a6       	std	Y+46, r1	; 0x2e
    1a32:	1f a6       	std	Y+47, r1	; 0x2f
    1a34:	18 aa       	std	Y+48, r1	; 0x30
    1a36:	89 8b       	std	Y+17, r24	; 0x11
    1a38:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a3a:	8a 8b       	std	Y+18, r24	; 0x12
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a42:	8c 8b       	std	Y+20, r24	; 0x14
    1a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a46:	8d 8b       	std	Y+21, r24	; 0x15
    1a48:	2f c3       	rjmp	.+1630   	; 0x20a8 <__moddi3+0xf6e>
    1a4a:	6a 14       	cp	r6, r10
    1a4c:	7b 04       	cpc	r7, r11
    1a4e:	8c 04       	cpc	r8, r12
    1a50:	9d 04       	cpc	r9, r13
    1a52:	48 f4       	brcc	.+18     	; 0x1a66 <__moddi3+0x92c>
    1a54:	49 8b       	std	Y+17, r20	; 0x11
    1a56:	5a 8b       	std	Y+18, r21	; 0x12
    1a58:	6b 8b       	std	Y+19, r22	; 0x13
    1a5a:	7c 8b       	std	Y+20, r23	; 0x14
    1a5c:	8d 8b       	std	Y+21, r24	; 0x15
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	2f 8b       	std	Y+23, r18	; 0x17
    1a62:	38 8f       	std	Y+24, r19	; 0x18
    1a64:	27 c3       	rjmp	.+1614   	; 0x20b4 <__moddi3+0xf7a>
    1a66:	00 e0       	ldi	r16, 0x00	; 0
    1a68:	a0 16       	cp	r10, r16
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	b0 06       	cpc	r11, r16
    1a6e:	01 e0       	ldi	r16, 0x01	; 1
    1a70:	c0 06       	cpc	r12, r16
    1a72:	00 e0       	ldi	r16, 0x00	; 0
    1a74:	d0 06       	cpc	r13, r16
    1a76:	88 f4       	brcc	.+34     	; 0x1a9a <__moddi3+0x960>
    1a78:	1f ef       	ldi	r17, 0xFF	; 255
    1a7a:	a1 16       	cp	r10, r17
    1a7c:	b1 04       	cpc	r11, r1
    1a7e:	c1 04       	cpc	r12, r1
    1a80:	d1 04       	cpc	r13, r1
    1a82:	39 f0       	breq	.+14     	; 0x1a92 <__moddi3+0x958>
    1a84:	30 f0       	brcs	.+12     	; 0x1a92 <__moddi3+0x958>
    1a86:	28 e0       	ldi	r18, 0x08	; 8
    1a88:	e2 2e       	mov	r14, r18
    1a8a:	f1 2c       	mov	r15, r1
    1a8c:	01 2d       	mov	r16, r1
    1a8e:	11 2d       	mov	r17, r1
    1a90:	18 c0       	rjmp	.+48     	; 0x1ac2 <__moddi3+0x988>
    1a92:	ee 24       	eor	r14, r14
    1a94:	ff 24       	eor	r15, r15
    1a96:	87 01       	movw	r16, r14
    1a98:	14 c0       	rjmp	.+40     	; 0x1ac2 <__moddi3+0x988>
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	a2 16       	cp	r10, r18
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	b2 06       	cpc	r11, r18
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	c2 06       	cpc	r12, r18
    1aa6:	21 e0       	ldi	r18, 0x01	; 1
    1aa8:	d2 06       	cpc	r13, r18
    1aaa:	30 f0       	brcs	.+12     	; 0x1ab8 <__moddi3+0x97e>
    1aac:	98 e1       	ldi	r25, 0x18	; 24
    1aae:	e9 2e       	mov	r14, r25
    1ab0:	f1 2c       	mov	r15, r1
    1ab2:	01 2d       	mov	r16, r1
    1ab4:	11 2d       	mov	r17, r1
    1ab6:	05 c0       	rjmp	.+10     	; 0x1ac2 <__moddi3+0x988>
    1ab8:	80 e1       	ldi	r24, 0x10	; 16
    1aba:	e8 2e       	mov	r14, r24
    1abc:	f1 2c       	mov	r15, r1
    1abe:	01 2d       	mov	r16, r1
    1ac0:	11 2d       	mov	r17, r1
    1ac2:	d6 01       	movw	r26, r12
    1ac4:	c5 01       	movw	r24, r10
    1ac6:	0e 2c       	mov	r0, r14
    1ac8:	04 c0       	rjmp	.+8      	; 0x1ad2 <__moddi3+0x998>
    1aca:	b6 95       	lsr	r27
    1acc:	a7 95       	ror	r26
    1ace:	97 95       	ror	r25
    1ad0:	87 95       	ror	r24
    1ad2:	0a 94       	dec	r0
    1ad4:	d2 f7       	brpl	.-12     	; 0x1aca <__moddi3+0x990>
    1ad6:	87 5f       	subi	r24, 0xF7	; 247
    1ad8:	9e 4f       	sbci	r25, 0xFE	; 254
    1ada:	dc 01       	movw	r26, r24
    1adc:	2c 91       	ld	r18, X
    1ade:	80 e2       	ldi	r24, 0x20	; 32
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e0       	ldi	r26, 0x00	; 0
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	8e 19       	sub	r24, r14
    1ae8:	9f 09       	sbc	r25, r15
    1aea:	a0 0b       	sbc	r26, r16
    1aec:	b1 0b       	sbc	r27, r17
    1aee:	82 1b       	sub	r24, r18
    1af0:	91 09       	sbc	r25, r1
    1af2:	a1 09       	sbc	r26, r1
    1af4:	b1 09       	sbc	r27, r1
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	a1 05       	cpc	r26, r1
    1afa:	b1 05       	cpc	r27, r1
    1afc:	09 f0       	breq	.+2      	; 0x1b00 <__moddi3+0x9c6>
    1afe:	59 c0       	rjmp	.+178    	; 0x1bb2 <__moddi3+0xa78>
    1b00:	a6 14       	cp	r10, r6
    1b02:	b7 04       	cpc	r11, r7
    1b04:	c8 04       	cpc	r12, r8
    1b06:	d9 04       	cpc	r13, r9
    1b08:	70 f0       	brcs	.+28     	; 0x1b26 <__moddi3+0x9ec>
    1b0a:	e8 96       	adiw	r28, 0x38	; 56
    1b0c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1b0e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1b10:	0e ad       	ldd	r16, Y+62	; 0x3e
    1b12:	1f ad       	ldd	r17, Y+63	; 0x3f
    1b14:	e8 97       	sbiw	r28, 0x38	; 56
    1b16:	e2 14       	cp	r14, r2
    1b18:	f3 04       	cpc	r15, r3
    1b1a:	04 05       	cpc	r16, r4
    1b1c:	15 05       	cpc	r17, r5
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <__moddi3+0x9ec>
    1b20:	d8 01       	movw	r26, r16
    1b22:	c7 01       	movw	r24, r14
    1b24:	2f c0       	rjmp	.+94     	; 0x1b84 <__moddi3+0xa4a>
    1b26:	e8 96       	adiw	r28, 0x38	; 56
    1b28:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b2a:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b2c:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b2e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b30:	e8 97       	sbiw	r28, 0x38	; 56
    1b32:	82 19       	sub	r24, r2
    1b34:	93 09       	sbc	r25, r3
    1b36:	a4 09       	sbc	r26, r4
    1b38:	b5 09       	sbc	r27, r5
    1b3a:	a4 01       	movw	r20, r8
    1b3c:	93 01       	movw	r18, r6
    1b3e:	2a 19       	sub	r18, r10
    1b40:	3b 09       	sbc	r19, r11
    1b42:	4c 09       	sbc	r20, r12
    1b44:	5d 09       	sbc	r21, r13
    1b46:	aa 24       	eor	r10, r10
    1b48:	bb 24       	eor	r11, r11
    1b4a:	65 01       	movw	r12, r10
    1b4c:	e8 96       	adiw	r28, 0x38	; 56
    1b4e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b50:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b52:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b54:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b56:	e8 97       	sbiw	r28, 0x38	; 56
    1b58:	68 16       	cp	r6, r24
    1b5a:	79 06       	cpc	r7, r25
    1b5c:	8a 06       	cpc	r8, r26
    1b5e:	9b 06       	cpc	r9, r27
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <__moddi3+0xa32>
    1b62:	11 e0       	ldi	r17, 0x01	; 1
    1b64:	a1 2e       	mov	r10, r17
    1b66:	b1 2c       	mov	r11, r1
    1b68:	c1 2c       	mov	r12, r1
    1b6a:	d1 2c       	mov	r13, r1
    1b6c:	79 01       	movw	r14, r18
    1b6e:	8a 01       	movw	r16, r20
    1b70:	ea 18       	sub	r14, r10
    1b72:	fb 08       	sbc	r15, r11
    1b74:	0c 09       	sbc	r16, r12
    1b76:	1d 09       	sbc	r17, r13
    1b78:	61 96       	adiw	r28, 0x11	; 17
    1b7a:	ec ae       	std	Y+60, r14	; 0x3c
    1b7c:	fd ae       	std	Y+61, r15	; 0x3d
    1b7e:	0e af       	std	Y+62, r16	; 0x3e
    1b80:	1f af       	std	Y+63, r17	; 0x3f
    1b82:	61 97       	sbiw	r28, 0x11	; 17
    1b84:	89 a7       	std	Y+41, r24	; 0x29
    1b86:	9a a7       	std	Y+42, r25	; 0x2a
    1b88:	ab a7       	std	Y+43, r26	; 0x2b
    1b8a:	bc a7       	std	Y+44, r27	; 0x2c
    1b8c:	61 96       	adiw	r28, 0x11	; 17
    1b8e:	0c ad       	ldd	r16, Y+60	; 0x3c
    1b90:	1d ad       	ldd	r17, Y+61	; 0x3d
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	61 97       	sbiw	r28, 0x11	; 17
    1b98:	0d a7       	std	Y+45, r16	; 0x2d
    1b9a:	1e a7       	std	Y+46, r17	; 0x2e
    1b9c:	2f a7       	std	Y+47, r18	; 0x2f
    1b9e:	38 ab       	std	Y+48, r19	; 0x30
    1ba0:	89 8b       	std	Y+17, r24	; 0x11
    1ba2:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ba4:	8a 8b       	std	Y+18, r24	; 0x12
    1ba6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ba8:	8b 8b       	std	Y+19, r24	; 0x13
    1baa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1bac:	8c 8b       	std	Y+20, r24	; 0x14
    1bae:	0d 8b       	std	Y+21, r16	; 0x15
    1bb0:	7b c2       	rjmp	.+1270   	; 0x20a8 <__moddi3+0xf6e>
    1bb2:	e3 96       	adiw	r28, 0x33	; 51
    1bb4:	8f af       	std	Y+63, r24	; 0x3f
    1bb6:	e3 97       	sbiw	r28, 0x33	; 51
    1bb8:	a6 01       	movw	r20, r12
    1bba:	95 01       	movw	r18, r10
    1bbc:	08 2e       	mov	r0, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <__moddi3+0xa8e>
    1bc0:	22 0f       	add	r18, r18
    1bc2:	33 1f       	adc	r19, r19
    1bc4:	44 1f       	adc	r20, r20
    1bc6:	55 1f       	adc	r21, r21
    1bc8:	0a 94       	dec	r0
    1bca:	d2 f7       	brpl	.-12     	; 0x1bc0 <__moddi3+0xa86>
    1bcc:	10 e2       	ldi	r17, 0x20	; 32
    1bce:	18 1b       	sub	r17, r24
    1bd0:	e2 96       	adiw	r28, 0x32	; 50
    1bd2:	1f af       	std	Y+63, r17	; 0x3f
    1bd4:	e2 97       	sbiw	r28, 0x32	; 50
    1bd6:	d2 01       	movw	r26, r4
    1bd8:	c1 01       	movw	r24, r2
    1bda:	01 2e       	mov	r0, r17
    1bdc:	04 c0       	rjmp	.+8      	; 0x1be6 <__moddi3+0xaac>
    1bde:	b6 95       	lsr	r27
    1be0:	a7 95       	ror	r26
    1be2:	97 95       	ror	r25
    1be4:	87 95       	ror	r24
    1be6:	0a 94       	dec	r0
    1be8:	d2 f7       	brpl	.-12     	; 0x1bde <__moddi3+0xaa4>
    1bea:	5c 01       	movw	r10, r24
    1bec:	6d 01       	movw	r12, r26
    1bee:	a2 2a       	or	r10, r18
    1bf0:	b3 2a       	or	r11, r19
    1bf2:	c4 2a       	or	r12, r20
    1bf4:	d5 2a       	or	r13, r21
    1bf6:	25 96       	adiw	r28, 0x05	; 5
    1bf8:	ac ae       	std	Y+60, r10	; 0x3c
    1bfa:	bd ae       	std	Y+61, r11	; 0x3d
    1bfc:	ce ae       	std	Y+62, r12	; 0x3e
    1bfe:	df ae       	std	Y+63, r13	; 0x3f
    1c00:	25 97       	sbiw	r28, 0x05	; 5
    1c02:	72 01       	movw	r14, r4
    1c04:	61 01       	movw	r12, r2
    1c06:	e3 96       	adiw	r28, 0x33	; 51
    1c08:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c0a:	e3 97       	sbiw	r28, 0x33	; 51
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <__moddi3+0xadc>
    1c0e:	cc 0c       	add	r12, r12
    1c10:	dd 1c       	adc	r13, r13
    1c12:	ee 1c       	adc	r14, r14
    1c14:	ff 1c       	adc	r15, r15
    1c16:	0a 94       	dec	r0
    1c18:	d2 f7       	brpl	.-12     	; 0x1c0e <__moddi3+0xad4>
    1c1a:	21 96       	adiw	r28, 0x01	; 1
    1c1c:	cc ae       	std	Y+60, r12	; 0x3c
    1c1e:	dd ae       	std	Y+61, r13	; 0x3d
    1c20:	ee ae       	std	Y+62, r14	; 0x3e
    1c22:	ff ae       	std	Y+63, r15	; 0x3f
    1c24:	21 97       	sbiw	r28, 0x01	; 1
    1c26:	64 01       	movw	r12, r8
    1c28:	53 01       	movw	r10, r6
    1c2a:	01 2e       	mov	r0, r17
    1c2c:	04 c0       	rjmp	.+8      	; 0x1c36 <__moddi3+0xafc>
    1c2e:	d6 94       	lsr	r13
    1c30:	c7 94       	ror	r12
    1c32:	b7 94       	ror	r11
    1c34:	a7 94       	ror	r10
    1c36:	0a 94       	dec	r0
    1c38:	d2 f7       	brpl	.-12     	; 0x1c2e <__moddi3+0xaf4>
    1c3a:	a4 01       	movw	r20, r8
    1c3c:	93 01       	movw	r18, r6
    1c3e:	e3 96       	adiw	r28, 0x33	; 51
    1c40:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c42:	e3 97       	sbiw	r28, 0x33	; 51
    1c44:	04 c0       	rjmp	.+8      	; 0x1c4e <__moddi3+0xb14>
    1c46:	22 0f       	add	r18, r18
    1c48:	33 1f       	adc	r19, r19
    1c4a:	44 1f       	adc	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	0a 94       	dec	r0
    1c50:	d2 f7       	brpl	.-12     	; 0x1c46 <__moddi3+0xb0c>
    1c52:	e8 96       	adiw	r28, 0x38	; 56
    1c54:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c56:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1c5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c5c:	e8 97       	sbiw	r28, 0x38	; 56
    1c5e:	04 c0       	rjmp	.+8      	; 0x1c68 <__moddi3+0xb2e>
    1c60:	b6 95       	lsr	r27
    1c62:	a7 95       	ror	r26
    1c64:	97 95       	ror	r25
    1c66:	87 95       	ror	r24
    1c68:	1a 95       	dec	r17
    1c6a:	d2 f7       	brpl	.-12     	; 0x1c60 <__moddi3+0xb26>
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	8d 01       	movw	r16, r26
    1c70:	e2 2a       	or	r14, r18
    1c72:	f3 2a       	or	r15, r19
    1c74:	04 2b       	or	r16, r20
    1c76:	15 2b       	or	r17, r21
    1c78:	e9 ae       	std	Y+57, r14	; 0x39
    1c7a:	fa ae       	std	Y+58, r15	; 0x3a
    1c7c:	0b af       	std	Y+59, r16	; 0x3b
    1c7e:	1c af       	std	Y+60, r17	; 0x3c
    1c80:	e8 96       	adiw	r28, 0x38	; 56
    1c82:	0c ad       	ldd	r16, Y+60	; 0x3c
    1c84:	1d ad       	ldd	r17, Y+61	; 0x3d
    1c86:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c88:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c8a:	e8 97       	sbiw	r28, 0x38	; 56
    1c8c:	e3 96       	adiw	r28, 0x33	; 51
    1c8e:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c90:	e3 97       	sbiw	r28, 0x33	; 51
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <__moddi3+0xb62>
    1c94:	00 0f       	add	r16, r16
    1c96:	11 1f       	adc	r17, r17
    1c98:	22 1f       	adc	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	0a 94       	dec	r0
    1c9e:	d2 f7       	brpl	.-12     	; 0x1c94 <__moddi3+0xb5a>
    1ca0:	0d ab       	std	Y+53, r16	; 0x35
    1ca2:	1e ab       	std	Y+54, r17	; 0x36
    1ca4:	2f ab       	std	Y+55, r18	; 0x37
    1ca6:	38 af       	std	Y+56, r19	; 0x38
    1ca8:	25 96       	adiw	r28, 0x05	; 5
    1caa:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cac:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cae:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cb0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cb2:	25 97       	sbiw	r28, 0x05	; 5
    1cb4:	3a 01       	movw	r6, r20
    1cb6:	88 24       	eor	r8, r8
    1cb8:	99 24       	eor	r9, r9
    1cba:	40 70       	andi	r20, 0x00	; 0
    1cbc:	50 70       	andi	r21, 0x00	; 0
    1cbe:	a5 96       	adiw	r28, 0x25	; 37
    1cc0:	2c af       	std	Y+60, r18	; 0x3c
    1cc2:	3d af       	std	Y+61, r19	; 0x3d
    1cc4:	4e af       	std	Y+62, r20	; 0x3e
    1cc6:	5f af       	std	Y+63, r21	; 0x3f
    1cc8:	a5 97       	sbiw	r28, 0x25	; 37
    1cca:	c6 01       	movw	r24, r12
    1ccc:	b5 01       	movw	r22, r10
    1cce:	a4 01       	movw	r20, r8
    1cd0:	93 01       	movw	r18, r6
    1cd2:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1cd6:	7b 01       	movw	r14, r22
    1cd8:	8c 01       	movw	r16, r24
    1cda:	c6 01       	movw	r24, r12
    1cdc:	b5 01       	movw	r22, r10
    1cde:	a4 01       	movw	r20, r8
    1ce0:	93 01       	movw	r18, r6
    1ce2:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1ce6:	c9 01       	movw	r24, r18
    1ce8:	da 01       	movw	r26, r20
    1cea:	1c 01       	movw	r2, r24
    1cec:	2d 01       	movw	r4, r26
    1cee:	c2 01       	movw	r24, r4
    1cf0:	b1 01       	movw	r22, r2
    1cf2:	a5 96       	adiw	r28, 0x25	; 37
    1cf4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cf6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cf8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cfa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cfc:	a5 97       	sbiw	r28, 0x25	; 37
    1cfe:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1d02:	9b 01       	movw	r18, r22
    1d04:	ac 01       	movw	r20, r24
    1d06:	87 01       	movw	r16, r14
    1d08:	ff 24       	eor	r15, r15
    1d0a:	ee 24       	eor	r14, r14
    1d0c:	a9 ac       	ldd	r10, Y+57	; 0x39
    1d0e:	ba ac       	ldd	r11, Y+58	; 0x3a
    1d10:	cb ac       	ldd	r12, Y+59	; 0x3b
    1d12:	dc ac       	ldd	r13, Y+60	; 0x3c
    1d14:	c6 01       	movw	r24, r12
    1d16:	aa 27       	eor	r26, r26
    1d18:	bb 27       	eor	r27, r27
    1d1a:	57 01       	movw	r10, r14
    1d1c:	68 01       	movw	r12, r16
    1d1e:	a8 2a       	or	r10, r24
    1d20:	b9 2a       	or	r11, r25
    1d22:	ca 2a       	or	r12, r26
    1d24:	db 2a       	or	r13, r27
    1d26:	a2 16       	cp	r10, r18
    1d28:	b3 06       	cpc	r11, r19
    1d2a:	c4 06       	cpc	r12, r20
    1d2c:	d5 06       	cpc	r13, r21
    1d2e:	10 f5       	brcc	.+68     	; 0x1d74 <__moddi3+0xc3a>
    1d30:	08 94       	sec
    1d32:	21 08       	sbc	r2, r1
    1d34:	31 08       	sbc	r3, r1
    1d36:	41 08       	sbc	r4, r1
    1d38:	51 08       	sbc	r5, r1
    1d3a:	25 96       	adiw	r28, 0x05	; 5
    1d3c:	ec ac       	ldd	r14, Y+60	; 0x3c
    1d3e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1d40:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d42:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d44:	25 97       	sbiw	r28, 0x05	; 5
    1d46:	ae 0c       	add	r10, r14
    1d48:	bf 1c       	adc	r11, r15
    1d4a:	c0 1e       	adc	r12, r16
    1d4c:	d1 1e       	adc	r13, r17
    1d4e:	ae 14       	cp	r10, r14
    1d50:	bf 04       	cpc	r11, r15
    1d52:	c0 06       	cpc	r12, r16
    1d54:	d1 06       	cpc	r13, r17
    1d56:	70 f0       	brcs	.+28     	; 0x1d74 <__moddi3+0xc3a>
    1d58:	a2 16       	cp	r10, r18
    1d5a:	b3 06       	cpc	r11, r19
    1d5c:	c4 06       	cpc	r12, r20
    1d5e:	d5 06       	cpc	r13, r21
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__moddi3+0xc3a>
    1d62:	08 94       	sec
    1d64:	21 08       	sbc	r2, r1
    1d66:	31 08       	sbc	r3, r1
    1d68:	41 08       	sbc	r4, r1
    1d6a:	51 08       	sbc	r5, r1
    1d6c:	ae 0c       	add	r10, r14
    1d6e:	bf 1c       	adc	r11, r15
    1d70:	c0 1e       	adc	r12, r16
    1d72:	d1 1e       	adc	r13, r17
    1d74:	a2 1a       	sub	r10, r18
    1d76:	b3 0a       	sbc	r11, r19
    1d78:	c4 0a       	sbc	r12, r20
    1d7a:	d5 0a       	sbc	r13, r21
    1d7c:	c6 01       	movw	r24, r12
    1d7e:	b5 01       	movw	r22, r10
    1d80:	a4 01       	movw	r20, r8
    1d82:	93 01       	movw	r18, r6
    1d84:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1d88:	7b 01       	movw	r14, r22
    1d8a:	8c 01       	movw	r16, r24
    1d8c:	c6 01       	movw	r24, r12
    1d8e:	b5 01       	movw	r22, r10
    1d90:	a4 01       	movw	r20, r8
    1d92:	93 01       	movw	r18, r6
    1d94:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    1d98:	c9 01       	movw	r24, r18
    1d9a:	da 01       	movw	r26, r20
    1d9c:	3c 01       	movw	r6, r24
    1d9e:	4d 01       	movw	r8, r26
    1da0:	c4 01       	movw	r24, r8
    1da2:	b3 01       	movw	r22, r6
    1da4:	a5 96       	adiw	r28, 0x25	; 37
    1da6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1da8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1daa:	4e ad       	ldd	r20, Y+62	; 0x3e
    1dac:	5f ad       	ldd	r21, Y+63	; 0x3f
    1dae:	a5 97       	sbiw	r28, 0x25	; 37
    1db0:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1db4:	9b 01       	movw	r18, r22
    1db6:	ac 01       	movw	r20, r24
    1db8:	87 01       	movw	r16, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	ee 24       	eor	r14, r14
    1dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    1dc0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dc2:	ab ad       	ldd	r26, Y+59	; 0x3b
    1dc4:	bc ad       	ldd	r27, Y+60	; 0x3c
    1dc6:	a0 70       	andi	r26, 0x00	; 0
    1dc8:	b0 70       	andi	r27, 0x00	; 0
    1dca:	57 01       	movw	r10, r14
    1dcc:	68 01       	movw	r12, r16
    1dce:	a8 2a       	or	r10, r24
    1dd0:	b9 2a       	or	r11, r25
    1dd2:	ca 2a       	or	r12, r26
    1dd4:	db 2a       	or	r13, r27
    1dd6:	a2 16       	cp	r10, r18
    1dd8:	b3 06       	cpc	r11, r19
    1dda:	c4 06       	cpc	r12, r20
    1ddc:	d5 06       	cpc	r13, r21
    1dde:	10 f5       	brcc	.+68     	; 0x1e24 <__moddi3+0xcea>
    1de0:	08 94       	sec
    1de2:	61 08       	sbc	r6, r1
    1de4:	71 08       	sbc	r7, r1
    1de6:	81 08       	sbc	r8, r1
    1de8:	91 08       	sbc	r9, r1
    1dea:	25 96       	adiw	r28, 0x05	; 5
    1dec:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dee:	7d ad       	ldd	r23, Y+61	; 0x3d
    1df0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1df2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1df4:	25 97       	sbiw	r28, 0x05	; 5
    1df6:	a6 0e       	add	r10, r22
    1df8:	b7 1e       	adc	r11, r23
    1dfa:	c8 1e       	adc	r12, r24
    1dfc:	d9 1e       	adc	r13, r25
    1dfe:	a6 16       	cp	r10, r22
    1e00:	b7 06       	cpc	r11, r23
    1e02:	c8 06       	cpc	r12, r24
    1e04:	d9 06       	cpc	r13, r25
    1e06:	70 f0       	brcs	.+28     	; 0x1e24 <__moddi3+0xcea>
    1e08:	a2 16       	cp	r10, r18
    1e0a:	b3 06       	cpc	r11, r19
    1e0c:	c4 06       	cpc	r12, r20
    1e0e:	d5 06       	cpc	r13, r21
    1e10:	48 f4       	brcc	.+18     	; 0x1e24 <__moddi3+0xcea>
    1e12:	08 94       	sec
    1e14:	61 08       	sbc	r6, r1
    1e16:	71 08       	sbc	r7, r1
    1e18:	81 08       	sbc	r8, r1
    1e1a:	91 08       	sbc	r9, r1
    1e1c:	a6 0e       	add	r10, r22
    1e1e:	b7 1e       	adc	r11, r23
    1e20:	c8 1e       	adc	r12, r24
    1e22:	d9 1e       	adc	r13, r25
    1e24:	d6 01       	movw	r26, r12
    1e26:	c5 01       	movw	r24, r10
    1e28:	82 1b       	sub	r24, r18
    1e2a:	93 0b       	sbc	r25, r19
    1e2c:	a4 0b       	sbc	r26, r20
    1e2e:	b5 0b       	sbc	r27, r21
    1e30:	89 ab       	std	Y+49, r24	; 0x31
    1e32:	9a ab       	std	Y+50, r25	; 0x32
    1e34:	ab ab       	std	Y+51, r26	; 0x33
    1e36:	bc ab       	std	Y+52, r27	; 0x34
    1e38:	d1 01       	movw	r26, r2
    1e3a:	99 27       	eor	r25, r25
    1e3c:	88 27       	eor	r24, r24
    1e3e:	84 01       	movw	r16, r8
    1e40:	73 01       	movw	r14, r6
    1e42:	e8 2a       	or	r14, r24
    1e44:	f9 2a       	or	r15, r25
    1e46:	0a 2b       	or	r16, r26
    1e48:	1b 2b       	or	r17, r27
    1e4a:	8f ef       	ldi	r24, 0xFF	; 255
    1e4c:	a8 2e       	mov	r10, r24
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	b8 2e       	mov	r11, r24
    1e52:	c1 2c       	mov	r12, r1
    1e54:	d1 2c       	mov	r13, r1
    1e56:	ae 20       	and	r10, r14
    1e58:	bf 20       	and	r11, r15
    1e5a:	c0 22       	and	r12, r16
    1e5c:	d1 22       	and	r13, r17
    1e5e:	78 01       	movw	r14, r16
    1e60:	00 27       	eor	r16, r16
    1e62:	11 27       	eor	r17, r17
    1e64:	21 96       	adiw	r28, 0x01	; 1
    1e66:	6c ac       	ldd	r6, Y+60	; 0x3c
    1e68:	7d ac       	ldd	r7, Y+61	; 0x3d
    1e6a:	8e ac       	ldd	r8, Y+62	; 0x3e
    1e6c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1e6e:	21 97       	sbiw	r28, 0x01	; 1
    1e70:	2f ef       	ldi	r18, 0xFF	; 255
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	62 22       	and	r6, r18
    1e7a:	73 22       	and	r7, r19
    1e7c:	84 22       	and	r8, r20
    1e7e:	95 22       	and	r9, r21
    1e80:	21 96       	adiw	r28, 0x01	; 1
    1e82:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e84:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e86:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e88:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e8a:	21 97       	sbiw	r28, 0x01	; 1
    1e8c:	ac 01       	movw	r20, r24
    1e8e:	66 27       	eor	r22, r22
    1e90:	77 27       	eor	r23, r23
    1e92:	ad 96       	adiw	r28, 0x2d	; 45
    1e94:	4c af       	std	Y+60, r20	; 0x3c
    1e96:	5d af       	std	Y+61, r21	; 0x3d
    1e98:	6e af       	std	Y+62, r22	; 0x3e
    1e9a:	7f af       	std	Y+63, r23	; 0x3f
    1e9c:	ad 97       	sbiw	r28, 0x2d	; 45
    1e9e:	c6 01       	movw	r24, r12
    1ea0:	b5 01       	movw	r22, r10
    1ea2:	a4 01       	movw	r20, r8
    1ea4:	93 01       	movw	r18, r6
    1ea6:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1eaa:	a9 96       	adiw	r28, 0x29	; 41
    1eac:	6c af       	std	Y+60, r22	; 0x3c
    1eae:	7d af       	std	Y+61, r23	; 0x3d
    1eb0:	8e af       	std	Y+62, r24	; 0x3e
    1eb2:	9f af       	std	Y+63, r25	; 0x3f
    1eb4:	a9 97       	sbiw	r28, 0x29	; 41
    1eb6:	c6 01       	movw	r24, r12
    1eb8:	b5 01       	movw	r22, r10
    1eba:	ad 96       	adiw	r28, 0x2d	; 45
    1ebc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ebe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ec0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ec2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ec4:	ad 97       	sbiw	r28, 0x2d	; 45
    1ec6:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1eca:	1b 01       	movw	r2, r22
    1ecc:	2c 01       	movw	r4, r24
    1ece:	c8 01       	movw	r24, r16
    1ed0:	b7 01       	movw	r22, r14
    1ed2:	a4 01       	movw	r20, r8
    1ed4:	93 01       	movw	r18, r6
    1ed6:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1eda:	5b 01       	movw	r10, r22
    1edc:	6c 01       	movw	r12, r24
    1ede:	c8 01       	movw	r24, r16
    1ee0:	b7 01       	movw	r22, r14
    1ee2:	ad 96       	adiw	r28, 0x2d	; 45
    1ee4:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ee6:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ee8:	4e ad       	ldd	r20, Y+62	; 0x3e
    1eea:	5f ad       	ldd	r21, Y+63	; 0x3f
    1eec:	ad 97       	sbiw	r28, 0x2d	; 45
    1eee:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    1ef2:	7b 01       	movw	r14, r22
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	a6 01       	movw	r20, r12
    1ef8:	95 01       	movw	r18, r10
    1efa:	22 0d       	add	r18, r2
    1efc:	33 1d       	adc	r19, r3
    1efe:	44 1d       	adc	r20, r4
    1f00:	55 1d       	adc	r21, r5
    1f02:	a9 96       	adiw	r28, 0x29	; 41
    1f04:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f06:	7d ac       	ldd	r7, Y+61	; 0x3d
    1f08:	8e ac       	ldd	r8, Y+62	; 0x3e
    1f0a:	9f ac       	ldd	r9, Y+63	; 0x3f
    1f0c:	a9 97       	sbiw	r28, 0x29	; 41
    1f0e:	c4 01       	movw	r24, r8
    1f10:	aa 27       	eor	r26, r26
    1f12:	bb 27       	eor	r27, r27
    1f14:	28 0f       	add	r18, r24
    1f16:	39 1f       	adc	r19, r25
    1f18:	4a 1f       	adc	r20, r26
    1f1a:	5b 1f       	adc	r21, r27
    1f1c:	2a 15       	cp	r18, r10
    1f1e:	3b 05       	cpc	r19, r11
    1f20:	4c 05       	cpc	r20, r12
    1f22:	5d 05       	cpc	r21, r13
    1f24:	48 f4       	brcc	.+18     	; 0x1f38 <__moddi3+0xdfe>
    1f26:	81 2c       	mov	r8, r1
    1f28:	91 2c       	mov	r9, r1
    1f2a:	e1 e0       	ldi	r30, 0x01	; 1
    1f2c:	ae 2e       	mov	r10, r30
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	e8 0c       	add	r14, r8
    1f32:	f9 1c       	adc	r15, r9
    1f34:	0a 1d       	adc	r16, r10
    1f36:	1b 1d       	adc	r17, r11
    1f38:	ca 01       	movw	r24, r20
    1f3a:	aa 27       	eor	r26, r26
    1f3c:	bb 27       	eor	r27, r27
    1f3e:	57 01       	movw	r10, r14
    1f40:	68 01       	movw	r12, r16
    1f42:	a8 0e       	add	r10, r24
    1f44:	b9 1e       	adc	r11, r25
    1f46:	ca 1e       	adc	r12, r26
    1f48:	db 1e       	adc	r13, r27
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	33 27       	eor	r19, r19
    1f4e:	22 27       	eor	r18, r18
    1f50:	a9 96       	adiw	r28, 0x29	; 41
    1f52:	8c ad       	ldd	r24, Y+60	; 0x3c
    1f54:	9d ad       	ldd	r25, Y+61	; 0x3d
    1f56:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f58:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f5a:	a9 97       	sbiw	r28, 0x29	; 41
    1f5c:	a0 70       	andi	r26, 0x00	; 0
    1f5e:	b0 70       	andi	r27, 0x00	; 0
    1f60:	28 0f       	add	r18, r24
    1f62:	39 1f       	adc	r19, r25
    1f64:	4a 1f       	adc	r20, r26
    1f66:	5b 1f       	adc	r21, r27
    1f68:	e9 a8       	ldd	r14, Y+49	; 0x31
    1f6a:	fa a8       	ldd	r15, Y+50	; 0x32
    1f6c:	0b a9       	ldd	r16, Y+51	; 0x33
    1f6e:	1c a9       	ldd	r17, Y+52	; 0x34
    1f70:	ea 14       	cp	r14, r10
    1f72:	fb 04       	cpc	r15, r11
    1f74:	0c 05       	cpc	r16, r12
    1f76:	1d 05       	cpc	r17, r13
    1f78:	70 f0       	brcs	.+28     	; 0x1f96 <__moddi3+0xe5c>
    1f7a:	ae 14       	cp	r10, r14
    1f7c:	bf 04       	cpc	r11, r15
    1f7e:	c0 06       	cpc	r12, r16
    1f80:	d1 06       	cpc	r13, r17
    1f82:	89 f5       	brne	.+98     	; 0x1fe6 <__moddi3+0xeac>
    1f84:	6d a9       	ldd	r22, Y+53	; 0x35
    1f86:	7e a9       	ldd	r23, Y+54	; 0x36
    1f88:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8a:	98 ad       	ldd	r25, Y+56	; 0x38
    1f8c:	62 17       	cp	r22, r18
    1f8e:	73 07       	cpc	r23, r19
    1f90:	84 07       	cpc	r24, r20
    1f92:	95 07       	cpc	r25, r21
    1f94:	40 f5       	brcc	.+80     	; 0x1fe6 <__moddi3+0xeac>
    1f96:	da 01       	movw	r26, r20
    1f98:	c9 01       	movw	r24, r18
    1f9a:	21 96       	adiw	r28, 0x01	; 1
    1f9c:	6c ac       	ldd	r6, Y+60	; 0x3c
    1f9e:	7d ac       	ldd	r7, Y+61	; 0x3d
    1fa0:	8e ac       	ldd	r8, Y+62	; 0x3e
    1fa2:	9f ac       	ldd	r9, Y+63	; 0x3f
    1fa4:	21 97       	sbiw	r28, 0x01	; 1
    1fa6:	86 19       	sub	r24, r6
    1fa8:	97 09       	sbc	r25, r7
    1faa:	a8 09       	sbc	r26, r8
    1fac:	b9 09       	sbc	r27, r9
    1fae:	25 96       	adiw	r28, 0x05	; 5
    1fb0:	ec ac       	ldd	r14, Y+60	; 0x3c
    1fb2:	fd ac       	ldd	r15, Y+61	; 0x3d
    1fb4:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fb6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fb8:	25 97       	sbiw	r28, 0x05	; 5
    1fba:	ae 18       	sub	r10, r14
    1fbc:	bf 08       	sbc	r11, r15
    1fbe:	c0 0a       	sbc	r12, r16
    1fc0:	d1 0a       	sbc	r13, r17
    1fc2:	ee 24       	eor	r14, r14
    1fc4:	ff 24       	eor	r15, r15
    1fc6:	87 01       	movw	r16, r14
    1fc8:	28 17       	cp	r18, r24
    1fca:	39 07       	cpc	r19, r25
    1fcc:	4a 07       	cpc	r20, r26
    1fce:	5b 07       	cpc	r21, r27
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__moddi3+0xea2>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	e2 2e       	mov	r14, r18
    1fd6:	f1 2c       	mov	r15, r1
    1fd8:	01 2d       	mov	r16, r1
    1fda:	11 2d       	mov	r17, r1
    1fdc:	ae 18       	sub	r10, r14
    1fde:	bf 08       	sbc	r11, r15
    1fe0:	c0 0a       	sbc	r12, r16
    1fe2:	d1 0a       	sbc	r13, r17
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <__moddi3+0xeb0>
    1fe6:	da 01       	movw	r26, r20
    1fe8:	c9 01       	movw	r24, r18
    1fea:	6d a8       	ldd	r6, Y+53	; 0x35
    1fec:	7e a8       	ldd	r7, Y+54	; 0x36
    1fee:	8f a8       	ldd	r8, Y+55	; 0x37
    1ff0:	98 ac       	ldd	r9, Y+56	; 0x38
    1ff2:	68 1a       	sub	r6, r24
    1ff4:	79 0a       	sbc	r7, r25
    1ff6:	8a 0a       	sbc	r8, r26
    1ff8:	9b 0a       	sbc	r9, r27
    1ffa:	09 a9       	ldd	r16, Y+49	; 0x31
    1ffc:	1a a9       	ldd	r17, Y+50	; 0x32
    1ffe:	2b a9       	ldd	r18, Y+51	; 0x33
    2000:	3c a9       	ldd	r19, Y+52	; 0x34
    2002:	0a 19       	sub	r16, r10
    2004:	1b 09       	sbc	r17, r11
    2006:	2c 09       	sbc	r18, r12
    2008:	3d 09       	sbc	r19, r13
    200a:	58 01       	movw	r10, r16
    200c:	69 01       	movw	r12, r18
    200e:	22 24       	eor	r2, r2
    2010:	33 24       	eor	r3, r3
    2012:	21 01       	movw	r4, r2
    2014:	2d a9       	ldd	r18, Y+53	; 0x35
    2016:	3e a9       	ldd	r19, Y+54	; 0x36
    2018:	4f a9       	ldd	r20, Y+55	; 0x37
    201a:	58 ad       	ldd	r21, Y+56	; 0x38
    201c:	26 15       	cp	r18, r6
    201e:	37 05       	cpc	r19, r7
    2020:	48 05       	cpc	r20, r8
    2022:	59 05       	cpc	r21, r9
    2024:	28 f4       	brcc	.+10     	; 0x2030 <__moddi3+0xef6>
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	28 2e       	mov	r2, r24
    202a:	31 2c       	mov	r3, r1
    202c:	41 2c       	mov	r4, r1
    202e:	51 2c       	mov	r5, r1
    2030:	86 01       	movw	r16, r12
    2032:	75 01       	movw	r14, r10
    2034:	e2 18       	sub	r14, r2
    2036:	f3 08       	sbc	r15, r3
    2038:	04 09       	sbc	r16, r4
    203a:	15 09       	sbc	r17, r5
    203c:	a8 01       	movw	r20, r16
    203e:	97 01       	movw	r18, r14
    2040:	e2 96       	adiw	r28, 0x32	; 50
    2042:	0f ac       	ldd	r0, Y+63	; 0x3f
    2044:	e2 97       	sbiw	r28, 0x32	; 50
    2046:	04 c0       	rjmp	.+8      	; 0x2050 <__moddi3+0xf16>
    2048:	22 0f       	add	r18, r18
    204a:	33 1f       	adc	r19, r19
    204c:	44 1f       	adc	r20, r20
    204e:	55 1f       	adc	r21, r21
    2050:	0a 94       	dec	r0
    2052:	d2 f7       	brpl	.-12     	; 0x2048 <__moddi3+0xf0e>
    2054:	d4 01       	movw	r26, r8
    2056:	c3 01       	movw	r24, r6
    2058:	e3 96       	adiw	r28, 0x33	; 51
    205a:	0f ac       	ldd	r0, Y+63	; 0x3f
    205c:	e3 97       	sbiw	r28, 0x33	; 51
    205e:	04 c0       	rjmp	.+8      	; 0x2068 <__moddi3+0xf2e>
    2060:	b6 95       	lsr	r27
    2062:	a7 95       	ror	r26
    2064:	97 95       	ror	r25
    2066:	87 95       	ror	r24
    2068:	0a 94       	dec	r0
    206a:	d2 f7       	brpl	.-12     	; 0x2060 <__moddi3+0xf26>
    206c:	28 2b       	or	r18, r24
    206e:	39 2b       	or	r19, r25
    2070:	4a 2b       	or	r20, r26
    2072:	5b 2b       	or	r21, r27
    2074:	29 a7       	std	Y+41, r18	; 0x29
    2076:	3a a7       	std	Y+42, r19	; 0x2a
    2078:	4b a7       	std	Y+43, r20	; 0x2b
    207a:	5c a7       	std	Y+44, r21	; 0x2c
    207c:	e3 96       	adiw	r28, 0x33	; 51
    207e:	0f ac       	ldd	r0, Y+63	; 0x3f
    2080:	e3 97       	sbiw	r28, 0x33	; 51
    2082:	04 c0       	rjmp	.+8      	; 0x208c <__moddi3+0xf52>
    2084:	16 95       	lsr	r17
    2086:	07 95       	ror	r16
    2088:	f7 94       	ror	r15
    208a:	e7 94       	ror	r14
    208c:	0a 94       	dec	r0
    208e:	d2 f7       	brpl	.-12     	; 0x2084 <__moddi3+0xf4a>
    2090:	ed a6       	std	Y+45, r14	; 0x2d
    2092:	fe a6       	std	Y+46, r15	; 0x2e
    2094:	0f a7       	std	Y+47, r16	; 0x2f
    2096:	18 ab       	std	Y+48, r17	; 0x30
    2098:	29 8b       	std	Y+17, r18	; 0x11
    209a:	8a a5       	ldd	r24, Y+42	; 0x2a
    209c:	8a 8b       	std	Y+18, r24	; 0x12
    209e:	8b a5       	ldd	r24, Y+43	; 0x2b
    20a0:	8b 8b       	std	Y+19, r24	; 0x13
    20a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a4:	8c 8b       	std	Y+20, r24	; 0x14
    20a6:	ed 8a       	std	Y+21, r14	; 0x15
    20a8:	8e a5       	ldd	r24, Y+46	; 0x2e
    20aa:	8e 8b       	std	Y+22, r24	; 0x16
    20ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    20ae:	8f 8b       	std	Y+23, r24	; 0x17
    20b0:	88 a9       	ldd	r24, Y+48	; 0x30
    20b2:	88 8f       	std	Y+24, r24	; 0x18
    20b4:	e1 96       	adiw	r28, 0x31	; 49
    20b6:	4c ad       	ldd	r20, Y+60	; 0x3c
    20b8:	5d ad       	ldd	r21, Y+61	; 0x3d
    20ba:	6e ad       	ldd	r22, Y+62	; 0x3e
    20bc:	7f ad       	ldd	r23, Y+63	; 0x3f
    20be:	e1 97       	sbiw	r28, 0x31	; 49
    20c0:	41 15       	cp	r20, r1
    20c2:	51 05       	cpc	r21, r1
    20c4:	61 05       	cpc	r22, r1
    20c6:	71 05       	cpc	r23, r1
    20c8:	09 f4       	brne	.+2      	; 0x20cc <__moddi3+0xf92>
    20ca:	67 c0       	rjmp	.+206    	; 0x219a <__moddi3+0x1060>
    20cc:	89 89       	ldd	r24, Y+17	; 0x11
    20ce:	2a 89       	ldd	r18, Y+18	; 0x12
    20d0:	3b 89       	ldd	r19, Y+19	; 0x13
    20d2:	4c 89       	ldd	r20, Y+20	; 0x14
    20d4:	5d 89       	ldd	r21, Y+21	; 0x15
    20d6:	ae 89       	ldd	r26, Y+22	; 0x16
    20d8:	bf 89       	ldd	r27, Y+23	; 0x17
    20da:	18 8d       	ldd	r17, Y+24	; 0x18
    20dc:	f8 2f       	mov	r31, r24
    20de:	f1 95       	neg	r31
    20e0:	91 e0       	ldi	r25, 0x01	; 1
    20e2:	1f 16       	cp	r1, r31
    20e4:	08 f0       	brcs	.+2      	; 0x20e8 <__moddi3+0xfae>
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	82 2f       	mov	r24, r18
    20ea:	81 95       	neg	r24
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	18 16       	cp	r1, r24
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__moddi3+0xfba>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	e8 2f       	mov	r30, r24
    20f6:	e9 1b       	sub	r30, r25
    20f8:	91 e0       	ldi	r25, 0x01	; 1
    20fa:	8e 17       	cp	r24, r30
    20fc:	08 f0       	brcs	.+2      	; 0x2100 <__moddi3+0xfc6>
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	29 2b       	or	r18, r25
    2102:	83 2f       	mov	r24, r19
    2104:	81 95       	neg	r24
    2106:	31 e0       	ldi	r19, 0x01	; 1
    2108:	18 16       	cp	r1, r24
    210a:	08 f0       	brcs	.+2      	; 0x210e <__moddi3+0xfd4>
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	78 2f       	mov	r23, r24
    2110:	72 1b       	sub	r23, r18
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	87 17       	cp	r24, r23
    2116:	08 f0       	brcs	.+2      	; 0x211a <__moddi3+0xfe0>
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	39 2b       	or	r19, r25
    211c:	84 2f       	mov	r24, r20
    211e:	81 95       	neg	r24
    2120:	21 e0       	ldi	r18, 0x01	; 1
    2122:	18 16       	cp	r1, r24
    2124:	08 f0       	brcs	.+2      	; 0x2128 <__moddi3+0xfee>
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	68 2f       	mov	r22, r24
    212a:	63 1b       	sub	r22, r19
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	86 17       	cp	r24, r22
    2130:	08 f0       	brcs	.+2      	; 0x2134 <__moddi3+0xffa>
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	29 2b       	or	r18, r25
    2136:	85 2f       	mov	r24, r21
    2138:	81 95       	neg	r24
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	18 16       	cp	r1, r24
    213e:	08 f0       	brcs	.+2      	; 0x2142 <__moddi3+0x1008>
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	58 2f       	mov	r21, r24
    2144:	52 1b       	sub	r21, r18
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	85 17       	cp	r24, r21
    214a:	08 f0       	brcs	.+2      	; 0x214e <__moddi3+0x1014>
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	39 2b       	or	r19, r25
    2150:	8a 2f       	mov	r24, r26
    2152:	81 95       	neg	r24
    2154:	21 e0       	ldi	r18, 0x01	; 1
    2156:	18 16       	cp	r1, r24
    2158:	08 f0       	brcs	.+2      	; 0x215c <__moddi3+0x1022>
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	48 2f       	mov	r20, r24
    215e:	43 1b       	sub	r20, r19
    2160:	91 e0       	ldi	r25, 0x01	; 1
    2162:	84 17       	cp	r24, r20
    2164:	08 f0       	brcs	.+2      	; 0x2168 <__moddi3+0x102e>
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	29 2b       	or	r18, r25
    216a:	8b 2f       	mov	r24, r27
    216c:	81 95       	neg	r24
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	18 16       	cp	r1, r24
    2172:	08 f0       	brcs	.+2      	; 0x2176 <__moddi3+0x103c>
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	38 2f       	mov	r19, r24
    2178:	32 1b       	sub	r19, r18
    217a:	21 e0       	ldi	r18, 0x01	; 1
    217c:	83 17       	cp	r24, r19
    217e:	08 f0       	brcs	.+2      	; 0x2182 <__moddi3+0x1048>
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	92 2b       	or	r25, r18
    2184:	81 2f       	mov	r24, r17
    2186:	81 95       	neg	r24
    2188:	89 1b       	sub	r24, r25
    218a:	f9 8b       	std	Y+17, r31	; 0x11
    218c:	ea 8b       	std	Y+18, r30	; 0x12
    218e:	7b 8b       	std	Y+19, r23	; 0x13
    2190:	6c 8b       	std	Y+20, r22	; 0x14
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4e 8b       	std	Y+22, r20	; 0x16
    2196:	3f 8b       	std	Y+23, r19	; 0x17
    2198:	88 8f       	std	Y+24, r24	; 0x18
    219a:	29 89       	ldd	r18, Y+17	; 0x11
    219c:	3a 89       	ldd	r19, Y+18	; 0x12
    219e:	4b 89       	ldd	r20, Y+19	; 0x13
    21a0:	5c 89       	ldd	r21, Y+20	; 0x14
    21a2:	6d 89       	ldd	r22, Y+21	; 0x15
    21a4:	7e 89       	ldd	r23, Y+22	; 0x16
    21a6:	8f 89       	ldd	r24, Y+23	; 0x17
    21a8:	98 8d       	ldd	r25, Y+24	; 0x18
    21aa:	c9 58       	subi	r28, 0x89	; 137
    21ac:	df 4f       	sbci	r29, 0xFF	; 255
    21ae:	e2 e1       	ldi	r30, 0x12	; 18
    21b0:	0c 94 c2 3a 	jmp	0x7584	; 0x7584 <__epilogue_restores__>

000021b4 <_fpadd_parts>:
    21b4:	a0 e0       	ldi	r26, 0x00	; 0
    21b6:	b0 e0       	ldi	r27, 0x00	; 0
    21b8:	e0 ee       	ldi	r30, 0xE0	; 224
    21ba:	f0 e1       	ldi	r31, 0x10	; 16
    21bc:	0c 94 a6 3a 	jmp	0x754c	; 0x754c <__prologue_saves__>
    21c0:	dc 01       	movw	r26, r24
    21c2:	2b 01       	movw	r4, r22
    21c4:	fa 01       	movw	r30, r20
    21c6:	9c 91       	ld	r25, X
    21c8:	92 30       	cpi	r25, 0x02	; 2
    21ca:	08 f4       	brcc	.+2      	; 0x21ce <_fpadd_parts+0x1a>
    21cc:	39 c1       	rjmp	.+626    	; 0x2440 <_fpadd_parts+0x28c>
    21ce:	eb 01       	movw	r28, r22
    21d0:	88 81       	ld	r24, Y
    21d2:	82 30       	cpi	r24, 0x02	; 2
    21d4:	08 f4       	brcc	.+2      	; 0x21d8 <_fpadd_parts+0x24>
    21d6:	33 c1       	rjmp	.+614    	; 0x243e <_fpadd_parts+0x28a>
    21d8:	94 30       	cpi	r25, 0x04	; 4
    21da:	69 f4       	brne	.+26     	; 0x21f6 <_fpadd_parts+0x42>
    21dc:	84 30       	cpi	r24, 0x04	; 4
    21de:	09 f0       	breq	.+2      	; 0x21e2 <_fpadd_parts+0x2e>
    21e0:	2f c1       	rjmp	.+606    	; 0x2440 <_fpadd_parts+0x28c>
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 91       	ld	r25, X
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	89 81       	ldd	r24, Y+1	; 0x01
    21ea:	98 17       	cp	r25, r24
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <_fpadd_parts+0x3c>
    21ee:	28 c1       	rjmp	.+592    	; 0x2440 <_fpadd_parts+0x28c>
    21f0:	a1 e0       	ldi	r26, 0x01	; 1
    21f2:	b1 e0       	ldi	r27, 0x01	; 1
    21f4:	25 c1       	rjmp	.+586    	; 0x2440 <_fpadd_parts+0x28c>
    21f6:	84 30       	cpi	r24, 0x04	; 4
    21f8:	09 f4       	brne	.+2      	; 0x21fc <_fpadd_parts+0x48>
    21fa:	21 c1       	rjmp	.+578    	; 0x243e <_fpadd_parts+0x28a>
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	a9 f4       	brne	.+42     	; 0x222a <_fpadd_parts+0x76>
    2200:	92 30       	cpi	r25, 0x02	; 2
    2202:	09 f0       	breq	.+2      	; 0x2206 <_fpadd_parts+0x52>
    2204:	1d c1       	rjmp	.+570    	; 0x2440 <_fpadd_parts+0x28c>
    2206:	9a 01       	movw	r18, r20
    2208:	ad 01       	movw	r20, r26
    220a:	88 e0       	ldi	r24, 0x08	; 8
    220c:	ea 01       	movw	r28, r20
    220e:	09 90       	ld	r0, Y+
    2210:	ae 01       	movw	r20, r28
    2212:	e9 01       	movw	r28, r18
    2214:	09 92       	st	Y+, r0
    2216:	9e 01       	movw	r18, r28
    2218:	81 50       	subi	r24, 0x01	; 1
    221a:	c1 f7       	brne	.-16     	; 0x220c <_fpadd_parts+0x58>
    221c:	e2 01       	movw	r28, r4
    221e:	89 81       	ldd	r24, Y+1	; 0x01
    2220:	11 96       	adiw	r26, 0x01	; 1
    2222:	9c 91       	ld	r25, X
    2224:	89 23       	and	r24, r25
    2226:	81 83       	std	Z+1, r24	; 0x01
    2228:	08 c1       	rjmp	.+528    	; 0x243a <_fpadd_parts+0x286>
    222a:	92 30       	cpi	r25, 0x02	; 2
    222c:	09 f4       	brne	.+2      	; 0x2230 <_fpadd_parts+0x7c>
    222e:	07 c1       	rjmp	.+526    	; 0x243e <_fpadd_parts+0x28a>
    2230:	12 96       	adiw	r26, 0x02	; 2
    2232:	2d 90       	ld	r2, X+
    2234:	3c 90       	ld	r3, X
    2236:	13 97       	sbiw	r26, 0x03	; 3
    2238:	eb 01       	movw	r28, r22
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	14 96       	adiw	r26, 0x04	; 4
    2240:	ad 90       	ld	r10, X+
    2242:	bd 90       	ld	r11, X+
    2244:	cd 90       	ld	r12, X+
    2246:	dc 90       	ld	r13, X
    2248:	17 97       	sbiw	r26, 0x07	; 7
    224a:	ec 80       	ldd	r14, Y+4	; 0x04
    224c:	fd 80       	ldd	r15, Y+5	; 0x05
    224e:	0e 81       	ldd	r16, Y+6	; 0x06
    2250:	1f 81       	ldd	r17, Y+7	; 0x07
    2252:	91 01       	movw	r18, r2
    2254:	28 1b       	sub	r18, r24
    2256:	39 0b       	sbc	r19, r25
    2258:	b9 01       	movw	r22, r18
    225a:	37 ff       	sbrs	r19, 7
    225c:	04 c0       	rjmp	.+8      	; 0x2266 <_fpadd_parts+0xb2>
    225e:	66 27       	eor	r22, r22
    2260:	77 27       	eor	r23, r23
    2262:	62 1b       	sub	r22, r18
    2264:	73 0b       	sbc	r23, r19
    2266:	60 32       	cpi	r22, 0x20	; 32
    2268:	71 05       	cpc	r23, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <_fpadd_parts+0xba>
    226c:	61 c0       	rjmp	.+194    	; 0x2330 <_fpadd_parts+0x17c>
    226e:	12 16       	cp	r1, r18
    2270:	13 06       	cpc	r1, r19
    2272:	6c f5       	brge	.+90     	; 0x22ce <_fpadd_parts+0x11a>
    2274:	37 01       	movw	r6, r14
    2276:	48 01       	movw	r8, r16
    2278:	06 2e       	mov	r0, r22
    227a:	04 c0       	rjmp	.+8      	; 0x2284 <_fpadd_parts+0xd0>
    227c:	96 94       	lsr	r9
    227e:	87 94       	ror	r8
    2280:	77 94       	ror	r7
    2282:	67 94       	ror	r6
    2284:	0a 94       	dec	r0
    2286:	d2 f7       	brpl	.-12     	; 0x227c <_fpadd_parts+0xc8>
    2288:	21 e0       	ldi	r18, 0x01	; 1
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e0       	ldi	r20, 0x00	; 0
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	04 c0       	rjmp	.+8      	; 0x229a <_fpadd_parts+0xe6>
    2292:	22 0f       	add	r18, r18
    2294:	33 1f       	adc	r19, r19
    2296:	44 1f       	adc	r20, r20
    2298:	55 1f       	adc	r21, r21
    229a:	6a 95       	dec	r22
    229c:	d2 f7       	brpl	.-12     	; 0x2292 <_fpadd_parts+0xde>
    229e:	21 50       	subi	r18, 0x01	; 1
    22a0:	30 40       	sbci	r19, 0x00	; 0
    22a2:	40 40       	sbci	r20, 0x00	; 0
    22a4:	50 40       	sbci	r21, 0x00	; 0
    22a6:	2e 21       	and	r18, r14
    22a8:	3f 21       	and	r19, r15
    22aa:	40 23       	and	r20, r16
    22ac:	51 23       	and	r21, r17
    22ae:	21 15       	cp	r18, r1
    22b0:	31 05       	cpc	r19, r1
    22b2:	41 05       	cpc	r20, r1
    22b4:	51 05       	cpc	r21, r1
    22b6:	21 f0       	breq	.+8      	; 0x22c0 <_fpadd_parts+0x10c>
    22b8:	21 e0       	ldi	r18, 0x01	; 1
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	79 01       	movw	r14, r18
    22c2:	8a 01       	movw	r16, r20
    22c4:	e6 28       	or	r14, r6
    22c6:	f7 28       	or	r15, r7
    22c8:	08 29       	or	r16, r8
    22ca:	19 29       	or	r17, r9
    22cc:	3c c0       	rjmp	.+120    	; 0x2346 <_fpadd_parts+0x192>
    22ce:	23 2b       	or	r18, r19
    22d0:	d1 f1       	breq	.+116    	; 0x2346 <_fpadd_parts+0x192>
    22d2:	26 0e       	add	r2, r22
    22d4:	37 1e       	adc	r3, r23
    22d6:	35 01       	movw	r6, r10
    22d8:	46 01       	movw	r8, r12
    22da:	06 2e       	mov	r0, r22
    22dc:	04 c0       	rjmp	.+8      	; 0x22e6 <_fpadd_parts+0x132>
    22de:	96 94       	lsr	r9
    22e0:	87 94       	ror	r8
    22e2:	77 94       	ror	r7
    22e4:	67 94       	ror	r6
    22e6:	0a 94       	dec	r0
    22e8:	d2 f7       	brpl	.-12     	; 0x22de <_fpadd_parts+0x12a>
    22ea:	21 e0       	ldi	r18, 0x01	; 1
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e0       	ldi	r20, 0x00	; 0
    22f0:	50 e0       	ldi	r21, 0x00	; 0
    22f2:	04 c0       	rjmp	.+8      	; 0x22fc <_fpadd_parts+0x148>
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	44 1f       	adc	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	6a 95       	dec	r22
    22fe:	d2 f7       	brpl	.-12     	; 0x22f4 <_fpadd_parts+0x140>
    2300:	21 50       	subi	r18, 0x01	; 1
    2302:	30 40       	sbci	r19, 0x00	; 0
    2304:	40 40       	sbci	r20, 0x00	; 0
    2306:	50 40       	sbci	r21, 0x00	; 0
    2308:	2a 21       	and	r18, r10
    230a:	3b 21       	and	r19, r11
    230c:	4c 21       	and	r20, r12
    230e:	5d 21       	and	r21, r13
    2310:	21 15       	cp	r18, r1
    2312:	31 05       	cpc	r19, r1
    2314:	41 05       	cpc	r20, r1
    2316:	51 05       	cpc	r21, r1
    2318:	21 f0       	breq	.+8      	; 0x2322 <_fpadd_parts+0x16e>
    231a:	21 e0       	ldi	r18, 0x01	; 1
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	59 01       	movw	r10, r18
    2324:	6a 01       	movw	r12, r20
    2326:	a6 28       	or	r10, r6
    2328:	b7 28       	or	r11, r7
    232a:	c8 28       	or	r12, r8
    232c:	d9 28       	or	r13, r9
    232e:	0b c0       	rjmp	.+22     	; 0x2346 <_fpadd_parts+0x192>
    2330:	82 15       	cp	r24, r2
    2332:	93 05       	cpc	r25, r3
    2334:	2c f0       	brlt	.+10     	; 0x2340 <_fpadd_parts+0x18c>
    2336:	1c 01       	movw	r2, r24
    2338:	aa 24       	eor	r10, r10
    233a:	bb 24       	eor	r11, r11
    233c:	65 01       	movw	r12, r10
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <_fpadd_parts+0x192>
    2340:	ee 24       	eor	r14, r14
    2342:	ff 24       	eor	r15, r15
    2344:	87 01       	movw	r16, r14
    2346:	11 96       	adiw	r26, 0x01	; 1
    2348:	9c 91       	ld	r25, X
    234a:	d2 01       	movw	r26, r4
    234c:	11 96       	adiw	r26, 0x01	; 1
    234e:	8c 91       	ld	r24, X
    2350:	98 17       	cp	r25, r24
    2352:	09 f4       	brne	.+2      	; 0x2356 <_fpadd_parts+0x1a2>
    2354:	45 c0       	rjmp	.+138    	; 0x23e0 <_fpadd_parts+0x22c>
    2356:	99 23       	and	r25, r25
    2358:	39 f0       	breq	.+14     	; 0x2368 <_fpadd_parts+0x1b4>
    235a:	a8 01       	movw	r20, r16
    235c:	97 01       	movw	r18, r14
    235e:	2a 19       	sub	r18, r10
    2360:	3b 09       	sbc	r19, r11
    2362:	4c 09       	sbc	r20, r12
    2364:	5d 09       	sbc	r21, r13
    2366:	06 c0       	rjmp	.+12     	; 0x2374 <_fpadd_parts+0x1c0>
    2368:	a6 01       	movw	r20, r12
    236a:	95 01       	movw	r18, r10
    236c:	2e 19       	sub	r18, r14
    236e:	3f 09       	sbc	r19, r15
    2370:	40 0b       	sbc	r20, r16
    2372:	51 0b       	sbc	r21, r17
    2374:	57 fd       	sbrc	r21, 7
    2376:	08 c0       	rjmp	.+16     	; 0x2388 <_fpadd_parts+0x1d4>
    2378:	11 82       	std	Z+1, r1	; 0x01
    237a:	33 82       	std	Z+3, r3	; 0x03
    237c:	22 82       	std	Z+2, r2	; 0x02
    237e:	24 83       	std	Z+4, r18	; 0x04
    2380:	35 83       	std	Z+5, r19	; 0x05
    2382:	46 83       	std	Z+6, r20	; 0x06
    2384:	57 83       	std	Z+7, r21	; 0x07
    2386:	1d c0       	rjmp	.+58     	; 0x23c2 <_fpadd_parts+0x20e>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	81 83       	std	Z+1, r24	; 0x01
    238c:	33 82       	std	Z+3, r3	; 0x03
    238e:	22 82       	std	Z+2, r2	; 0x02
    2390:	88 27       	eor	r24, r24
    2392:	99 27       	eor	r25, r25
    2394:	dc 01       	movw	r26, r24
    2396:	82 1b       	sub	r24, r18
    2398:	93 0b       	sbc	r25, r19
    239a:	a4 0b       	sbc	r26, r20
    239c:	b5 0b       	sbc	r27, r21
    239e:	84 83       	std	Z+4, r24	; 0x04
    23a0:	95 83       	std	Z+5, r25	; 0x05
    23a2:	a6 83       	std	Z+6, r26	; 0x06
    23a4:	b7 83       	std	Z+7, r27	; 0x07
    23a6:	0d c0       	rjmp	.+26     	; 0x23c2 <_fpadd_parts+0x20e>
    23a8:	22 0f       	add	r18, r18
    23aa:	33 1f       	adc	r19, r19
    23ac:	44 1f       	adc	r20, r20
    23ae:	55 1f       	adc	r21, r21
    23b0:	24 83       	std	Z+4, r18	; 0x04
    23b2:	35 83       	std	Z+5, r19	; 0x05
    23b4:	46 83       	std	Z+6, r20	; 0x06
    23b6:	57 83       	std	Z+7, r21	; 0x07
    23b8:	82 81       	ldd	r24, Z+2	; 0x02
    23ba:	93 81       	ldd	r25, Z+3	; 0x03
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	93 83       	std	Z+3, r25	; 0x03
    23c0:	82 83       	std	Z+2, r24	; 0x02
    23c2:	24 81       	ldd	r18, Z+4	; 0x04
    23c4:	35 81       	ldd	r19, Z+5	; 0x05
    23c6:	46 81       	ldd	r20, Z+6	; 0x06
    23c8:	57 81       	ldd	r21, Z+7	; 0x07
    23ca:	da 01       	movw	r26, r20
    23cc:	c9 01       	movw	r24, r18
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	a1 09       	sbc	r26, r1
    23d2:	b1 09       	sbc	r27, r1
    23d4:	8f 5f       	subi	r24, 0xFF	; 255
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	af 4f       	sbci	r26, 0xFF	; 255
    23da:	bf 43       	sbci	r27, 0x3F	; 63
    23dc:	28 f3       	brcs	.-54     	; 0x23a8 <_fpadd_parts+0x1f4>
    23de:	0b c0       	rjmp	.+22     	; 0x23f6 <_fpadd_parts+0x242>
    23e0:	91 83       	std	Z+1, r25	; 0x01
    23e2:	33 82       	std	Z+3, r3	; 0x03
    23e4:	22 82       	std	Z+2, r2	; 0x02
    23e6:	ea 0c       	add	r14, r10
    23e8:	fb 1c       	adc	r15, r11
    23ea:	0c 1d       	adc	r16, r12
    23ec:	1d 1d       	adc	r17, r13
    23ee:	e4 82       	std	Z+4, r14	; 0x04
    23f0:	f5 82       	std	Z+5, r15	; 0x05
    23f2:	06 83       	std	Z+6, r16	; 0x06
    23f4:	17 83       	std	Z+7, r17	; 0x07
    23f6:	83 e0       	ldi	r24, 0x03	; 3
    23f8:	80 83       	st	Z, r24
    23fa:	24 81       	ldd	r18, Z+4	; 0x04
    23fc:	35 81       	ldd	r19, Z+5	; 0x05
    23fe:	46 81       	ldd	r20, Z+6	; 0x06
    2400:	57 81       	ldd	r21, Z+7	; 0x07
    2402:	57 ff       	sbrs	r21, 7
    2404:	1a c0       	rjmp	.+52     	; 0x243a <_fpadd_parts+0x286>
    2406:	c9 01       	movw	r24, r18
    2408:	aa 27       	eor	r26, r26
    240a:	97 fd       	sbrc	r25, 7
    240c:	a0 95       	com	r26
    240e:	ba 2f       	mov	r27, r26
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	a0 70       	andi	r26, 0x00	; 0
    2416:	b0 70       	andi	r27, 0x00	; 0
    2418:	56 95       	lsr	r21
    241a:	47 95       	ror	r20
    241c:	37 95       	ror	r19
    241e:	27 95       	ror	r18
    2420:	82 2b       	or	r24, r18
    2422:	93 2b       	or	r25, r19
    2424:	a4 2b       	or	r26, r20
    2426:	b5 2b       	or	r27, r21
    2428:	84 83       	std	Z+4, r24	; 0x04
    242a:	95 83       	std	Z+5, r25	; 0x05
    242c:	a6 83       	std	Z+6, r26	; 0x06
    242e:	b7 83       	std	Z+7, r27	; 0x07
    2430:	82 81       	ldd	r24, Z+2	; 0x02
    2432:	93 81       	ldd	r25, Z+3	; 0x03
    2434:	01 96       	adiw	r24, 0x01	; 1
    2436:	93 83       	std	Z+3, r25	; 0x03
    2438:	82 83       	std	Z+2, r24	; 0x02
    243a:	df 01       	movw	r26, r30
    243c:	01 c0       	rjmp	.+2      	; 0x2440 <_fpadd_parts+0x28c>
    243e:	d2 01       	movw	r26, r4
    2440:	cd 01       	movw	r24, r26
    2442:	cd b7       	in	r28, 0x3d	; 61
    2444:	de b7       	in	r29, 0x3e	; 62
    2446:	e2 e1       	ldi	r30, 0x12	; 18
    2448:	0c 94 c2 3a 	jmp	0x7584	; 0x7584 <__epilogue_restores__>

0000244c <__subsf3>:
    244c:	a0 e2       	ldi	r26, 0x20	; 32
    244e:	b0 e0       	ldi	r27, 0x00	; 0
    2450:	ec e2       	ldi	r30, 0x2C	; 44
    2452:	f2 e1       	ldi	r31, 0x12	; 18
    2454:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__prologue_saves__+0x18>
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	7a 83       	std	Y+2, r23	; 0x02
    245c:	8b 83       	std	Y+3, r24	; 0x03
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	2d 83       	std	Y+5, r18	; 0x05
    2462:	3e 83       	std	Y+6, r19	; 0x06
    2464:	4f 83       	std	Y+7, r20	; 0x07
    2466:	58 87       	std	Y+8, r21	; 0x08
    2468:	e9 e0       	ldi	r30, 0x09	; 9
    246a:	ee 2e       	mov	r14, r30
    246c:	f1 2c       	mov	r15, r1
    246e:	ec 0e       	add	r14, r28
    2470:	fd 1e       	adc	r15, r29
    2472:	ce 01       	movw	r24, r28
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	b7 01       	movw	r22, r14
    2478:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    247c:	8e 01       	movw	r16, r28
    247e:	0f 5e       	subi	r16, 0xEF	; 239
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	ce 01       	movw	r24, r28
    2484:	05 96       	adiw	r24, 0x05	; 5
    2486:	b8 01       	movw	r22, r16
    2488:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    248c:	8a 89       	ldd	r24, Y+18	; 0x12
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	89 27       	eor	r24, r25
    2492:	8a 8b       	std	Y+18, r24	; 0x12
    2494:	c7 01       	movw	r24, r14
    2496:	b8 01       	movw	r22, r16
    2498:	ae 01       	movw	r20, r28
    249a:	47 5e       	subi	r20, 0xE7	; 231
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24a2:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__pack_f>
    24a6:	a0 96       	adiw	r28, 0x20	; 32
    24a8:	e6 e0       	ldi	r30, 0x06	; 6
    24aa:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <__epilogue_restores__+0x18>

000024ae <__addsf3>:
    24ae:	a0 e2       	ldi	r26, 0x20	; 32
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	ed e5       	ldi	r30, 0x5D	; 93
    24b4:	f2 e1       	ldi	r31, 0x12	; 18
    24b6:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__prologue_saves__+0x18>
    24ba:	69 83       	std	Y+1, r22	; 0x01
    24bc:	7a 83       	std	Y+2, r23	; 0x02
    24be:	8b 83       	std	Y+3, r24	; 0x03
    24c0:	9c 83       	std	Y+4, r25	; 0x04
    24c2:	2d 83       	std	Y+5, r18	; 0x05
    24c4:	3e 83       	std	Y+6, r19	; 0x06
    24c6:	4f 83       	std	Y+7, r20	; 0x07
    24c8:	58 87       	std	Y+8, r21	; 0x08
    24ca:	f9 e0       	ldi	r31, 0x09	; 9
    24cc:	ef 2e       	mov	r14, r31
    24ce:	f1 2c       	mov	r15, r1
    24d0:	ec 0e       	add	r14, r28
    24d2:	fd 1e       	adc	r15, r29
    24d4:	ce 01       	movw	r24, r28
    24d6:	01 96       	adiw	r24, 0x01	; 1
    24d8:	b7 01       	movw	r22, r14
    24da:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    24de:	8e 01       	movw	r16, r28
    24e0:	0f 5e       	subi	r16, 0xEF	; 239
    24e2:	1f 4f       	sbci	r17, 0xFF	; 255
    24e4:	ce 01       	movw	r24, r28
    24e6:	05 96       	adiw	r24, 0x05	; 5
    24e8:	b8 01       	movw	r22, r16
    24ea:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    24ee:	c7 01       	movw	r24, r14
    24f0:	b8 01       	movw	r22, r16
    24f2:	ae 01       	movw	r20, r28
    24f4:	47 5e       	subi	r20, 0xE7	; 231
    24f6:	5f 4f       	sbci	r21, 0xFF	; 255
    24f8:	0e 94 da 10 	call	0x21b4	; 0x21b4 <_fpadd_parts>
    24fc:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__pack_f>
    2500:	a0 96       	adiw	r28, 0x20	; 32
    2502:	e6 e0       	ldi	r30, 0x06	; 6
    2504:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <__epilogue_restores__+0x18>

00002508 <__mulsf3>:
    2508:	a0 e2       	ldi	r26, 0x20	; 32
    250a:	b0 e0       	ldi	r27, 0x00	; 0
    250c:	ea e8       	ldi	r30, 0x8A	; 138
    250e:	f2 e1       	ldi	r31, 0x12	; 18
    2510:	0c 94 a6 3a 	jmp	0x754c	; 0x754c <__prologue_saves__>
    2514:	69 83       	std	Y+1, r22	; 0x01
    2516:	7a 83       	std	Y+2, r23	; 0x02
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	9c 83       	std	Y+4, r25	; 0x04
    251c:	2d 83       	std	Y+5, r18	; 0x05
    251e:	3e 83       	std	Y+6, r19	; 0x06
    2520:	4f 83       	std	Y+7, r20	; 0x07
    2522:	58 87       	std	Y+8, r21	; 0x08
    2524:	ce 01       	movw	r24, r28
    2526:	01 96       	adiw	r24, 0x01	; 1
    2528:	be 01       	movw	r22, r28
    252a:	67 5f       	subi	r22, 0xF7	; 247
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    2532:	ce 01       	movw	r24, r28
    2534:	05 96       	adiw	r24, 0x05	; 5
    2536:	be 01       	movw	r22, r28
    2538:	6f 5e       	subi	r22, 0xEF	; 239
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    2540:	99 85       	ldd	r25, Y+9	; 0x09
    2542:	92 30       	cpi	r25, 0x02	; 2
    2544:	88 f0       	brcs	.+34     	; 0x2568 <__mulsf3+0x60>
    2546:	89 89       	ldd	r24, Y+17	; 0x11
    2548:	82 30       	cpi	r24, 0x02	; 2
    254a:	c8 f0       	brcs	.+50     	; 0x257e <__mulsf3+0x76>
    254c:	94 30       	cpi	r25, 0x04	; 4
    254e:	19 f4       	brne	.+6      	; 0x2556 <__mulsf3+0x4e>
    2550:	82 30       	cpi	r24, 0x02	; 2
    2552:	51 f4       	brne	.+20     	; 0x2568 <__mulsf3+0x60>
    2554:	04 c0       	rjmp	.+8      	; 0x255e <__mulsf3+0x56>
    2556:	84 30       	cpi	r24, 0x04	; 4
    2558:	29 f4       	brne	.+10     	; 0x2564 <__mulsf3+0x5c>
    255a:	92 30       	cpi	r25, 0x02	; 2
    255c:	81 f4       	brne	.+32     	; 0x257e <__mulsf3+0x76>
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	91 e0       	ldi	r25, 0x01	; 1
    2562:	c6 c0       	rjmp	.+396    	; 0x26f0 <__mulsf3+0x1e8>
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	49 f4       	brne	.+18     	; 0x257a <__mulsf3+0x72>
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	8a 89       	ldd	r24, Y+18	; 0x12
    256e:	98 13       	cpse	r25, r24
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	2a 87       	std	Y+10, r18	; 0x0a
    2574:	ce 01       	movw	r24, r28
    2576:	09 96       	adiw	r24, 0x09	; 9
    2578:	bb c0       	rjmp	.+374    	; 0x26f0 <__mulsf3+0x1e8>
    257a:	82 30       	cpi	r24, 0x02	; 2
    257c:	49 f4       	brne	.+18     	; 0x2590 <__mulsf3+0x88>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	8a 89       	ldd	r24, Y+18	; 0x12
    2584:	98 13       	cpse	r25, r24
    2586:	21 e0       	ldi	r18, 0x01	; 1
    2588:	2a 8b       	std	Y+18, r18	; 0x12
    258a:	ce 01       	movw	r24, r28
    258c:	41 96       	adiw	r24, 0x11	; 17
    258e:	b0 c0       	rjmp	.+352    	; 0x26f0 <__mulsf3+0x1e8>
    2590:	2d 84       	ldd	r2, Y+13	; 0x0d
    2592:	3e 84       	ldd	r3, Y+14	; 0x0e
    2594:	4f 84       	ldd	r4, Y+15	; 0x0f
    2596:	58 88       	ldd	r5, Y+16	; 0x10
    2598:	6d 88       	ldd	r6, Y+21	; 0x15
    259a:	7e 88       	ldd	r7, Y+22	; 0x16
    259c:	8f 88       	ldd	r8, Y+23	; 0x17
    259e:	98 8c       	ldd	r9, Y+24	; 0x18
    25a0:	ee 24       	eor	r14, r14
    25a2:	ff 24       	eor	r15, r15
    25a4:	87 01       	movw	r16, r14
    25a6:	aa 24       	eor	r10, r10
    25a8:	bb 24       	eor	r11, r11
    25aa:	65 01       	movw	r12, r10
    25ac:	40 e0       	ldi	r20, 0x00	; 0
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	60 e0       	ldi	r22, 0x00	; 0
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	e0 e0       	ldi	r30, 0x00	; 0
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	c1 01       	movw	r24, r2
    25ba:	81 70       	andi	r24, 0x01	; 1
    25bc:	90 70       	andi	r25, 0x00	; 0
    25be:	89 2b       	or	r24, r25
    25c0:	e9 f0       	breq	.+58     	; 0x25fc <__mulsf3+0xf4>
    25c2:	e6 0c       	add	r14, r6
    25c4:	f7 1c       	adc	r15, r7
    25c6:	08 1d       	adc	r16, r8
    25c8:	19 1d       	adc	r17, r9
    25ca:	9a 01       	movw	r18, r20
    25cc:	ab 01       	movw	r20, r22
    25ce:	2a 0d       	add	r18, r10
    25d0:	3b 1d       	adc	r19, r11
    25d2:	4c 1d       	adc	r20, r12
    25d4:	5d 1d       	adc	r21, r13
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e0       	ldi	r26, 0x00	; 0
    25dc:	b0 e0       	ldi	r27, 0x00	; 0
    25de:	e6 14       	cp	r14, r6
    25e0:	f7 04       	cpc	r15, r7
    25e2:	08 05       	cpc	r16, r8
    25e4:	19 05       	cpc	r17, r9
    25e6:	20 f4       	brcc	.+8      	; 0x25f0 <__mulsf3+0xe8>
    25e8:	81 e0       	ldi	r24, 0x01	; 1
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e0       	ldi	r26, 0x00	; 0
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	ba 01       	movw	r22, r20
    25f2:	a9 01       	movw	r20, r18
    25f4:	48 0f       	add	r20, r24
    25f6:	59 1f       	adc	r21, r25
    25f8:	6a 1f       	adc	r22, r26
    25fa:	7b 1f       	adc	r23, r27
    25fc:	aa 0c       	add	r10, r10
    25fe:	bb 1c       	adc	r11, r11
    2600:	cc 1c       	adc	r12, r12
    2602:	dd 1c       	adc	r13, r13
    2604:	97 fe       	sbrs	r9, 7
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <__mulsf3+0x110>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	a8 2a       	or	r10, r24
    2612:	b9 2a       	or	r11, r25
    2614:	ca 2a       	or	r12, r26
    2616:	db 2a       	or	r13, r27
    2618:	31 96       	adiw	r30, 0x01	; 1
    261a:	e0 32       	cpi	r30, 0x20	; 32
    261c:	f1 05       	cpc	r31, r1
    261e:	49 f0       	breq	.+18     	; 0x2632 <__mulsf3+0x12a>
    2620:	66 0c       	add	r6, r6
    2622:	77 1c       	adc	r7, r7
    2624:	88 1c       	adc	r8, r8
    2626:	99 1c       	adc	r9, r9
    2628:	56 94       	lsr	r5
    262a:	47 94       	ror	r4
    262c:	37 94       	ror	r3
    262e:	27 94       	ror	r2
    2630:	c3 cf       	rjmp	.-122    	; 0x25b8 <__mulsf3+0xb0>
    2632:	fa 85       	ldd	r31, Y+10	; 0x0a
    2634:	ea 89       	ldd	r30, Y+18	; 0x12
    2636:	2b 89       	ldd	r18, Y+19	; 0x13
    2638:	3c 89       	ldd	r19, Y+20	; 0x14
    263a:	8b 85       	ldd	r24, Y+11	; 0x0b
    263c:	9c 85       	ldd	r25, Y+12	; 0x0c
    263e:	28 0f       	add	r18, r24
    2640:	39 1f       	adc	r19, r25
    2642:	2e 5f       	subi	r18, 0xFE	; 254
    2644:	3f 4f       	sbci	r19, 0xFF	; 255
    2646:	17 c0       	rjmp	.+46     	; 0x2676 <__mulsf3+0x16e>
    2648:	ca 01       	movw	r24, r20
    264a:	81 70       	andi	r24, 0x01	; 1
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	89 2b       	or	r24, r25
    2650:	61 f0       	breq	.+24     	; 0x266a <__mulsf3+0x162>
    2652:	16 95       	lsr	r17
    2654:	07 95       	ror	r16
    2656:	f7 94       	ror	r15
    2658:	e7 94       	ror	r14
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a0 e0       	ldi	r26, 0x00	; 0
    2660:	b0 e8       	ldi	r27, 0x80	; 128
    2662:	e8 2a       	or	r14, r24
    2664:	f9 2a       	or	r15, r25
    2666:	0a 2b       	or	r16, r26
    2668:	1b 2b       	or	r17, r27
    266a:	76 95       	lsr	r23
    266c:	67 95       	ror	r22
    266e:	57 95       	ror	r21
    2670:	47 95       	ror	r20
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	77 fd       	sbrc	r23, 7
    2678:	e7 cf       	rjmp	.-50     	; 0x2648 <__mulsf3+0x140>
    267a:	0c c0       	rjmp	.+24     	; 0x2694 <__mulsf3+0x18c>
    267c:	44 0f       	add	r20, r20
    267e:	55 1f       	adc	r21, r21
    2680:	66 1f       	adc	r22, r22
    2682:	77 1f       	adc	r23, r23
    2684:	17 fd       	sbrc	r17, 7
    2686:	41 60       	ori	r20, 0x01	; 1
    2688:	ee 0c       	add	r14, r14
    268a:	ff 1c       	adc	r15, r15
    268c:	00 1f       	adc	r16, r16
    268e:	11 1f       	adc	r17, r17
    2690:	21 50       	subi	r18, 0x01	; 1
    2692:	30 40       	sbci	r19, 0x00	; 0
    2694:	40 30       	cpi	r20, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	59 07       	cpc	r21, r25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	69 07       	cpc	r22, r25
    269e:	90 e4       	ldi	r25, 0x40	; 64
    26a0:	79 07       	cpc	r23, r25
    26a2:	60 f3       	brcs	.-40     	; 0x267c <__mulsf3+0x174>
    26a4:	2b 8f       	std	Y+27, r18	; 0x1b
    26a6:	3c 8f       	std	Y+28, r19	; 0x1c
    26a8:	db 01       	movw	r26, r22
    26aa:	ca 01       	movw	r24, r20
    26ac:	8f 77       	andi	r24, 0x7F	; 127
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	a0 70       	andi	r26, 0x00	; 0
    26b2:	b0 70       	andi	r27, 0x00	; 0
    26b4:	80 34       	cpi	r24, 0x40	; 64
    26b6:	91 05       	cpc	r25, r1
    26b8:	a1 05       	cpc	r26, r1
    26ba:	b1 05       	cpc	r27, r1
    26bc:	61 f4       	brne	.+24     	; 0x26d6 <__mulsf3+0x1ce>
    26be:	47 fd       	sbrc	r20, 7
    26c0:	0a c0       	rjmp	.+20     	; 0x26d6 <__mulsf3+0x1ce>
    26c2:	e1 14       	cp	r14, r1
    26c4:	f1 04       	cpc	r15, r1
    26c6:	01 05       	cpc	r16, r1
    26c8:	11 05       	cpc	r17, r1
    26ca:	29 f0       	breq	.+10     	; 0x26d6 <__mulsf3+0x1ce>
    26cc:	40 5c       	subi	r20, 0xC0	; 192
    26ce:	5f 4f       	sbci	r21, 0xFF	; 255
    26d0:	6f 4f       	sbci	r22, 0xFF	; 255
    26d2:	7f 4f       	sbci	r23, 0xFF	; 255
    26d4:	40 78       	andi	r20, 0x80	; 128
    26d6:	1a 8e       	std	Y+26, r1	; 0x1a
    26d8:	fe 17       	cp	r31, r30
    26da:	11 f0       	breq	.+4      	; 0x26e0 <__mulsf3+0x1d8>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	8a 8f       	std	Y+26, r24	; 0x1a
    26e0:	4d 8f       	std	Y+29, r20	; 0x1d
    26e2:	5e 8f       	std	Y+30, r21	; 0x1e
    26e4:	6f 8f       	std	Y+31, r22	; 0x1f
    26e6:	78 a3       	std	Y+32, r23	; 0x20
    26e8:	83 e0       	ldi	r24, 0x03	; 3
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	ce 01       	movw	r24, r28
    26ee:	49 96       	adiw	r24, 0x19	; 25
    26f0:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__pack_f>
    26f4:	a0 96       	adiw	r28, 0x20	; 32
    26f6:	e2 e1       	ldi	r30, 0x12	; 18
    26f8:	0c 94 c2 3a 	jmp	0x7584	; 0x7584 <__epilogue_restores__>

000026fc <__divsf3>:
    26fc:	a8 e1       	ldi	r26, 0x18	; 24
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 ae 3a 	jmp	0x755c	; 0x755c <__prologue_saves__+0x10>
    2708:	69 83       	std	Y+1, r22	; 0x01
    270a:	7a 83       	std	Y+2, r23	; 0x02
    270c:	8b 83       	std	Y+3, r24	; 0x03
    270e:	9c 83       	std	Y+4, r25	; 0x04
    2710:	2d 83       	std	Y+5, r18	; 0x05
    2712:	3e 83       	std	Y+6, r19	; 0x06
    2714:	4f 83       	std	Y+7, r20	; 0x07
    2716:	58 87       	std	Y+8, r21	; 0x08
    2718:	b9 e0       	ldi	r27, 0x09	; 9
    271a:	eb 2e       	mov	r14, r27
    271c:	f1 2c       	mov	r15, r1
    271e:	ec 0e       	add	r14, r28
    2720:	fd 1e       	adc	r15, r29
    2722:	ce 01       	movw	r24, r28
    2724:	01 96       	adiw	r24, 0x01	; 1
    2726:	b7 01       	movw	r22, r14
    2728:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    272c:	8e 01       	movw	r16, r28
    272e:	0f 5e       	subi	r16, 0xEF	; 239
    2730:	1f 4f       	sbci	r17, 0xFF	; 255
    2732:	ce 01       	movw	r24, r28
    2734:	05 96       	adiw	r24, 0x05	; 5
    2736:	b8 01       	movw	r22, r16
    2738:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    273c:	29 85       	ldd	r18, Y+9	; 0x09
    273e:	22 30       	cpi	r18, 0x02	; 2
    2740:	08 f4       	brcc	.+2      	; 0x2744 <__divsf3+0x48>
    2742:	7e c0       	rjmp	.+252    	; 0x2840 <__divsf3+0x144>
    2744:	39 89       	ldd	r19, Y+17	; 0x11
    2746:	32 30       	cpi	r19, 0x02	; 2
    2748:	10 f4       	brcc	.+4      	; 0x274e <__divsf3+0x52>
    274a:	b8 01       	movw	r22, r16
    274c:	7c c0       	rjmp	.+248    	; 0x2846 <__divsf3+0x14a>
    274e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2750:	9a 89       	ldd	r25, Y+18	; 0x12
    2752:	89 27       	eor	r24, r25
    2754:	8a 87       	std	Y+10, r24	; 0x0a
    2756:	24 30       	cpi	r18, 0x04	; 4
    2758:	11 f0       	breq	.+4      	; 0x275e <__divsf3+0x62>
    275a:	22 30       	cpi	r18, 0x02	; 2
    275c:	31 f4       	brne	.+12     	; 0x276a <__divsf3+0x6e>
    275e:	23 17       	cp	r18, r19
    2760:	09 f0       	breq	.+2      	; 0x2764 <__divsf3+0x68>
    2762:	6e c0       	rjmp	.+220    	; 0x2840 <__divsf3+0x144>
    2764:	61 e0       	ldi	r22, 0x01	; 1
    2766:	71 e0       	ldi	r23, 0x01	; 1
    2768:	6e c0       	rjmp	.+220    	; 0x2846 <__divsf3+0x14a>
    276a:	34 30       	cpi	r19, 0x04	; 4
    276c:	39 f4       	brne	.+14     	; 0x277c <__divsf3+0x80>
    276e:	1d 86       	std	Y+13, r1	; 0x0d
    2770:	1e 86       	std	Y+14, r1	; 0x0e
    2772:	1f 86       	std	Y+15, r1	; 0x0f
    2774:	18 8a       	std	Y+16, r1	; 0x10
    2776:	1c 86       	std	Y+12, r1	; 0x0c
    2778:	1b 86       	std	Y+11, r1	; 0x0b
    277a:	04 c0       	rjmp	.+8      	; 0x2784 <__divsf3+0x88>
    277c:	32 30       	cpi	r19, 0x02	; 2
    277e:	21 f4       	brne	.+8      	; 0x2788 <__divsf3+0x8c>
    2780:	84 e0       	ldi	r24, 0x04	; 4
    2782:	89 87       	std	Y+9, r24	; 0x09
    2784:	b7 01       	movw	r22, r14
    2786:	5f c0       	rjmp	.+190    	; 0x2846 <__divsf3+0x14a>
    2788:	2b 85       	ldd	r18, Y+11	; 0x0b
    278a:	3c 85       	ldd	r19, Y+12	; 0x0c
    278c:	8b 89       	ldd	r24, Y+19	; 0x13
    278e:	9c 89       	ldd	r25, Y+20	; 0x14
    2790:	28 1b       	sub	r18, r24
    2792:	39 0b       	sbc	r19, r25
    2794:	3c 87       	std	Y+12, r19	; 0x0c
    2796:	2b 87       	std	Y+11, r18	; 0x0b
    2798:	ed 84       	ldd	r14, Y+13	; 0x0d
    279a:	fe 84       	ldd	r15, Y+14	; 0x0e
    279c:	0f 85       	ldd	r16, Y+15	; 0x0f
    279e:	18 89       	ldd	r17, Y+16	; 0x10
    27a0:	ad 88       	ldd	r10, Y+21	; 0x15
    27a2:	be 88       	ldd	r11, Y+22	; 0x16
    27a4:	cf 88       	ldd	r12, Y+23	; 0x17
    27a6:	d8 8c       	ldd	r13, Y+24	; 0x18
    27a8:	ea 14       	cp	r14, r10
    27aa:	fb 04       	cpc	r15, r11
    27ac:	0c 05       	cpc	r16, r12
    27ae:	1d 05       	cpc	r17, r13
    27b0:	40 f4       	brcc	.+16     	; 0x27c2 <__divsf3+0xc6>
    27b2:	ee 0c       	add	r14, r14
    27b4:	ff 1c       	adc	r15, r15
    27b6:	00 1f       	adc	r16, r16
    27b8:	11 1f       	adc	r17, r17
    27ba:	21 50       	subi	r18, 0x01	; 1
    27bc:	30 40       	sbci	r19, 0x00	; 0
    27be:	3c 87       	std	Y+12, r19	; 0x0c
    27c0:	2b 87       	std	Y+11, r18	; 0x0b
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	a0 e0       	ldi	r26, 0x00	; 0
    27d0:	b0 e4       	ldi	r27, 0x40	; 64
    27d2:	60 e0       	ldi	r22, 0x00	; 0
    27d4:	70 e0       	ldi	r23, 0x00	; 0
    27d6:	ea 14       	cp	r14, r10
    27d8:	fb 04       	cpc	r15, r11
    27da:	0c 05       	cpc	r16, r12
    27dc:	1d 05       	cpc	r17, r13
    27de:	40 f0       	brcs	.+16     	; 0x27f0 <__divsf3+0xf4>
    27e0:	28 2b       	or	r18, r24
    27e2:	39 2b       	or	r19, r25
    27e4:	4a 2b       	or	r20, r26
    27e6:	5b 2b       	or	r21, r27
    27e8:	ea 18       	sub	r14, r10
    27ea:	fb 08       	sbc	r15, r11
    27ec:	0c 09       	sbc	r16, r12
    27ee:	1d 09       	sbc	r17, r13
    27f0:	b6 95       	lsr	r27
    27f2:	a7 95       	ror	r26
    27f4:	97 95       	ror	r25
    27f6:	87 95       	ror	r24
    27f8:	ee 0c       	add	r14, r14
    27fa:	ff 1c       	adc	r15, r15
    27fc:	00 1f       	adc	r16, r16
    27fe:	11 1f       	adc	r17, r17
    2800:	6f 5f       	subi	r22, 0xFF	; 255
    2802:	7f 4f       	sbci	r23, 0xFF	; 255
    2804:	6f 31       	cpi	r22, 0x1F	; 31
    2806:	71 05       	cpc	r23, r1
    2808:	31 f7       	brne	.-52     	; 0x27d6 <__divsf3+0xda>
    280a:	da 01       	movw	r26, r20
    280c:	c9 01       	movw	r24, r18
    280e:	8f 77       	andi	r24, 0x7F	; 127
    2810:	90 70       	andi	r25, 0x00	; 0
    2812:	a0 70       	andi	r26, 0x00	; 0
    2814:	b0 70       	andi	r27, 0x00	; 0
    2816:	80 34       	cpi	r24, 0x40	; 64
    2818:	91 05       	cpc	r25, r1
    281a:	a1 05       	cpc	r26, r1
    281c:	b1 05       	cpc	r27, r1
    281e:	61 f4       	brne	.+24     	; 0x2838 <__divsf3+0x13c>
    2820:	27 fd       	sbrc	r18, 7
    2822:	0a c0       	rjmp	.+20     	; 0x2838 <__divsf3+0x13c>
    2824:	e1 14       	cp	r14, r1
    2826:	f1 04       	cpc	r15, r1
    2828:	01 05       	cpc	r16, r1
    282a:	11 05       	cpc	r17, r1
    282c:	29 f0       	breq	.+10     	; 0x2838 <__divsf3+0x13c>
    282e:	20 5c       	subi	r18, 0xC0	; 192
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	4f 4f       	sbci	r20, 0xFF	; 255
    2834:	5f 4f       	sbci	r21, 0xFF	; 255
    2836:	20 78       	andi	r18, 0x80	; 128
    2838:	2d 87       	std	Y+13, r18	; 0x0d
    283a:	3e 87       	std	Y+14, r19	; 0x0e
    283c:	4f 87       	std	Y+15, r20	; 0x0f
    283e:	58 8b       	std	Y+16, r21	; 0x10
    2840:	be 01       	movw	r22, r28
    2842:	67 5f       	subi	r22, 0xF7	; 247
    2844:	7f 4f       	sbci	r23, 0xFF	; 255
    2846:	cb 01       	movw	r24, r22
    2848:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__pack_f>
    284c:	68 96       	adiw	r28, 0x18	; 24
    284e:	ea e0       	ldi	r30, 0x0A	; 10
    2850:	0c 94 ca 3a 	jmp	0x7594	; 0x7594 <__epilogue_restores__+0x10>

00002854 <__gtsf2>:
    2854:	a8 e1       	ldi	r26, 0x18	; 24
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e0 e3       	ldi	r30, 0x30	; 48
    285a:	f4 e1       	ldi	r31, 0x14	; 20
    285c:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__prologue_saves__+0x18>
    2860:	69 83       	std	Y+1, r22	; 0x01
    2862:	7a 83       	std	Y+2, r23	; 0x02
    2864:	8b 83       	std	Y+3, r24	; 0x03
    2866:	9c 83       	std	Y+4, r25	; 0x04
    2868:	2d 83       	std	Y+5, r18	; 0x05
    286a:	3e 83       	std	Y+6, r19	; 0x06
    286c:	4f 83       	std	Y+7, r20	; 0x07
    286e:	58 87       	std	Y+8, r21	; 0x08
    2870:	89 e0       	ldi	r24, 0x09	; 9
    2872:	e8 2e       	mov	r14, r24
    2874:	f1 2c       	mov	r15, r1
    2876:	ec 0e       	add	r14, r28
    2878:	fd 1e       	adc	r15, r29
    287a:	ce 01       	movw	r24, r28
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	b7 01       	movw	r22, r14
    2880:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    2884:	8e 01       	movw	r16, r28
    2886:	0f 5e       	subi	r16, 0xEF	; 239
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	ce 01       	movw	r24, r28
    288c:	05 96       	adiw	r24, 0x05	; 5
    288e:	b8 01       	movw	r22, r16
    2890:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    2894:	89 85       	ldd	r24, Y+9	; 0x09
    2896:	82 30       	cpi	r24, 0x02	; 2
    2898:	40 f0       	brcs	.+16     	; 0x28aa <__gtsf2+0x56>
    289a:	89 89       	ldd	r24, Y+17	; 0x11
    289c:	82 30       	cpi	r24, 0x02	; 2
    289e:	28 f0       	brcs	.+10     	; 0x28aa <__gtsf2+0x56>
    28a0:	c7 01       	movw	r24, r14
    28a2:	b8 01       	movw	r22, r16
    28a4:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__fpcmp_parts_f>
    28a8:	01 c0       	rjmp	.+2      	; 0x28ac <__gtsf2+0x58>
    28aa:	8f ef       	ldi	r24, 0xFF	; 255
    28ac:	68 96       	adiw	r28, 0x18	; 24
    28ae:	e6 e0       	ldi	r30, 0x06	; 6
    28b0:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <__epilogue_restores__+0x18>

000028b4 <__gesf2>:
    28b4:	a8 e1       	ldi	r26, 0x18	; 24
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e0 e6       	ldi	r30, 0x60	; 96
    28ba:	f4 e1       	ldi	r31, 0x14	; 20
    28bc:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__prologue_saves__+0x18>
    28c0:	69 83       	std	Y+1, r22	; 0x01
    28c2:	7a 83       	std	Y+2, r23	; 0x02
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	2d 83       	std	Y+5, r18	; 0x05
    28ca:	3e 83       	std	Y+6, r19	; 0x06
    28cc:	4f 83       	std	Y+7, r20	; 0x07
    28ce:	58 87       	std	Y+8, r21	; 0x08
    28d0:	89 e0       	ldi	r24, 0x09	; 9
    28d2:	e8 2e       	mov	r14, r24
    28d4:	f1 2c       	mov	r15, r1
    28d6:	ec 0e       	add	r14, r28
    28d8:	fd 1e       	adc	r15, r29
    28da:	ce 01       	movw	r24, r28
    28dc:	01 96       	adiw	r24, 0x01	; 1
    28de:	b7 01       	movw	r22, r14
    28e0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    28e4:	8e 01       	movw	r16, r28
    28e6:	0f 5e       	subi	r16, 0xEF	; 239
    28e8:	1f 4f       	sbci	r17, 0xFF	; 255
    28ea:	ce 01       	movw	r24, r28
    28ec:	05 96       	adiw	r24, 0x05	; 5
    28ee:	b8 01       	movw	r22, r16
    28f0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	82 30       	cpi	r24, 0x02	; 2
    28f8:	40 f0       	brcs	.+16     	; 0x290a <__gesf2+0x56>
    28fa:	89 89       	ldd	r24, Y+17	; 0x11
    28fc:	82 30       	cpi	r24, 0x02	; 2
    28fe:	28 f0       	brcs	.+10     	; 0x290a <__gesf2+0x56>
    2900:	c7 01       	movw	r24, r14
    2902:	b8 01       	movw	r22, r16
    2904:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__fpcmp_parts_f>
    2908:	01 c0       	rjmp	.+2      	; 0x290c <__gesf2+0x58>
    290a:	8f ef       	ldi	r24, 0xFF	; 255
    290c:	68 96       	adiw	r28, 0x18	; 24
    290e:	e6 e0       	ldi	r30, 0x06	; 6
    2910:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <__epilogue_restores__+0x18>

00002914 <__ltsf2>:
    2914:	a8 e1       	ldi	r26, 0x18	; 24
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	e0 e9       	ldi	r30, 0x90	; 144
    291a:	f4 e1       	ldi	r31, 0x14	; 20
    291c:	0c 94 b2 3a 	jmp	0x7564	; 0x7564 <__prologue_saves__+0x18>
    2920:	69 83       	std	Y+1, r22	; 0x01
    2922:	7a 83       	std	Y+2, r23	; 0x02
    2924:	8b 83       	std	Y+3, r24	; 0x03
    2926:	9c 83       	std	Y+4, r25	; 0x04
    2928:	2d 83       	std	Y+5, r18	; 0x05
    292a:	3e 83       	std	Y+6, r19	; 0x06
    292c:	4f 83       	std	Y+7, r20	; 0x07
    292e:	58 87       	std	Y+8, r21	; 0x08
    2930:	89 e0       	ldi	r24, 0x09	; 9
    2932:	e8 2e       	mov	r14, r24
    2934:	f1 2c       	mov	r15, r1
    2936:	ec 0e       	add	r14, r28
    2938:	fd 1e       	adc	r15, r29
    293a:	ce 01       	movw	r24, r28
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	b7 01       	movw	r22, r14
    2940:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    2944:	8e 01       	movw	r16, r28
    2946:	0f 5e       	subi	r16, 0xEF	; 239
    2948:	1f 4f       	sbci	r17, 0xFF	; 255
    294a:	ce 01       	movw	r24, r28
    294c:	05 96       	adiw	r24, 0x05	; 5
    294e:	b8 01       	movw	r22, r16
    2950:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    2954:	89 85       	ldd	r24, Y+9	; 0x09
    2956:	82 30       	cpi	r24, 0x02	; 2
    2958:	40 f0       	brcs	.+16     	; 0x296a <__ltsf2+0x56>
    295a:	89 89       	ldd	r24, Y+17	; 0x11
    295c:	82 30       	cpi	r24, 0x02	; 2
    295e:	28 f0       	brcs	.+10     	; 0x296a <__ltsf2+0x56>
    2960:	c7 01       	movw	r24, r14
    2962:	b8 01       	movw	r22, r16
    2964:	0e 94 23 17 	call	0x2e46	; 0x2e46 <__fpcmp_parts_f>
    2968:	01 c0       	rjmp	.+2      	; 0x296c <__ltsf2+0x58>
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	68 96       	adiw	r28, 0x18	; 24
    296e:	e6 e0       	ldi	r30, 0x06	; 6
    2970:	0c 94 ce 3a 	jmp	0x759c	; 0x759c <__epilogue_restores__+0x18>

00002974 <__fixsfsi>:
    2974:	ac e0       	ldi	r26, 0x0C	; 12
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e0 ec       	ldi	r30, 0xC0	; 192
    297a:	f4 e1       	ldi	r31, 0x14	; 20
    297c:	0c 94 b6 3a 	jmp	0x756c	; 0x756c <__prologue_saves__+0x20>
    2980:	69 83       	std	Y+1, r22	; 0x01
    2982:	7a 83       	std	Y+2, r23	; 0x02
    2984:	8b 83       	std	Y+3, r24	; 0x03
    2986:	9c 83       	std	Y+4, r25	; 0x04
    2988:	ce 01       	movw	r24, r28
    298a:	01 96       	adiw	r24, 0x01	; 1
    298c:	be 01       	movw	r22, r28
    298e:	6b 5f       	subi	r22, 0xFB	; 251
    2990:	7f 4f       	sbci	r23, 0xFF	; 255
    2992:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__unpack_f>
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	61 f1       	breq	.+88     	; 0x29f4 <__fixsfsi+0x80>
    299c:	82 30       	cpi	r24, 0x02	; 2
    299e:	50 f1       	brcs	.+84     	; 0x29f4 <__fixsfsi+0x80>
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	21 f4       	brne	.+8      	; 0x29ac <__fixsfsi+0x38>
    29a4:	8e 81       	ldd	r24, Y+6	; 0x06
    29a6:	88 23       	and	r24, r24
    29a8:	51 f1       	breq	.+84     	; 0x29fe <__fixsfsi+0x8a>
    29aa:	2e c0       	rjmp	.+92     	; 0x2a08 <__fixsfsi+0x94>
    29ac:	2f 81       	ldd	r18, Y+7	; 0x07
    29ae:	38 85       	ldd	r19, Y+8	; 0x08
    29b0:	37 fd       	sbrc	r19, 7
    29b2:	20 c0       	rjmp	.+64     	; 0x29f4 <__fixsfsi+0x80>
    29b4:	6e 81       	ldd	r22, Y+6	; 0x06
    29b6:	2f 31       	cpi	r18, 0x1F	; 31
    29b8:	31 05       	cpc	r19, r1
    29ba:	1c f0       	brlt	.+6      	; 0x29c2 <__fixsfsi+0x4e>
    29bc:	66 23       	and	r22, r22
    29be:	f9 f0       	breq	.+62     	; 0x29fe <__fixsfsi+0x8a>
    29c0:	23 c0       	rjmp	.+70     	; 0x2a08 <__fixsfsi+0x94>
    29c2:	8e e1       	ldi	r24, 0x1E	; 30
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	82 1b       	sub	r24, r18
    29c8:	93 0b       	sbc	r25, r19
    29ca:	29 85       	ldd	r18, Y+9	; 0x09
    29cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    29ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    29d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    29d2:	04 c0       	rjmp	.+8      	; 0x29dc <__fixsfsi+0x68>
    29d4:	56 95       	lsr	r21
    29d6:	47 95       	ror	r20
    29d8:	37 95       	ror	r19
    29da:	27 95       	ror	r18
    29dc:	8a 95       	dec	r24
    29de:	d2 f7       	brpl	.-12     	; 0x29d4 <__fixsfsi+0x60>
    29e0:	66 23       	and	r22, r22
    29e2:	b1 f0       	breq	.+44     	; 0x2a10 <__fixsfsi+0x9c>
    29e4:	50 95       	com	r21
    29e6:	40 95       	com	r20
    29e8:	30 95       	com	r19
    29ea:	21 95       	neg	r18
    29ec:	3f 4f       	sbci	r19, 0xFF	; 255
    29ee:	4f 4f       	sbci	r20, 0xFF	; 255
    29f0:	5f 4f       	sbci	r21, 0xFF	; 255
    29f2:	0e c0       	rjmp	.+28     	; 0x2a10 <__fixsfsi+0x9c>
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	50 e0       	ldi	r21, 0x00	; 0
    29fc:	09 c0       	rjmp	.+18     	; 0x2a10 <__fixsfsi+0x9c>
    29fe:	2f ef       	ldi	r18, 0xFF	; 255
    2a00:	3f ef       	ldi	r19, 0xFF	; 255
    2a02:	4f ef       	ldi	r20, 0xFF	; 255
    2a04:	5f e7       	ldi	r21, 0x7F	; 127
    2a06:	04 c0       	rjmp	.+8      	; 0x2a10 <__fixsfsi+0x9c>
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	50 e8       	ldi	r21, 0x80	; 128
    2a10:	b9 01       	movw	r22, r18
    2a12:	ca 01       	movw	r24, r20
    2a14:	2c 96       	adiw	r28, 0x0c	; 12
    2a16:	e2 e0       	ldi	r30, 0x02	; 2
    2a18:	0c 94 d2 3a 	jmp	0x75a4	; 0x75a4 <__epilogue_restores__+0x20>

00002a1c <__floatunsisf>:
    2a1c:	a8 e0       	ldi	r26, 0x08	; 8
    2a1e:	b0 e0       	ldi	r27, 0x00	; 0
    2a20:	e4 e1       	ldi	r30, 0x14	; 20
    2a22:	f5 e1       	ldi	r31, 0x15	; 21
    2a24:	0c 94 ae 3a 	jmp	0x755c	; 0x755c <__prologue_saves__+0x10>
    2a28:	7b 01       	movw	r14, r22
    2a2a:	8c 01       	movw	r16, r24
    2a2c:	61 15       	cp	r22, r1
    2a2e:	71 05       	cpc	r23, r1
    2a30:	81 05       	cpc	r24, r1
    2a32:	91 05       	cpc	r25, r1
    2a34:	19 f4       	brne	.+6      	; 0x2a3c <__floatunsisf+0x20>
    2a36:	82 e0       	ldi	r24, 0x02	; 2
    2a38:	89 83       	std	Y+1, r24	; 0x01
    2a3a:	60 c0       	rjmp	.+192    	; 0x2afc <__floatunsisf+0xe0>
    2a3c:	83 e0       	ldi	r24, 0x03	; 3
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	8e e1       	ldi	r24, 0x1E	; 30
    2a42:	c8 2e       	mov	r12, r24
    2a44:	d1 2c       	mov	r13, r1
    2a46:	dc 82       	std	Y+4, r13	; 0x04
    2a48:	cb 82       	std	Y+3, r12	; 0x03
    2a4a:	ed 82       	std	Y+5, r14	; 0x05
    2a4c:	fe 82       	std	Y+6, r15	; 0x06
    2a4e:	0f 83       	std	Y+7, r16	; 0x07
    2a50:	18 87       	std	Y+8, r17	; 0x08
    2a52:	c8 01       	movw	r24, r16
    2a54:	b7 01       	movw	r22, r14
    2a56:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__clzsi2>
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	31 97       	sbiw	r30, 0x01	; 1
    2a5e:	f7 ff       	sbrs	r31, 7
    2a60:	3b c0       	rjmp	.+118    	; 0x2ad8 <__floatunsisf+0xbc>
    2a62:	22 27       	eor	r18, r18
    2a64:	33 27       	eor	r19, r19
    2a66:	2e 1b       	sub	r18, r30
    2a68:	3f 0b       	sbc	r19, r31
    2a6a:	57 01       	movw	r10, r14
    2a6c:	68 01       	movw	r12, r16
    2a6e:	02 2e       	mov	r0, r18
    2a70:	04 c0       	rjmp	.+8      	; 0x2a7a <__floatunsisf+0x5e>
    2a72:	d6 94       	lsr	r13
    2a74:	c7 94       	ror	r12
    2a76:	b7 94       	ror	r11
    2a78:	a7 94       	ror	r10
    2a7a:	0a 94       	dec	r0
    2a7c:	d2 f7       	brpl	.-12     	; 0x2a72 <__floatunsisf+0x56>
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	70 e0       	ldi	r23, 0x00	; 0
    2a86:	81 e0       	ldi	r24, 0x01	; 1
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e0       	ldi	r26, 0x00	; 0
    2a8c:	b0 e0       	ldi	r27, 0x00	; 0
    2a8e:	04 c0       	rjmp	.+8      	; 0x2a98 <__floatunsisf+0x7c>
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	aa 1f       	adc	r26, r26
    2a96:	bb 1f       	adc	r27, r27
    2a98:	2a 95       	dec	r18
    2a9a:	d2 f7       	brpl	.-12     	; 0x2a90 <__floatunsisf+0x74>
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	a1 09       	sbc	r26, r1
    2aa0:	b1 09       	sbc	r27, r1
    2aa2:	8e 21       	and	r24, r14
    2aa4:	9f 21       	and	r25, r15
    2aa6:	a0 23       	and	r26, r16
    2aa8:	b1 23       	and	r27, r17
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	a1 05       	cpc	r26, r1
    2aae:	b1 05       	cpc	r27, r1
    2ab0:	21 f0       	breq	.+8      	; 0x2aba <__floatunsisf+0x9e>
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	70 e0       	ldi	r23, 0x00	; 0
    2aba:	4a 29       	or	r20, r10
    2abc:	5b 29       	or	r21, r11
    2abe:	6c 29       	or	r22, r12
    2ac0:	7d 29       	or	r23, r13
    2ac2:	4d 83       	std	Y+5, r20	; 0x05
    2ac4:	5e 83       	std	Y+6, r21	; 0x06
    2ac6:	6f 83       	std	Y+7, r22	; 0x07
    2ac8:	78 87       	std	Y+8, r23	; 0x08
    2aca:	8e e1       	ldi	r24, 0x1E	; 30
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	8e 1b       	sub	r24, r30
    2ad0:	9f 0b       	sbc	r25, r31
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	12 c0       	rjmp	.+36     	; 0x2afc <__floatunsisf+0xe0>
    2ad8:	30 97       	sbiw	r30, 0x00	; 0
    2ada:	81 f0       	breq	.+32     	; 0x2afc <__floatunsisf+0xe0>
    2adc:	0e 2e       	mov	r0, r30
    2ade:	04 c0       	rjmp	.+8      	; 0x2ae8 <__floatunsisf+0xcc>
    2ae0:	ee 0c       	add	r14, r14
    2ae2:	ff 1c       	adc	r15, r15
    2ae4:	00 1f       	adc	r16, r16
    2ae6:	11 1f       	adc	r17, r17
    2ae8:	0a 94       	dec	r0
    2aea:	d2 f7       	brpl	.-12     	; 0x2ae0 <__floatunsisf+0xc4>
    2aec:	ed 82       	std	Y+5, r14	; 0x05
    2aee:	fe 82       	std	Y+6, r15	; 0x06
    2af0:	0f 83       	std	Y+7, r16	; 0x07
    2af2:	18 87       	std	Y+8, r17	; 0x08
    2af4:	ce 1a       	sub	r12, r30
    2af6:	df 0a       	sbc	r13, r31
    2af8:	dc 82       	std	Y+4, r13	; 0x04
    2afa:	cb 82       	std	Y+3, r12	; 0x03
    2afc:	1a 82       	std	Y+2, r1	; 0x02
    2afe:	ce 01       	movw	r24, r28
    2b00:	01 96       	adiw	r24, 0x01	; 1
    2b02:	0e 94 d6 15 	call	0x2bac	; 0x2bac <__pack_f>
    2b06:	28 96       	adiw	r28, 0x08	; 8
    2b08:	ea e0       	ldi	r30, 0x0A	; 10
    2b0a:	0c 94 ca 3a 	jmp	0x7594	; 0x7594 <__epilogue_restores__+0x10>

00002b0e <__clzsi2>:
    2b0e:	ef 92       	push	r14
    2b10:	ff 92       	push	r15
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	7b 01       	movw	r14, r22
    2b18:	8c 01       	movw	r16, r24
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	e8 16       	cp	r14, r24
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	f8 06       	cpc	r15, r24
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	08 07       	cpc	r16, r24
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	18 07       	cpc	r17, r24
    2b2a:	88 f4       	brcc	.+34     	; 0x2b4e <__clzsi2+0x40>
    2b2c:	8f ef       	ldi	r24, 0xFF	; 255
    2b2e:	e8 16       	cp	r14, r24
    2b30:	f1 04       	cpc	r15, r1
    2b32:	01 05       	cpc	r16, r1
    2b34:	11 05       	cpc	r17, r1
    2b36:	31 f0       	breq	.+12     	; 0x2b44 <__clzsi2+0x36>
    2b38:	28 f0       	brcs	.+10     	; 0x2b44 <__clzsi2+0x36>
    2b3a:	88 e0       	ldi	r24, 0x08	; 8
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	a0 e0       	ldi	r26, 0x00	; 0
    2b40:	b0 e0       	ldi	r27, 0x00	; 0
    2b42:	17 c0       	rjmp	.+46     	; 0x2b72 <__clzsi2+0x64>
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a0 e0       	ldi	r26, 0x00	; 0
    2b4a:	b0 e0       	ldi	r27, 0x00	; 0
    2b4c:	12 c0       	rjmp	.+36     	; 0x2b72 <__clzsi2+0x64>
    2b4e:	80 e0       	ldi	r24, 0x00	; 0
    2b50:	e8 16       	cp	r14, r24
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	f8 06       	cpc	r15, r24
    2b56:	80 e0       	ldi	r24, 0x00	; 0
    2b58:	08 07       	cpc	r16, r24
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	18 07       	cpc	r17, r24
    2b5e:	28 f0       	brcs	.+10     	; 0x2b6a <__clzsi2+0x5c>
    2b60:	88 e1       	ldi	r24, 0x18	; 24
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	a0 e0       	ldi	r26, 0x00	; 0
    2b66:	b0 e0       	ldi	r27, 0x00	; 0
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <__clzsi2+0x64>
    2b6a:	80 e1       	ldi	r24, 0x10	; 16
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	20 e2       	ldi	r18, 0x20	; 32
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	28 1b       	sub	r18, r24
    2b7c:	39 0b       	sbc	r19, r25
    2b7e:	4a 0b       	sbc	r20, r26
    2b80:	5b 0b       	sbc	r21, r27
    2b82:	04 c0       	rjmp	.+8      	; 0x2b8c <__clzsi2+0x7e>
    2b84:	16 95       	lsr	r17
    2b86:	07 95       	ror	r16
    2b88:	f7 94       	ror	r15
    2b8a:	e7 94       	ror	r14
    2b8c:	8a 95       	dec	r24
    2b8e:	d2 f7       	brpl	.-12     	; 0x2b84 <__clzsi2+0x76>
    2b90:	f7 01       	movw	r30, r14
    2b92:	e7 5f       	subi	r30, 0xF7	; 247
    2b94:	fe 4f       	sbci	r31, 0xFE	; 254
    2b96:	80 81       	ld	r24, Z
    2b98:	28 1b       	sub	r18, r24
    2b9a:	31 09       	sbc	r19, r1
    2b9c:	41 09       	sbc	r20, r1
    2b9e:	51 09       	sbc	r21, r1
    2ba0:	c9 01       	movw	r24, r18
    2ba2:	1f 91       	pop	r17
    2ba4:	0f 91       	pop	r16
    2ba6:	ff 90       	pop	r15
    2ba8:	ef 90       	pop	r14
    2baa:	08 95       	ret

00002bac <__pack_f>:
    2bac:	df 92       	push	r13
    2bae:	ef 92       	push	r14
    2bb0:	ff 92       	push	r15
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	e4 80       	ldd	r14, Z+4	; 0x04
    2bba:	f5 80       	ldd	r15, Z+5	; 0x05
    2bbc:	06 81       	ldd	r16, Z+6	; 0x06
    2bbe:	17 81       	ldd	r17, Z+7	; 0x07
    2bc0:	d1 80       	ldd	r13, Z+1	; 0x01
    2bc2:	80 81       	ld	r24, Z
    2bc4:	82 30       	cpi	r24, 0x02	; 2
    2bc6:	48 f4       	brcc	.+18     	; 0x2bda <__pack_f+0x2e>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 e1       	ldi	r26, 0x10	; 16
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e8 2a       	or	r14, r24
    2bd2:	f9 2a       	or	r15, r25
    2bd4:	0a 2b       	or	r16, r26
    2bd6:	1b 2b       	or	r17, r27
    2bd8:	a5 c0       	rjmp	.+330    	; 0x2d24 <__pack_f+0x178>
    2bda:	84 30       	cpi	r24, 0x04	; 4
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <__pack_f+0x34>
    2bde:	9f c0       	rjmp	.+318    	; 0x2d1e <__pack_f+0x172>
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	21 f4       	brne	.+8      	; 0x2bec <__pack_f+0x40>
    2be4:	ee 24       	eor	r14, r14
    2be6:	ff 24       	eor	r15, r15
    2be8:	87 01       	movw	r16, r14
    2bea:	05 c0       	rjmp	.+10     	; 0x2bf6 <__pack_f+0x4a>
    2bec:	e1 14       	cp	r14, r1
    2bee:	f1 04       	cpc	r15, r1
    2bf0:	01 05       	cpc	r16, r1
    2bf2:	11 05       	cpc	r17, r1
    2bf4:	19 f4       	brne	.+6      	; 0x2bfc <__pack_f+0x50>
    2bf6:	e0 e0       	ldi	r30, 0x00	; 0
    2bf8:	f0 e0       	ldi	r31, 0x00	; 0
    2bfa:	96 c0       	rjmp	.+300    	; 0x2d28 <__pack_f+0x17c>
    2bfc:	62 81       	ldd	r22, Z+2	; 0x02
    2bfe:	73 81       	ldd	r23, Z+3	; 0x03
    2c00:	9f ef       	ldi	r25, 0xFF	; 255
    2c02:	62 38       	cpi	r22, 0x82	; 130
    2c04:	79 07       	cpc	r23, r25
    2c06:	0c f0       	brlt	.+2      	; 0x2c0a <__pack_f+0x5e>
    2c08:	5b c0       	rjmp	.+182    	; 0x2cc0 <__pack_f+0x114>
    2c0a:	22 e8       	ldi	r18, 0x82	; 130
    2c0c:	3f ef       	ldi	r19, 0xFF	; 255
    2c0e:	26 1b       	sub	r18, r22
    2c10:	37 0b       	sbc	r19, r23
    2c12:	2a 31       	cpi	r18, 0x1A	; 26
    2c14:	31 05       	cpc	r19, r1
    2c16:	2c f0       	brlt	.+10     	; 0x2c22 <__pack_f+0x76>
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	2a c0       	rjmp	.+84     	; 0x2c76 <__pack_f+0xca>
    2c22:	b8 01       	movw	r22, r16
    2c24:	a7 01       	movw	r20, r14
    2c26:	02 2e       	mov	r0, r18
    2c28:	04 c0       	rjmp	.+8      	; 0x2c32 <__pack_f+0x86>
    2c2a:	76 95       	lsr	r23
    2c2c:	67 95       	ror	r22
    2c2e:	57 95       	ror	r21
    2c30:	47 95       	ror	r20
    2c32:	0a 94       	dec	r0
    2c34:	d2 f7       	brpl	.-12     	; 0x2c2a <__pack_f+0x7e>
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e0       	ldi	r26, 0x00	; 0
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	04 c0       	rjmp	.+8      	; 0x2c48 <__pack_f+0x9c>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	aa 1f       	adc	r26, r26
    2c46:	bb 1f       	adc	r27, r27
    2c48:	2a 95       	dec	r18
    2c4a:	d2 f7       	brpl	.-12     	; 0x2c40 <__pack_f+0x94>
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	a1 09       	sbc	r26, r1
    2c50:	b1 09       	sbc	r27, r1
    2c52:	8e 21       	and	r24, r14
    2c54:	9f 21       	and	r25, r15
    2c56:	a0 23       	and	r26, r16
    2c58:	b1 23       	and	r27, r17
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	a1 05       	cpc	r26, r1
    2c5e:	b1 05       	cpc	r27, r1
    2c60:	21 f0       	breq	.+8      	; 0x2c6a <__pack_f+0xbe>
    2c62:	81 e0       	ldi	r24, 0x01	; 1
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	a0 e0       	ldi	r26, 0x00	; 0
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	9a 01       	movw	r18, r20
    2c6c:	ab 01       	movw	r20, r22
    2c6e:	28 2b       	or	r18, r24
    2c70:	39 2b       	or	r19, r25
    2c72:	4a 2b       	or	r20, r26
    2c74:	5b 2b       	or	r21, r27
    2c76:	da 01       	movw	r26, r20
    2c78:	c9 01       	movw	r24, r18
    2c7a:	8f 77       	andi	r24, 0x7F	; 127
    2c7c:	90 70       	andi	r25, 0x00	; 0
    2c7e:	a0 70       	andi	r26, 0x00	; 0
    2c80:	b0 70       	andi	r27, 0x00	; 0
    2c82:	80 34       	cpi	r24, 0x40	; 64
    2c84:	91 05       	cpc	r25, r1
    2c86:	a1 05       	cpc	r26, r1
    2c88:	b1 05       	cpc	r27, r1
    2c8a:	39 f4       	brne	.+14     	; 0x2c9a <__pack_f+0xee>
    2c8c:	27 ff       	sbrs	r18, 7
    2c8e:	09 c0       	rjmp	.+18     	; 0x2ca2 <__pack_f+0xf6>
    2c90:	20 5c       	subi	r18, 0xC0	; 192
    2c92:	3f 4f       	sbci	r19, 0xFF	; 255
    2c94:	4f 4f       	sbci	r20, 0xFF	; 255
    2c96:	5f 4f       	sbci	r21, 0xFF	; 255
    2c98:	04 c0       	rjmp	.+8      	; 0x2ca2 <__pack_f+0xf6>
    2c9a:	21 5c       	subi	r18, 0xC1	; 193
    2c9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9e:	4f 4f       	sbci	r20, 0xFF	; 255
    2ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca2:	e0 e0       	ldi	r30, 0x00	; 0
    2ca4:	f0 e0       	ldi	r31, 0x00	; 0
    2ca6:	20 30       	cpi	r18, 0x00	; 0
    2ca8:	a0 e0       	ldi	r26, 0x00	; 0
    2caa:	3a 07       	cpc	r19, r26
    2cac:	a0 e0       	ldi	r26, 0x00	; 0
    2cae:	4a 07       	cpc	r20, r26
    2cb0:	a0 e4       	ldi	r26, 0x40	; 64
    2cb2:	5a 07       	cpc	r21, r26
    2cb4:	10 f0       	brcs	.+4      	; 0x2cba <__pack_f+0x10e>
    2cb6:	e1 e0       	ldi	r30, 0x01	; 1
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	79 01       	movw	r14, r18
    2cbc:	8a 01       	movw	r16, r20
    2cbe:	27 c0       	rjmp	.+78     	; 0x2d0e <__pack_f+0x162>
    2cc0:	60 38       	cpi	r22, 0x80	; 128
    2cc2:	71 05       	cpc	r23, r1
    2cc4:	64 f5       	brge	.+88     	; 0x2d1e <__pack_f+0x172>
    2cc6:	fb 01       	movw	r30, r22
    2cc8:	e1 58       	subi	r30, 0x81	; 129
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	d8 01       	movw	r26, r16
    2cce:	c7 01       	movw	r24, r14
    2cd0:	8f 77       	andi	r24, 0x7F	; 127
    2cd2:	90 70       	andi	r25, 0x00	; 0
    2cd4:	a0 70       	andi	r26, 0x00	; 0
    2cd6:	b0 70       	andi	r27, 0x00	; 0
    2cd8:	80 34       	cpi	r24, 0x40	; 64
    2cda:	91 05       	cpc	r25, r1
    2cdc:	a1 05       	cpc	r26, r1
    2cde:	b1 05       	cpc	r27, r1
    2ce0:	39 f4       	brne	.+14     	; 0x2cf0 <__pack_f+0x144>
    2ce2:	e7 fe       	sbrs	r14, 7
    2ce4:	0d c0       	rjmp	.+26     	; 0x2d00 <__pack_f+0x154>
    2ce6:	80 e4       	ldi	r24, 0x40	; 64
    2ce8:	90 e0       	ldi	r25, 0x00	; 0
    2cea:	a0 e0       	ldi	r26, 0x00	; 0
    2cec:	b0 e0       	ldi	r27, 0x00	; 0
    2cee:	04 c0       	rjmp	.+8      	; 0x2cf8 <__pack_f+0x14c>
    2cf0:	8f e3       	ldi	r24, 0x3F	; 63
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a0 e0       	ldi	r26, 0x00	; 0
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e8 0e       	add	r14, r24
    2cfa:	f9 1e       	adc	r15, r25
    2cfc:	0a 1f       	adc	r16, r26
    2cfe:	1b 1f       	adc	r17, r27
    2d00:	17 ff       	sbrs	r17, 7
    2d02:	05 c0       	rjmp	.+10     	; 0x2d0e <__pack_f+0x162>
    2d04:	16 95       	lsr	r17
    2d06:	07 95       	ror	r16
    2d08:	f7 94       	ror	r15
    2d0a:	e7 94       	ror	r14
    2d0c:	31 96       	adiw	r30, 0x01	; 1
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	16 95       	lsr	r17
    2d12:	07 95       	ror	r16
    2d14:	f7 94       	ror	r15
    2d16:	e7 94       	ror	r14
    2d18:	8a 95       	dec	r24
    2d1a:	d1 f7       	brne	.-12     	; 0x2d10 <__pack_f+0x164>
    2d1c:	05 c0       	rjmp	.+10     	; 0x2d28 <__pack_f+0x17c>
    2d1e:	ee 24       	eor	r14, r14
    2d20:	ff 24       	eor	r15, r15
    2d22:	87 01       	movw	r16, r14
    2d24:	ef ef       	ldi	r30, 0xFF	; 255
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	6e 2f       	mov	r22, r30
    2d2a:	67 95       	ror	r22
    2d2c:	66 27       	eor	r22, r22
    2d2e:	67 95       	ror	r22
    2d30:	90 2f       	mov	r25, r16
    2d32:	9f 77       	andi	r25, 0x7F	; 127
    2d34:	d7 94       	ror	r13
    2d36:	dd 24       	eor	r13, r13
    2d38:	d7 94       	ror	r13
    2d3a:	8e 2f       	mov	r24, r30
    2d3c:	86 95       	lsr	r24
    2d3e:	49 2f       	mov	r20, r25
    2d40:	46 2b       	or	r20, r22
    2d42:	58 2f       	mov	r21, r24
    2d44:	5d 29       	or	r21, r13
    2d46:	b7 01       	movw	r22, r14
    2d48:	ca 01       	movw	r24, r20
    2d4a:	1f 91       	pop	r17
    2d4c:	0f 91       	pop	r16
    2d4e:	ff 90       	pop	r15
    2d50:	ef 90       	pop	r14
    2d52:	df 90       	pop	r13
    2d54:	08 95       	ret

00002d56 <__unpack_f>:
    2d56:	fc 01       	movw	r30, r24
    2d58:	db 01       	movw	r26, r22
    2d5a:	40 81       	ld	r20, Z
    2d5c:	51 81       	ldd	r21, Z+1	; 0x01
    2d5e:	22 81       	ldd	r18, Z+2	; 0x02
    2d60:	62 2f       	mov	r22, r18
    2d62:	6f 77       	andi	r22, 0x7F	; 127
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	22 1f       	adc	r18, r18
    2d68:	22 27       	eor	r18, r18
    2d6a:	22 1f       	adc	r18, r18
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	89 2f       	mov	r24, r25
    2d70:	88 0f       	add	r24, r24
    2d72:	82 2b       	or	r24, r18
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	99 1f       	adc	r25, r25
    2d7a:	99 27       	eor	r25, r25
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	11 96       	adiw	r26, 0x01	; 1
    2d80:	9c 93       	st	X, r25
    2d82:	11 97       	sbiw	r26, 0x01	; 1
    2d84:	21 15       	cp	r18, r1
    2d86:	31 05       	cpc	r19, r1
    2d88:	a9 f5       	brne	.+106    	; 0x2df4 <__unpack_f+0x9e>
    2d8a:	41 15       	cp	r20, r1
    2d8c:	51 05       	cpc	r21, r1
    2d8e:	61 05       	cpc	r22, r1
    2d90:	71 05       	cpc	r23, r1
    2d92:	11 f4       	brne	.+4      	; 0x2d98 <__unpack_f+0x42>
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	37 c0       	rjmp	.+110    	; 0x2e06 <__unpack_f+0xb0>
    2d98:	82 e8       	ldi	r24, 0x82	; 130
    2d9a:	9f ef       	ldi	r25, 0xFF	; 255
    2d9c:	13 96       	adiw	r26, 0x03	; 3
    2d9e:	9c 93       	st	X, r25
    2da0:	8e 93       	st	-X, r24
    2da2:	12 97       	sbiw	r26, 0x02	; 2
    2da4:	9a 01       	movw	r18, r20
    2da6:	ab 01       	movw	r20, r22
    2da8:	67 e0       	ldi	r22, 0x07	; 7
    2daa:	22 0f       	add	r18, r18
    2dac:	33 1f       	adc	r19, r19
    2dae:	44 1f       	adc	r20, r20
    2db0:	55 1f       	adc	r21, r21
    2db2:	6a 95       	dec	r22
    2db4:	d1 f7       	brne	.-12     	; 0x2daa <__unpack_f+0x54>
    2db6:	83 e0       	ldi	r24, 0x03	; 3
    2db8:	8c 93       	st	X, r24
    2dba:	0d c0       	rjmp	.+26     	; 0x2dd6 <__unpack_f+0x80>
    2dbc:	22 0f       	add	r18, r18
    2dbe:	33 1f       	adc	r19, r19
    2dc0:	44 1f       	adc	r20, r20
    2dc2:	55 1f       	adc	r21, r21
    2dc4:	12 96       	adiw	r26, 0x02	; 2
    2dc6:	8d 91       	ld	r24, X+
    2dc8:	9c 91       	ld	r25, X
    2dca:	13 97       	sbiw	r26, 0x03	; 3
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	13 96       	adiw	r26, 0x03	; 3
    2dd0:	9c 93       	st	X, r25
    2dd2:	8e 93       	st	-X, r24
    2dd4:	12 97       	sbiw	r26, 0x02	; 2
    2dd6:	20 30       	cpi	r18, 0x00	; 0
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	38 07       	cpc	r19, r24
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	48 07       	cpc	r20, r24
    2de0:	80 e4       	ldi	r24, 0x40	; 64
    2de2:	58 07       	cpc	r21, r24
    2de4:	58 f3       	brcs	.-42     	; 0x2dbc <__unpack_f+0x66>
    2de6:	14 96       	adiw	r26, 0x04	; 4
    2de8:	2d 93       	st	X+, r18
    2dea:	3d 93       	st	X+, r19
    2dec:	4d 93       	st	X+, r20
    2dee:	5c 93       	st	X, r21
    2df0:	17 97       	sbiw	r26, 0x07	; 7
    2df2:	08 95       	ret
    2df4:	2f 3f       	cpi	r18, 0xFF	; 255
    2df6:	31 05       	cpc	r19, r1
    2df8:	79 f4       	brne	.+30     	; 0x2e18 <__unpack_f+0xc2>
    2dfa:	41 15       	cp	r20, r1
    2dfc:	51 05       	cpc	r21, r1
    2dfe:	61 05       	cpc	r22, r1
    2e00:	71 05       	cpc	r23, r1
    2e02:	19 f4       	brne	.+6      	; 0x2e0a <__unpack_f+0xb4>
    2e04:	84 e0       	ldi	r24, 0x04	; 4
    2e06:	8c 93       	st	X, r24
    2e08:	08 95       	ret
    2e0a:	64 ff       	sbrs	r22, 4
    2e0c:	03 c0       	rjmp	.+6      	; 0x2e14 <__unpack_f+0xbe>
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	8c 93       	st	X, r24
    2e12:	12 c0       	rjmp	.+36     	; 0x2e38 <__unpack_f+0xe2>
    2e14:	1c 92       	st	X, r1
    2e16:	10 c0       	rjmp	.+32     	; 0x2e38 <__unpack_f+0xe2>
    2e18:	2f 57       	subi	r18, 0x7F	; 127
    2e1a:	30 40       	sbci	r19, 0x00	; 0
    2e1c:	13 96       	adiw	r26, 0x03	; 3
    2e1e:	3c 93       	st	X, r19
    2e20:	2e 93       	st	-X, r18
    2e22:	12 97       	sbiw	r26, 0x02	; 2
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	8c 93       	st	X, r24
    2e28:	87 e0       	ldi	r24, 0x07	; 7
    2e2a:	44 0f       	add	r20, r20
    2e2c:	55 1f       	adc	r21, r21
    2e2e:	66 1f       	adc	r22, r22
    2e30:	77 1f       	adc	r23, r23
    2e32:	8a 95       	dec	r24
    2e34:	d1 f7       	brne	.-12     	; 0x2e2a <__unpack_f+0xd4>
    2e36:	70 64       	ori	r23, 0x40	; 64
    2e38:	14 96       	adiw	r26, 0x04	; 4
    2e3a:	4d 93       	st	X+, r20
    2e3c:	5d 93       	st	X+, r21
    2e3e:	6d 93       	st	X+, r22
    2e40:	7c 93       	st	X, r23
    2e42:	17 97       	sbiw	r26, 0x07	; 7
    2e44:	08 95       	ret

00002e46 <__fpcmp_parts_f>:
    2e46:	1f 93       	push	r17
    2e48:	dc 01       	movw	r26, r24
    2e4a:	fb 01       	movw	r30, r22
    2e4c:	9c 91       	ld	r25, X
    2e4e:	92 30       	cpi	r25, 0x02	; 2
    2e50:	08 f4       	brcc	.+2      	; 0x2e54 <__fpcmp_parts_f+0xe>
    2e52:	47 c0       	rjmp	.+142    	; 0x2ee2 <__fpcmp_parts_f+0x9c>
    2e54:	80 81       	ld	r24, Z
    2e56:	82 30       	cpi	r24, 0x02	; 2
    2e58:	08 f4       	brcc	.+2      	; 0x2e5c <__fpcmp_parts_f+0x16>
    2e5a:	43 c0       	rjmp	.+134    	; 0x2ee2 <__fpcmp_parts_f+0x9c>
    2e5c:	94 30       	cpi	r25, 0x04	; 4
    2e5e:	51 f4       	brne	.+20     	; 0x2e74 <__fpcmp_parts_f+0x2e>
    2e60:	11 96       	adiw	r26, 0x01	; 1
    2e62:	1c 91       	ld	r17, X
    2e64:	84 30       	cpi	r24, 0x04	; 4
    2e66:	99 f5       	brne	.+102    	; 0x2ece <__fpcmp_parts_f+0x88>
    2e68:	81 81       	ldd	r24, Z+1	; 0x01
    2e6a:	68 2f       	mov	r22, r24
    2e6c:	70 e0       	ldi	r23, 0x00	; 0
    2e6e:	61 1b       	sub	r22, r17
    2e70:	71 09       	sbc	r23, r1
    2e72:	3f c0       	rjmp	.+126    	; 0x2ef2 <__fpcmp_parts_f+0xac>
    2e74:	84 30       	cpi	r24, 0x04	; 4
    2e76:	21 f0       	breq	.+8      	; 0x2e80 <__fpcmp_parts_f+0x3a>
    2e78:	92 30       	cpi	r25, 0x02	; 2
    2e7a:	31 f4       	brne	.+12     	; 0x2e88 <__fpcmp_parts_f+0x42>
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	b9 f1       	breq	.+110    	; 0x2eee <__fpcmp_parts_f+0xa8>
    2e80:	81 81       	ldd	r24, Z+1	; 0x01
    2e82:	88 23       	and	r24, r24
    2e84:	89 f1       	breq	.+98     	; 0x2ee8 <__fpcmp_parts_f+0xa2>
    2e86:	2d c0       	rjmp	.+90     	; 0x2ee2 <__fpcmp_parts_f+0x9c>
    2e88:	11 96       	adiw	r26, 0x01	; 1
    2e8a:	1c 91       	ld	r17, X
    2e8c:	11 97       	sbiw	r26, 0x01	; 1
    2e8e:	82 30       	cpi	r24, 0x02	; 2
    2e90:	f1 f0       	breq	.+60     	; 0x2ece <__fpcmp_parts_f+0x88>
    2e92:	81 81       	ldd	r24, Z+1	; 0x01
    2e94:	18 17       	cp	r17, r24
    2e96:	d9 f4       	brne	.+54     	; 0x2ece <__fpcmp_parts_f+0x88>
    2e98:	12 96       	adiw	r26, 0x02	; 2
    2e9a:	2d 91       	ld	r18, X+
    2e9c:	3c 91       	ld	r19, X
    2e9e:	13 97       	sbiw	r26, 0x03	; 3
    2ea0:	82 81       	ldd	r24, Z+2	; 0x02
    2ea2:	93 81       	ldd	r25, Z+3	; 0x03
    2ea4:	82 17       	cp	r24, r18
    2ea6:	93 07       	cpc	r25, r19
    2ea8:	94 f0       	brlt	.+36     	; 0x2ece <__fpcmp_parts_f+0x88>
    2eaa:	28 17       	cp	r18, r24
    2eac:	39 07       	cpc	r19, r25
    2eae:	bc f0       	brlt	.+46     	; 0x2ede <__fpcmp_parts_f+0x98>
    2eb0:	14 96       	adiw	r26, 0x04	; 4
    2eb2:	8d 91       	ld	r24, X+
    2eb4:	9d 91       	ld	r25, X+
    2eb6:	0d 90       	ld	r0, X+
    2eb8:	bc 91       	ld	r27, X
    2eba:	a0 2d       	mov	r26, r0
    2ebc:	24 81       	ldd	r18, Z+4	; 0x04
    2ebe:	35 81       	ldd	r19, Z+5	; 0x05
    2ec0:	46 81       	ldd	r20, Z+6	; 0x06
    2ec2:	57 81       	ldd	r21, Z+7	; 0x07
    2ec4:	28 17       	cp	r18, r24
    2ec6:	39 07       	cpc	r19, r25
    2ec8:	4a 07       	cpc	r20, r26
    2eca:	5b 07       	cpc	r21, r27
    2ecc:	18 f4       	brcc	.+6      	; 0x2ed4 <__fpcmp_parts_f+0x8e>
    2ece:	11 23       	and	r17, r17
    2ed0:	41 f0       	breq	.+16     	; 0x2ee2 <__fpcmp_parts_f+0x9c>
    2ed2:	0a c0       	rjmp	.+20     	; 0x2ee8 <__fpcmp_parts_f+0xa2>
    2ed4:	82 17       	cp	r24, r18
    2ed6:	93 07       	cpc	r25, r19
    2ed8:	a4 07       	cpc	r26, r20
    2eda:	b5 07       	cpc	r27, r21
    2edc:	40 f4       	brcc	.+16     	; 0x2eee <__fpcmp_parts_f+0xa8>
    2ede:	11 23       	and	r17, r17
    2ee0:	19 f0       	breq	.+6      	; 0x2ee8 <__fpcmp_parts_f+0xa2>
    2ee2:	61 e0       	ldi	r22, 0x01	; 1
    2ee4:	70 e0       	ldi	r23, 0x00	; 0
    2ee6:	05 c0       	rjmp	.+10     	; 0x2ef2 <__fpcmp_parts_f+0xac>
    2ee8:	6f ef       	ldi	r22, 0xFF	; 255
    2eea:	7f ef       	ldi	r23, 0xFF	; 255
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <__fpcmp_parts_f+0xac>
    2eee:	60 e0       	ldi	r22, 0x00	; 0
    2ef0:	70 e0       	ldi	r23, 0x00	; 0
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	1f 91       	pop	r17
    2ef6:	08 95       	ret

00002ef8 <M_Timer_Void_TimerInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerInit(void)
{
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
#if   TIMER0_MODE   ==   NORMAL_MODE
	CLEAR_BIT(TCCR0_REG,WGM00_BIT);
    2f00:	a3 e5       	ldi	r26, 0x53	; 83
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	e3 e5       	ldi	r30, 0x53	; 83
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	8f 7b       	andi	r24, 0xBF	; 191
    2f0c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_REG,WGM01_BIT);
    2f0e:	a3 e5       	ldi	r26, 0x53	; 83
    2f10:	b0 e0       	ldi	r27, 0x00	; 0
    2f12:	e3 e5       	ldi	r30, 0x53	; 83
    2f14:	f0 e0       	ldi	r31, 0x00	; 0
    2f16:	80 81       	ld	r24, Z
    2f18:	87 7f       	andi	r24, 0xF7	; 247
    2f1a:	8c 93       	st	X, r24
	/* TO ENABLE TIMER0 OV INTERRUPT */
	SET_BIT(TIMSK_REG,TOIE0_BIT);
    2f1c:	a9 e5       	ldi	r26, 0x59	; 89
    2f1e:	b0 e0       	ldi	r27, 0x00	; 0
    2f20:	e9 e5       	ldi	r30, 0x59	; 89
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	81 60       	ori	r24, 0x01	; 1
    2f28:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_REG,WGM00_BIT);
	SET_BIT(TCCR0_REG,WGM01_BIT);
	/* TO ENABLE TIMER0 CM INTERRUPT */
	SET_BIT(TIMSK_REG,OCIE0_BIT);
#endif
}
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <M_Timer_Void_TimerSetTime>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerSetTime(u32 Copy_U32_DesiredTime)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	2c 97       	sbiw	r28, 0x0c	; 12
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	69 87       	std	Y+9, r22	; 0x09
    2f46:	7a 87       	std	Y+10, r23	; 0x0a
    2f48:	8b 87       	std	Y+11, r24	; 0x0b
    2f4a:	9c 87       	std	Y+12, r25	; 0x0c
	u32 Local_U32_TickTime   = TIMER0_PRESCALER_DF / F_OSC; /* RESULT WILL BE IN MICRO SECONDS */
    2f4c:	80 e4       	ldi	r24, 0x40	; 64
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a0 e0       	ldi	r26, 0x00	; 0
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	8d 83       	std	Y+5, r24	; 0x05
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	af 83       	std	Y+7, r26	; 0x07
    2f5a:	b8 87       	std	Y+8, r27	; 0x08
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000) / Local_U32_TickTime;
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	ab 85       	ldd	r26, Y+11	; 0x0b
    2f62:	bc 85       	ldd	r27, Y+12	; 0x0c
    2f64:	28 ee       	ldi	r18, 0xE8	; 232
    2f66:	33 e0       	ldi	r19, 0x03	; 3
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	2d 81       	ldd	r18, Y+5	; 0x05
    2f7a:	3e 81       	ldd	r19, Y+6	; 0x06
    2f7c:	4f 81       	ldd	r20, Y+7	; 0x07
    2f7e:	58 85       	ldd	r21, Y+8	; 0x08
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    2f88:	da 01       	movw	r26, r20
    2f8a:	c9 01       	movw	r24, r18
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	ab 83       	std	Y+3, r26	; 0x03
    2f92:	bc 83       	std	Y+4, r27	; 0x04

#if   TIMER0_MODE   ==   NORMAL_MODE
	Timer_U32_NumOfOV        = Local_U32_TotalTicks / 256;
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	ab 81       	ldd	r26, Y+3	; 0x03
    2f9a:	bc 81       	ldd	r27, Y+4	; 0x04
    2f9c:	89 2f       	mov	r24, r25
    2f9e:	9a 2f       	mov	r25, r26
    2fa0:	ab 2f       	mov	r26, r27
    2fa2:	bb 27       	eor	r27, r27
    2fa4:	80 93 4c 02 	sts	0x024C, r24
    2fa8:	90 93 4d 02 	sts	0x024D, r25
    2fac:	a0 93 4e 02 	sts	0x024E, r26
    2fb0:	b0 93 4f 02 	sts	0x024F, r27
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	80 93 54 02 	sts	0x0254, r24
	if(Timer_U8_RemTicks != 0)
    2fba:	80 91 54 02 	lds	r24, 0x0254
    2fbe:	88 23       	and	r24, r24
    2fc0:	c9 f0       	breq	.+50     	; 0x2ff4 <M_Timer_Void_TimerSetTime+0xc4>
	{
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    2fc2:	e2 e5       	ldi	r30, 0x52	; 82
    2fc4:	f0 e0       	ldi	r31, 0x00	; 0
    2fc6:	80 91 54 02 	lds	r24, 0x0254
    2fca:	81 95       	neg	r24
    2fcc:	80 83       	st	Z, r24
		Timer_U32_NumOfOV++;
    2fce:	80 91 4c 02 	lds	r24, 0x024C
    2fd2:	90 91 4d 02 	lds	r25, 0x024D
    2fd6:	a0 91 4e 02 	lds	r26, 0x024E
    2fda:	b0 91 4f 02 	lds	r27, 0x024F
    2fde:	01 96       	adiw	r24, 0x01	; 1
    2fe0:	a1 1d       	adc	r26, r1
    2fe2:	b1 1d       	adc	r27, r1
    2fe4:	80 93 4c 02 	sts	0x024C, r24
    2fe8:	90 93 4d 02 	sts	0x024D, r25
    2fec:	a0 93 4e 02 	sts	0x024E, r26
    2ff0:	b0 93 4f 02 	sts	0x024F, r27
		Local_U8_DivisionValue--;
	}
	OCR0_REG = Local_U8_DivisionValue - 1;
	Timer_U32_NumOfCM = Local_U32_TotalTicks / Local_U8_DivisionValue;
#endif
}
    2ff4:	2c 96       	adiw	r28, 0x0c	; 12
    2ff6:	0f b6       	in	r0, 0x3f	; 63
    2ff8:	f8 94       	cli
    2ffa:	de bf       	out	0x3e, r29	; 62
    2ffc:	0f be       	out	0x3f, r0	; 63
    2ffe:	cd bf       	out	0x3d, r28	; 61
    3000:	cf 91       	pop	r28
    3002:	df 91       	pop	r29
    3004:	08 95       	ret

00003006 <M_Timer_Void_TimerStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	00 d0       	rcall	.+0      	; 0x300c <M_Timer_Void_TimerStart+0x6>
    300c:	0f 92       	push	r0
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    3012:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	28 2f       	mov	r18, r24
    3018:	30 e0       	ldi	r19, 0x00	; 0
    301a:	3b 83       	std	Y+3, r19	; 0x03
    301c:	2a 83       	std	Y+2, r18	; 0x02
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	9b 81       	ldd	r25, Y+3	; 0x03
    3022:	00 97       	sbiw	r24, 0x00	; 0
    3024:	31 f0       	breq	.+12     	; 0x3032 <M_Timer_Void_TimerStart+0x2c>
    3026:	2a 81       	ldd	r18, Y+2	; 0x02
    3028:	3b 81       	ldd	r19, Y+3	; 0x03
    302a:	21 30       	cpi	r18, 0x01	; 1
    302c:	31 05       	cpc	r19, r1
    302e:	b9 f0       	breq	.+46     	; 0x305e <M_Timer_Void_TimerStart+0x58>
    3030:	2b c0       	rjmp	.+86     	; 0x3088 <M_Timer_Void_TimerStart+0x82>
	{
	case TIMER0_CHANNEL:
#if   TIMER0_PRESCALER_DF   ==   1024
	SET_BIT(TCCR0_REG,CS00_BIT);
    3032:	a3 e5       	ldi	r26, 0x53	; 83
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	e3 e5       	ldi	r30, 0x53	; 83
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	81 60       	ori	r24, 0x01	; 1
    303e:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0_REG,CS01_BIT);
    3040:	a3 e5       	ldi	r26, 0x53	; 83
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e3 e5       	ldi	r30, 0x53	; 83
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	8d 7f       	andi	r24, 0xFD	; 253
    304c:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
    304e:	a3 e5       	ldi	r26, 0x53	; 83
    3050:	b0 e0       	ldi	r27, 0x00	; 0
    3052:	e3 e5       	ldi	r30, 0x53	; 83
    3054:	f0 e0       	ldi	r31, 0x00	; 0
    3056:	80 81       	ld	r24, Z
    3058:	84 60       	ori	r24, 0x04	; 4
    305a:	8c 93       	st	X, r24
    305c:	15 c0       	rjmp	.+42     	; 0x3088 <M_Timer_Void_TimerStart+0x82>
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
		break;
	case TIMER1_CHANNEL:
#if   TIMER1_PRESCALER_DF   ==   1024
		SET_BIT(TCCR1B_REG,CS10_BIT);
    305e:	ae e4       	ldi	r26, 0x4E	; 78
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	ee e4       	ldi	r30, 0x4E	; 78
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	81 60       	ori	r24, 0x01	; 1
    306a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_REG,CS11_BIT);
    306c:	ae e4       	ldi	r26, 0x4E	; 78
    306e:	b0 e0       	ldi	r27, 0x00	; 0
    3070:	ee e4       	ldi	r30, 0x4E	; 78
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	8d 7f       	andi	r24, 0xFD	; 253
    3078:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
    307a:	ae e4       	ldi	r26, 0x4E	; 78
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ee e4       	ldi	r30, 0x4E	; 78
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	84 60       	ori	r24, 0x04	; 4
    3086:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    3088:	0f 90       	pop	r0
    308a:	0f 90       	pop	r0
    308c:	0f 90       	pop	r0
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <M_Timer_Void_TimerStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	00 d0       	rcall	.+0      	; 0x309a <M_Timer_Void_TimerStop+0x6>
    309a:	0f 92       	push	r0
    309c:	cd b7       	in	r28, 0x3d	; 61
    309e:	de b7       	in	r29, 0x3e	; 62
    30a0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    30a2:	89 81       	ldd	r24, Y+1	; 0x01
    30a4:	28 2f       	mov	r18, r24
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	3b 83       	std	Y+3, r19	; 0x03
    30aa:	2a 83       	std	Y+2, r18	; 0x02
    30ac:	8a 81       	ldd	r24, Y+2	; 0x02
    30ae:	9b 81       	ldd	r25, Y+3	; 0x03
    30b0:	00 97       	sbiw	r24, 0x00	; 0
    30b2:	31 f0       	breq	.+12     	; 0x30c0 <M_Timer_Void_TimerStop+0x2c>
    30b4:	2a 81       	ldd	r18, Y+2	; 0x02
    30b6:	3b 81       	ldd	r19, Y+3	; 0x03
    30b8:	21 30       	cpi	r18, 0x01	; 1
    30ba:	31 05       	cpc	r19, r1
    30bc:	b9 f0       	breq	.+46     	; 0x30ec <M_Timer_Void_TimerStop+0x58>
    30be:	2b c0       	rjmp	.+86     	; 0x3116 <M_Timer_Void_TimerStop+0x82>
	{
	case TIMER0_CHANNEL:
		CLEAR_BIT(TCCR0_REG,CS00_BIT);
    30c0:	a3 e5       	ldi	r26, 0x53	; 83
    30c2:	b0 e0       	ldi	r27, 0x00	; 0
    30c4:	e3 e5       	ldi	r30, 0x53	; 83
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	8e 7f       	andi	r24, 0xFE	; 254
    30cc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_REG,CS01_BIT);
    30ce:	a3 e5       	ldi	r26, 0x53	; 83
    30d0:	b0 e0       	ldi	r27, 0x00	; 0
    30d2:	e3 e5       	ldi	r30, 0x53	; 83
    30d4:	f0 e0       	ldi	r31, 0x00	; 0
    30d6:	80 81       	ld	r24, Z
    30d8:	8d 7f       	andi	r24, 0xFD	; 253
    30da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0_REG,CS02_BIT);
    30dc:	a3 e5       	ldi	r26, 0x53	; 83
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e3 e5       	ldi	r30, 0x53	; 83
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	8b 7f       	andi	r24, 0xFB	; 251
    30e8:	8c 93       	st	X, r24
    30ea:	15 c0       	rjmp	.+42     	; 0x3116 <M_Timer_Void_TimerStop+0x82>

		break;
	case TIMER1_CHANNEL:
		CLEAR_BIT(TCCR1B_REG,CS10_BIT);
    30ec:	ae e4       	ldi	r26, 0x4E	; 78
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	ee e4       	ldi	r30, 0x4E	; 78
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	8e 7f       	andi	r24, 0xFE	; 254
    30f8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_REG,CS11_BIT);
    30fa:	ae e4       	ldi	r26, 0x4E	; 78
    30fc:	b0 e0       	ldi	r27, 0x00	; 0
    30fe:	ee e4       	ldi	r30, 0x4E	; 78
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	8d 7f       	andi	r24, 0xFD	; 253
    3106:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B_REG,CS12_BIT);
    3108:	ae e4       	ldi	r26, 0x4E	; 78
    310a:	b0 e0       	ldi	r27, 0x00	; 0
    310c:	ee e4       	ldi	r30, 0x4E	; 78
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	80 81       	ld	r24, Z
    3112:	8b 7f       	andi	r24, 0xFB	; 251
    3114:	8c 93       	st	X, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    3116:	0f 90       	pop	r0
    3118:	0f 90       	pop	r0
    311a:	0f 90       	pop	r0
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <M_Timer_Void_PWMInit>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
    3122:	df 93       	push	r29
    3124:	cf 93       	push	r28
    3126:	00 d0       	rcall	.+0      	; 0x3128 <M_Timer_Void_PWMInit+0x6>
    3128:	0f 92       	push	r0
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	3b 83       	std	Y+3, r19	; 0x03
    3138:	2a 83       	std	Y+2, r18	; 0x02
    313a:	8a 81       	ldd	r24, Y+2	; 0x02
    313c:	9b 81       	ldd	r25, Y+3	; 0x03
    313e:	00 97       	sbiw	r24, 0x00	; 0
    3140:	31 f0       	breq	.+12     	; 0x314e <M_Timer_Void_PWMInit+0x2c>
    3142:	2a 81       	ldd	r18, Y+2	; 0x02
    3144:	3b 81       	ldd	r19, Y+3	; 0x03
    3146:	21 30       	cpi	r18, 0x01	; 1
    3148:	31 05       	cpc	r19, r1
    314a:	a9 f0       	breq	.+42     	; 0x3176 <M_Timer_Void_PWMInit+0x54>
    314c:	49 c0       	rjmp	.+146    	; 0x31e0 <M_Timer_Void_PWMInit+0xbe>
	{
	case TIMER0_CHANNEL:
		DIO_Set_Pin_Direction(PORT_B , PIN3,OUTPUT);
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	63 e0       	ldi	r22, 0x03	; 3
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	#elif TIMER0_MODE   ==   PHASE_CORRECT_PWM_MODE
		SET_BIT(TCCR0_REG,WGM00_BIT);
		CLEAR_BIT(TCCR0_REG,WGM01_BIT);
	#endif
	#if   TIMER0_FAST_PWM_MODE   ==   NON_INVERTED
		CLEAR_BIT(TCCR0_REG,COM00_BIT);
    3158:	a3 e5       	ldi	r26, 0x53	; 83
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	e3 e5       	ldi	r30, 0x53	; 83
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8f 7e       	andi	r24, 0xEF	; 239
    3164:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,COM01_BIT);
    3166:	a3 e5       	ldi	r26, 0x53	; 83
    3168:	b0 e0       	ldi	r27, 0x00	; 0
    316a:	e3 e5       	ldi	r30, 0x53	; 83
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	80 62       	ori	r24, 0x20	; 32
    3172:	8c 93       	st	X, r24
    3174:	35 c0       	rjmp	.+106    	; 0x31e0 <M_Timer_Void_PWMInit+0xbe>
		SET_BIT(TCCR0_REG,COM00_BIT);
		SET_BIT(TCCR0_REG,COM01_BIT);
	#endif
		break;
	case TIMER1_CHANNEL:
		DIO_Set_Pin_Direction(PORT_D , PIN5,OUTPUT);
    3176:	83 e0       	ldi	r24, 0x03	; 3
    3178:	65 e0       	ldi	r22, 0x05	; 5
    317a:	40 e0       	ldi	r20, 0x00	; 0
    317c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
		/* TO SELECT MODE NO. 14 IN TABLE 47 */
		CLEAR_BIT(TCCR1A_REG,WGM10_BIT);
    3180:	af e4       	ldi	r26, 0x4F	; 79
    3182:	b0 e0       	ldi	r27, 0x00	; 0
    3184:	ef e4       	ldi	r30, 0x4F	; 79
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	8e 7f       	andi	r24, 0xFE	; 254
    318c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    318e:	af e4       	ldi	r26, 0x4F	; 79
    3190:	b0 e0       	ldi	r27, 0x00	; 0
    3192:	ef e4       	ldi	r30, 0x4F	; 79
    3194:	f0 e0       	ldi	r31, 0x00	; 0
    3196:	80 81       	ld	r24, Z
    3198:	82 60       	ori	r24, 0x02	; 2
    319a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    319c:	ae e4       	ldi	r26, 0x4E	; 78
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	ee e4       	ldi	r30, 0x4E	; 78
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	88 60       	ori	r24, 0x08	; 8
    31a8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    31aa:	ae e4       	ldi	r26, 0x4E	; 78
    31ac:	b0 e0       	ldi	r27, 0x00	; 0
    31ae:	ee e4       	ldi	r30, 0x4E	; 78
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	80 81       	ld	r24, Z
    31b4:	80 61       	ori	r24, 0x10	; 16
    31b6:	8c 93       	st	X, r24
		/* TO SELECT NON INVERTED MODE */
		CLEAR_BIT(TCCR1A_REG,COM1A0_BIT);
    31b8:	af e4       	ldi	r26, 0x4F	; 79
    31ba:	b0 e0       	ldi	r27, 0x00	; 0
    31bc:	ef e4       	ldi	r30, 0x4F	; 79
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8f 7b       	andi	r24, 0xBF	; 191
    31c4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    31c6:	af e4       	ldi	r26, 0x4F	; 79
    31c8:	b0 e0       	ldi	r27, 0x00	; 0
    31ca:	ef e4       	ldi	r30, 0x4F	; 79
    31cc:	f0 e0       	ldi	r31, 0x00	; 0
    31ce:	80 81       	ld	r24, Z
    31d0:	80 68       	ori	r24, 0x80	; 128
    31d2:	8c 93       	st	X, r24
		ICR1_REG = ((F_OSC * 1000000) / TIMER1_PRESCALER_DF) / F_PWM1;
    31d4:	e6 e4       	ldi	r30, 0x46	; 70
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	84 e0       	ldi	r24, 0x04	; 4
    31da:	91 e0       	ldi	r25, 0x01	; 1
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	08 95       	ret

000031ec <M_Timer_Void_PWMSetDutyCycle>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	df 93       	push	r29
    31f2:	cf 93       	push	r28
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	27 97       	sbiw	r28, 0x07	; 7
    31fa:	0f b6       	in	r0, 0x3f	; 63
    31fc:	f8 94       	cli
    31fe:	de bf       	out	0x3e, r29	; 62
    3200:	0f be       	out	0x3f, r0	; 63
    3202:	cd bf       	out	0x3d, r28	; 61
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	4a 83       	std	Y+2, r20	; 0x02
    3208:	5b 83       	std	Y+3, r21	; 0x03
    320a:	6c 83       	std	Y+4, r22	; 0x04
    320c:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_U8_TimerChannel)
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	3f 83       	std	Y+7, r19	; 0x07
    3216:	2e 83       	std	Y+6, r18	; 0x06
    3218:	8e 81       	ldd	r24, Y+6	; 0x06
    321a:	9f 81       	ldd	r25, Y+7	; 0x07
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	d9 f1       	breq	.+118    	; 0x3296 <M_Timer_Void_PWMSetDutyCycle+0xaa>
    3220:	ee 81       	ldd	r30, Y+6	; 0x06
    3222:	ff 81       	ldd	r31, Y+7	; 0x07
    3224:	e1 30       	cpi	r30, 0x01	; 1
    3226:	f1 05       	cpc	r31, r1
    3228:	b1 f5       	brne	.+108    	; 0x3296 <M_Timer_Void_PWMSetDutyCycle+0xaa>
	OCR0_REG = ((Copy_F32_DutyCycle * 255 ) / 100);
#endif

		break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG ) / 100) - 1;
    322a:	0a e4       	ldi	r16, 0x4A	; 74
    322c:	10 e0       	ldi	r17, 0x00	; 0
    322e:	e6 e4       	ldi	r30, 0x46	; 70
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	cc 01       	movw	r24, r24
    3238:	a0 e0       	ldi	r26, 0x00	; 0
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	bc 01       	movw	r22, r24
    323e:	cd 01       	movw	r24, r26
    3240:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__floatunsisf>
    3244:	dc 01       	movw	r26, r24
    3246:	cb 01       	movw	r24, r22
    3248:	bc 01       	movw	r22, r24
    324a:	cd 01       	movw	r24, r26
    324c:	2a 81       	ldd	r18, Y+2	; 0x02
    324e:	3b 81       	ldd	r19, Y+3	; 0x03
    3250:	4c 81       	ldd	r20, Y+4	; 0x04
    3252:	5d 81       	ldd	r21, Y+5	; 0x05
    3254:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	bc 01       	movw	r22, r24
    325e:	cd 01       	movw	r24, r26
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	48 ec       	ldi	r20, 0xC8	; 200
    3266:	52 e4       	ldi	r21, 0x42	; 66
    3268:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__divsf3>
    326c:	dc 01       	movw	r26, r24
    326e:	cb 01       	movw	r24, r22
    3270:	bc 01       	movw	r22, r24
    3272:	cd 01       	movw	r24, r26
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e8       	ldi	r20, 0x80	; 128
    327a:	5f e3       	ldi	r21, 0x3F	; 63
    327c:	0e 94 26 12 	call	0x244c	; 0x244c <__subsf3>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	bc 01       	movw	r22, r24
    3286:	cd 01       	movw	r24, r26
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	f8 01       	movw	r30, r16
    3292:	91 83       	std	Z+1, r25	; 0x01
    3294:	80 83       	st	Z, r24
		break;
	case TIMER2_CHANNEL:
		break;
	default: break;
	}
}
    3296:	27 96       	adiw	r28, 0x07	; 7
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
    32a2:	cf 91       	pop	r28
    32a4:	df 91       	pop	r29
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	08 95       	ret

000032ac <M_Timer_Void_PWMStart>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStart(u8 Copy_U8_TimerChannel)
{
    32ac:	df 93       	push	r29
    32ae:	cf 93       	push	r28
    32b0:	0f 92       	push	r0
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStart(Copy_U8_TimerChannel);
    32b8:	89 81       	ldd	r24, Y+1	; 0x01
    32ba:	0e 94 03 18 	call	0x3006	; 0x3006 <M_Timer_Void_TimerStart>
}
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <M_Timer_Void_PWMStop>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_PWMStop(u8 Copy_U8_TimerChannel)
{
    32c6:	df 93       	push	r29
    32c8:	cf 93       	push	r28
    32ca:	0f 92       	push	r0
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	89 83       	std	Y+1, r24	; 0x01
	M_Timer_Void_TimerStop(Copy_U8_TimerChannel);
    32d2:	89 81       	ldd	r24, Y+1	; 0x01
    32d4:	0e 94 4a 18 	call	0x3094	; 0x3094 <M_Timer_Void_TimerStop>
}
    32d8:	0f 90       	pop	r0
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <M_Timer_Void_SetCallBack>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_Timer_Void_SetCallBack(void(*Copy_Ptr)(void))
{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <M_Timer_Void_SetCallBack+0x6>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	89 83       	std	Y+1, r24	; 0x01
	Timer_CallBack = Copy_Ptr;
    32ee:	89 81       	ldd	r24, Y+1	; 0x01
    32f0:	9a 81       	ldd	r25, Y+2	; 0x02
    32f2:	90 93 a4 02 	sts	0x02A4, r25
    32f6:	80 93 a3 02 	sts	0x02A3, r24
}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	cf 91       	pop	r28
    3300:	df 91       	pop	r29
    3302:	08 95       	ret

00003304 <__vector_11>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    3304:	1f 92       	push	r1
    3306:	0f 92       	push	r0
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	0f 92       	push	r0
    330c:	11 24       	eor	r1, r1
    330e:	2f 93       	push	r18
    3310:	3f 93       	push	r19
    3312:	4f 93       	push	r20
    3314:	5f 93       	push	r21
    3316:	6f 93       	push	r22
    3318:	7f 93       	push	r23
    331a:	8f 93       	push	r24
    331c:	9f 93       	push	r25
    331e:	af 93       	push	r26
    3320:	bf 93       	push	r27
    3322:	ef 93       	push	r30
    3324:	ff 93       	push	r31
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    332e:	80 91 55 02 	lds	r24, 0x0255
    3332:	90 91 56 02 	lds	r25, 0x0256
    3336:	a0 91 57 02 	lds	r26, 0x0257
    333a:	b0 91 58 02 	lds	r27, 0x0258
    333e:	01 96       	adiw	r24, 0x01	; 1
    3340:	a1 1d       	adc	r26, r1
    3342:	b1 1d       	adc	r27, r1
    3344:	80 93 55 02 	sts	0x0255, r24
    3348:	90 93 56 02 	sts	0x0256, r25
    334c:	a0 93 57 02 	sts	0x0257, r26
    3350:	b0 93 58 02 	sts	0x0258, r27
	if(Local_U32_Counter == Timer_U32_NumOfOV)
    3354:	20 91 55 02 	lds	r18, 0x0255
    3358:	30 91 56 02 	lds	r19, 0x0256
    335c:	40 91 57 02 	lds	r20, 0x0257
    3360:	50 91 58 02 	lds	r21, 0x0258
    3364:	80 91 4c 02 	lds	r24, 0x024C
    3368:	90 91 4d 02 	lds	r25, 0x024D
    336c:	a0 91 4e 02 	lds	r26, 0x024E
    3370:	b0 91 4f 02 	lds	r27, 0x024F
    3374:	28 17       	cp	r18, r24
    3376:	39 07       	cpc	r19, r25
    3378:	4a 07       	cpc	r20, r26
    337a:	5b 07       	cpc	r21, r27
    337c:	99 f4       	brne	.+38     	; 0x33a4 <__vector_11+0xa0>
	{
		Timer_CallBack();
    337e:	e0 91 a3 02 	lds	r30, 0x02A3
    3382:	f0 91 a4 02 	lds	r31, 0x02A4
    3386:	09 95       	icall
		Local_U32_Counter = 0;
    3388:	10 92 55 02 	sts	0x0255, r1
    338c:	10 92 56 02 	sts	0x0256, r1
    3390:	10 92 57 02 	sts	0x0257, r1
    3394:	10 92 58 02 	sts	0x0258, r1
		TCNT0_REG = 256 - Timer_U8_RemTicks;
    3398:	e2 e5       	ldi	r30, 0x52	; 82
    339a:	f0 e0       	ldi	r31, 0x00	; 0
    339c:	80 91 54 02 	lds	r24, 0x0254
    33a0:	81 95       	neg	r24
    33a2:	80 83       	st	Z, r24
	}
}
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	ff 91       	pop	r31
    33aa:	ef 91       	pop	r30
    33ac:	bf 91       	pop	r27
    33ae:	af 91       	pop	r26
    33b0:	9f 91       	pop	r25
    33b2:	8f 91       	pop	r24
    33b4:	7f 91       	pop	r23
    33b6:	6f 91       	pop	r22
    33b8:	5f 91       	pop	r21
    33ba:	4f 91       	pop	r20
    33bc:	3f 91       	pop	r19
    33be:	2f 91       	pop	r18
    33c0:	0f 90       	pop	r0
    33c2:	0f be       	out	0x3f, r0	; 63
    33c4:	0f 90       	pop	r0
    33c6:	1f 90       	pop	r1
    33c8:	18 95       	reti

000033ca <EXTI_Enable>:




void EXTI_Enable  ( EXTI_t exti_num)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <EXTI_Enable+0x6>
    33d0:	0f 92       	push	r0
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	89 83       	std	Y+1, r24	; 0x01
	switch(exti_num)
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	3b 83       	std	Y+3, r19	; 0x03
    33e0:	2a 83       	std	Y+2, r18	; 0x02
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	9b 81       	ldd	r25, Y+3	; 0x03
    33e6:	81 30       	cpi	r24, 0x01	; 1
    33e8:	91 05       	cpc	r25, r1
    33ea:	89 f0       	breq	.+34     	; 0x340e <EXTI_Enable+0x44>
    33ec:	2a 81       	ldd	r18, Y+2	; 0x02
    33ee:	3b 81       	ldd	r19, Y+3	; 0x03
    33f0:	22 30       	cpi	r18, 0x02	; 2
    33f2:	31 05       	cpc	r19, r1
    33f4:	a1 f0       	breq	.+40     	; 0x341e <EXTI_Enable+0x54>
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	9b 81       	ldd	r25, Y+3	; 0x03
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	b9 f4       	brne	.+46     	; 0x342c <EXTI_Enable+0x62>
	{
		case EXTI0 :
		SET_BIT(GICR , INT0);
    33fe:	ab e5       	ldi	r26, 0x5B	; 91
    3400:	b0 e0       	ldi	r27, 0x00	; 0
    3402:	eb e5       	ldi	r30, 0x5B	; 91
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	80 81       	ld	r24, Z
    3408:	80 64       	ori	r24, 0x40	; 64
    340a:	8c 93       	st	X, r24
    340c:	0f c0       	rjmp	.+30     	; 0x342c <EXTI_Enable+0x62>
		break ;
		
		case EXTI1 :
		SET_BIT(GICR , INT1);
    340e:	ab e5       	ldi	r26, 0x5B	; 91
    3410:	b0 e0       	ldi	r27, 0x00	; 0
    3412:	eb e5       	ldi	r30, 0x5B	; 91
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	80 81       	ld	r24, Z
    3418:	80 68       	ori	r24, 0x80	; 128
    341a:	8c 93       	st	X, r24
    341c:	07 c0       	rjmp	.+14     	; 0x342c <EXTI_Enable+0x62>
		break ;
		
		case EXTI2 :
		SET_BIT(GICR , INT2);
    341e:	ab e5       	ldi	r26, 0x5B	; 91
    3420:	b0 e0       	ldi	r27, 0x00	; 0
    3422:	eb e5       	ldi	r30, 0x5B	; 91
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	80 81       	ld	r24, Z
    3428:	80 62       	ori	r24, 0x20	; 32
    342a:	8c 93       	st	X, r24
		break ;
	}
}
    342c:	0f 90       	pop	r0
    342e:	0f 90       	pop	r0
    3430:	0f 90       	pop	r0
    3432:	cf 91       	pop	r28
    3434:	df 91       	pop	r29
    3436:	08 95       	ret

00003438 <EXTI_Disable>:

void EXTI_Disable ( EXTI_t exti_num)
{
    3438:	df 93       	push	r29
    343a:	cf 93       	push	r28
    343c:	00 d0       	rcall	.+0      	; 0x343e <EXTI_Disable+0x6>
    343e:	0f 92       	push	r0
    3440:	cd b7       	in	r28, 0x3d	; 61
    3442:	de b7       	in	r29, 0x3e	; 62
    3444:	89 83       	std	Y+1, r24	; 0x01
	switch(exti_num)
    3446:	89 81       	ldd	r24, Y+1	; 0x01
    3448:	28 2f       	mov	r18, r24
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	3b 83       	std	Y+3, r19	; 0x03
    344e:	2a 83       	std	Y+2, r18	; 0x02
    3450:	8a 81       	ldd	r24, Y+2	; 0x02
    3452:	9b 81       	ldd	r25, Y+3	; 0x03
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	91 05       	cpc	r25, r1
    3458:	89 f0       	breq	.+34     	; 0x347c <EXTI_Disable+0x44>
    345a:	2a 81       	ldd	r18, Y+2	; 0x02
    345c:	3b 81       	ldd	r19, Y+3	; 0x03
    345e:	22 30       	cpi	r18, 0x02	; 2
    3460:	31 05       	cpc	r19, r1
    3462:	a1 f0       	breq	.+40     	; 0x348c <EXTI_Disable+0x54>
    3464:	8a 81       	ldd	r24, Y+2	; 0x02
    3466:	9b 81       	ldd	r25, Y+3	; 0x03
    3468:	00 97       	sbiw	r24, 0x00	; 0
    346a:	b9 f4       	brne	.+46     	; 0x349a <EXTI_Disable+0x62>
	{
		case EXTI0 :
		CLEAR_BIT(GICR , INT0);
    346c:	ab e5       	ldi	r26, 0x5B	; 91
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	eb e5       	ldi	r30, 0x5B	; 91
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	8f 7b       	andi	r24, 0xBF	; 191
    3478:	8c 93       	st	X, r24
    347a:	0f c0       	rjmp	.+30     	; 0x349a <EXTI_Disable+0x62>
		break ;
		
		case EXTI1 :
		CLEAR_BIT(GICR , INT1);
    347c:	ab e5       	ldi	r26, 0x5B	; 91
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	eb e5       	ldi	r30, 0x5B	; 91
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	8f 77       	andi	r24, 0x7F	; 127
    3488:	8c 93       	st	X, r24
    348a:	07 c0       	rjmp	.+14     	; 0x349a <EXTI_Disable+0x62>
		break ;
		
		case EXTI2 :
		CLEAR_BIT(GICR , INT2);
    348c:	ab e5       	ldi	r26, 0x5B	; 91
    348e:	b0 e0       	ldi	r27, 0x00	; 0
    3490:	eb e5       	ldi	r30, 0x5B	; 91
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	80 81       	ld	r24, Z
    3496:	8f 7d       	andi	r24, 0xDF	; 223
    3498:	8c 93       	st	X, r24
	}	
}
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	0f 90       	pop	r0
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <EXTI_SetTriggerEdge>:

void EXTI_SetTriggerEdge (EXTI_t exti_num , EXTI_TRIGGER_EDGE_t edge) 
{
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    34ae:	28 97       	sbiw	r28, 0x08	; 8
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	89 83       	std	Y+1, r24	; 0x01
    34bc:	6a 83       	std	Y+2, r22	; 0x02
	switch (exti_num) 
    34be:	89 81       	ldd	r24, Y+1	; 0x01
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	38 87       	std	Y+8, r19	; 0x08
    34c6:	2f 83       	std	Y+7, r18	; 0x07
    34c8:	8f 81       	ldd	r24, Y+7	; 0x07
    34ca:	98 85       	ldd	r25, Y+8	; 0x08
    34cc:	81 30       	cpi	r24, 0x01	; 1
    34ce:	91 05       	cpc	r25, r1
    34d0:	d9 f0       	breq	.+54     	; 0x3508 <EXTI_SetTriggerEdge+0x62>
    34d2:	2f 81       	ldd	r18, Y+7	; 0x07
    34d4:	38 85       	ldd	r19, Y+8	; 0x08
    34d6:	22 30       	cpi	r18, 0x02	; 2
    34d8:	31 05       	cpc	r19, r1
    34da:	09 f4       	brne	.+2      	; 0x34de <EXTI_SetTriggerEdge+0x38>
    34dc:	6f c0       	rjmp	.+222    	; 0x35bc <EXTI_SetTriggerEdge+0x116>
    34de:	8f 81       	ldd	r24, Y+7	; 0x07
    34e0:	98 85       	ldd	r25, Y+8	; 0x08
    34e2:	00 97       	sbiw	r24, 0x00	; 0
    34e4:	09 f0       	breq	.+2      	; 0x34e8 <EXTI_SetTriggerEdge+0x42>
    34e6:	93 c0       	rjmp	.+294    	; 0x360e <EXTI_SetTriggerEdge+0x168>
	{
		case EXTI0 :
			MCUCR &= 0xFC ;
    34e8:	a5 e5       	ldi	r26, 0x55	; 85
    34ea:	b0 e0       	ldi	r27, 0x00	; 0
    34ec:	e5 e5       	ldi	r30, 0x55	; 85
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	80 81       	ld	r24, Z
    34f2:	8c 7f       	andi	r24, 0xFC	; 252
    34f4:	8c 93       	st	X, r24
			MCUCR |= edge ;
    34f6:	a5 e5       	ldi	r26, 0x55	; 85
    34f8:	b0 e0       	ldi	r27, 0x00	; 0
    34fa:	e5 e5       	ldi	r30, 0x55	; 85
    34fc:	f0 e0       	ldi	r31, 0x00	; 0
    34fe:	90 81       	ld	r25, Z
    3500:	8a 81       	ldd	r24, Y+2	; 0x02
    3502:	89 2b       	or	r24, r25
    3504:	8c 93       	st	X, r24
    3506:	83 c0       	rjmp	.+262    	; 0x360e <EXTI_SetTriggerEdge+0x168>
			break ;
		case EXTI1 :
			switch(edge)
    3508:	8a 81       	ldd	r24, Y+2	; 0x02
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	3e 83       	std	Y+6, r19	; 0x06
    3510:	2d 83       	std	Y+5, r18	; 0x05
    3512:	8d 81       	ldd	r24, Y+5	; 0x05
    3514:	9e 81       	ldd	r25, Y+6	; 0x06
    3516:	81 30       	cpi	r24, 0x01	; 1
    3518:	91 05       	cpc	r25, r1
    351a:	21 f1       	breq	.+72     	; 0x3564 <EXTI_SetTriggerEdge+0xbe>
    351c:	2d 81       	ldd	r18, Y+5	; 0x05
    351e:	3e 81       	ldd	r19, Y+6	; 0x06
    3520:	22 30       	cpi	r18, 0x02	; 2
    3522:	31 05       	cpc	r19, r1
    3524:	2c f4       	brge	.+10     	; 0x3530 <EXTI_SetTriggerEdge+0x8a>
    3526:	8d 81       	ldd	r24, Y+5	; 0x05
    3528:	9e 81       	ldd	r25, Y+6	; 0x06
    352a:	00 97       	sbiw	r24, 0x00	; 0
    352c:	61 f0       	breq	.+24     	; 0x3546 <EXTI_SetTriggerEdge+0xa0>
    352e:	46 c0       	rjmp	.+140    	; 0x35bc <EXTI_SetTriggerEdge+0x116>
    3530:	2d 81       	ldd	r18, Y+5	; 0x05
    3532:	3e 81       	ldd	r19, Y+6	; 0x06
    3534:	22 30       	cpi	r18, 0x02	; 2
    3536:	31 05       	cpc	r19, r1
    3538:	21 f1       	breq	.+72     	; 0x3582 <EXTI_SetTriggerEdge+0xdc>
    353a:	8d 81       	ldd	r24, Y+5	; 0x05
    353c:	9e 81       	ldd	r25, Y+6	; 0x06
    353e:	83 30       	cpi	r24, 0x03	; 3
    3540:	91 05       	cpc	r25, r1
    3542:	71 f1       	breq	.+92     	; 0x35a0 <EXTI_SetTriggerEdge+0xfa>
    3544:	3b c0       	rjmp	.+118    	; 0x35bc <EXTI_SetTriggerEdge+0x116>
			{
				case LOW_LEVEL :
				CLEAR_BIT(MCUCR , ISC10 );
    3546:	a5 e5       	ldi	r26, 0x55	; 85
    3548:	b0 e0       	ldi	r27, 0x00	; 0
    354a:	e5 e5       	ldi	r30, 0x55	; 85
    354c:	f0 e0       	ldi	r31, 0x00	; 0
    354e:	80 81       	ld	r24, Z
    3550:	8b 7f       	andi	r24, 0xFB	; 251
    3552:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR , ISC11 );
    3554:	a5 e5       	ldi	r26, 0x55	; 85
    3556:	b0 e0       	ldi	r27, 0x00	; 0
    3558:	e5 e5       	ldi	r30, 0x55	; 85
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	87 7f       	andi	r24, 0xF7	; 247
    3560:	8c 93       	st	X, r24
    3562:	2c c0       	rjmp	.+88     	; 0x35bc <EXTI_SetTriggerEdge+0x116>
				break ;
				case  ANY_LOGICAL_CHANGE:
				SET_BIT(MCUCR , ISC10 );
    3564:	a5 e5       	ldi	r26, 0x55	; 85
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	e5 e5       	ldi	r30, 0x55	; 85
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	84 60       	ori	r24, 0x04	; 4
    3570:	8c 93       	st	X, r24
				CLEAR_BIT(MCUCR , ISC11 );
    3572:	a5 e5       	ldi	r26, 0x55	; 85
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	e5 e5       	ldi	r30, 0x55	; 85
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	87 7f       	andi	r24, 0xF7	; 247
    357e:	8c 93       	st	X, r24
    3580:	1d c0       	rjmp	.+58     	; 0x35bc <EXTI_SetTriggerEdge+0x116>
				break ;
				case FALLING_EDGE:
				CLEAR_BIT(MCUCR , ISC10 );
    3582:	a5 e5       	ldi	r26, 0x55	; 85
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e5 e5       	ldi	r30, 0x55	; 85
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	8b 7f       	andi	r24, 0xFB	; 251
    358e:	8c 93       	st	X, r24
				SET_BIT(MCUCR , ISC11 );
    3590:	a5 e5       	ldi	r26, 0x55	; 85
    3592:	b0 e0       	ldi	r27, 0x00	; 0
    3594:	e5 e5       	ldi	r30, 0x55	; 85
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	88 60       	ori	r24, 0x08	; 8
    359c:	8c 93       	st	X, r24
    359e:	0e c0       	rjmp	.+28     	; 0x35bc <EXTI_SetTriggerEdge+0x116>
				break;
				case RISING_EDGE :
				SET_BIT(MCUCR , ISC10 );
    35a0:	a5 e5       	ldi	r26, 0x55	; 85
    35a2:	b0 e0       	ldi	r27, 0x00	; 0
    35a4:	e5 e5       	ldi	r30, 0x55	; 85
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	84 60       	ori	r24, 0x04	; 4
    35ac:	8c 93       	st	X, r24
				SET_BIT(MCUCR , ISC11 );
    35ae:	a5 e5       	ldi	r26, 0x55	; 85
    35b0:	b0 e0       	ldi	r27, 0x00	; 0
    35b2:	e5 e5       	ldi	r30, 0x55	; 85
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	80 81       	ld	r24, Z
    35b8:	88 60       	ori	r24, 0x08	; 8
    35ba:	8c 93       	st	X, r24
				break;
			}
		case EXTI2 :
			switch(edge)
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	28 2f       	mov	r18, r24
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	3c 83       	std	Y+4, r19	; 0x04
    35c4:	2b 83       	std	Y+3, r18	; 0x03
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	81 30       	cpi	r24, 0x01	; 1
    35cc:	91 05       	cpc	r25, r1
    35ce:	f9 f0       	breq	.+62     	; 0x360e <EXTI_SetTriggerEdge+0x168>
    35d0:	2b 81       	ldd	r18, Y+3	; 0x03
    35d2:	3c 81       	ldd	r19, Y+4	; 0x04
    35d4:	22 30       	cpi	r18, 0x02	; 2
    35d6:	31 05       	cpc	r19, r1
    35d8:	d4 f0       	brlt	.+52     	; 0x360e <EXTI_SetTriggerEdge+0x168>
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	9c 81       	ldd	r25, Y+4	; 0x04
    35de:	82 30       	cpi	r24, 0x02	; 2
    35e0:	91 05       	cpc	r25, r1
    35e2:	31 f0       	breq	.+12     	; 0x35f0 <EXTI_SetTriggerEdge+0x14a>
    35e4:	2b 81       	ldd	r18, Y+3	; 0x03
    35e6:	3c 81       	ldd	r19, Y+4	; 0x04
    35e8:	23 30       	cpi	r18, 0x03	; 3
    35ea:	31 05       	cpc	r19, r1
    35ec:	49 f0       	breq	.+18     	; 0x3600 <EXTI_SetTriggerEdge+0x15a>
    35ee:	0f c0       	rjmp	.+30     	; 0x360e <EXTI_SetTriggerEdge+0x168>
				case LOW_LEVEL :
					break ;
				case  ANY_LOGICAL_CHANGE:
					break ;
				case FALLING_EDGE:
					CLEAR_BIT(MCUCSR , ISC2);
    35f0:	a4 e5       	ldi	r26, 0x54	; 84
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	e4 e5       	ldi	r30, 0x54	; 84
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	80 81       	ld	r24, Z
    35fa:	8f 7b       	andi	r24, 0xBF	; 191
    35fc:	8c 93       	st	X, r24
    35fe:	07 c0       	rjmp	.+14     	; 0x360e <EXTI_SetTriggerEdge+0x168>
					break;
				case RISING_EDGE :
					SET_BIT(MCUCSR , ISC2);
    3600:	a4 e5       	ldi	r26, 0x54	; 84
    3602:	b0 e0       	ldi	r27, 0x00	; 0
    3604:	e4 e5       	ldi	r30, 0x54	; 84
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	80 64       	ori	r24, 0x40	; 64
    360c:	8c 93       	st	X, r24
					break;
			}
			break ;
	}
}
    360e:	28 96       	adiw	r28, 0x08	; 8
    3610:	0f b6       	in	r0, 0x3f	; 63
    3612:	f8 94       	cli
    3614:	de bf       	out	0x3e, r29	; 62
    3616:	0f be       	out	0x3f, r0	; 63
    3618:	cd bf       	out	0x3d, r28	; 61
    361a:	cf 91       	pop	r28
    361c:	df 91       	pop	r29
    361e:	08 95       	ret

00003620 <EXTI_Init>:

void EXTI_Init(EXTI_t exti_num , EXTI_TRIGGER_EDGE_t edge )
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	00 d0       	rcall	.+0      	; 0x3626 <EXTI_Init+0x6>
    3626:	00 d0       	rcall	.+0      	; 0x3628 <EXTI_Init+0x8>
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	6a 83       	std	Y+2, r22	; 0x02
	switch (exti_num) 
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	28 2f       	mov	r18, r24
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	3c 83       	std	Y+4, r19	; 0x04
    3638:	2b 83       	std	Y+3, r18	; 0x03
    363a:	8b 81       	ldd	r24, Y+3	; 0x03
    363c:	9c 81       	ldd	r25, Y+4	; 0x04
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	91 05       	cpc	r25, r1
    3642:	79 f0       	breq	.+30     	; 0x3662 <EXTI_Init+0x42>
    3644:	2b 81       	ldd	r18, Y+3	; 0x03
    3646:	3c 81       	ldd	r19, Y+4	; 0x04
    3648:	22 30       	cpi	r18, 0x02	; 2
    364a:	31 05       	cpc	r19, r1
    364c:	81 f0       	breq	.+32     	; 0x366e <EXTI_Init+0x4e>
    364e:	8b 81       	ldd	r24, Y+3	; 0x03
    3650:	9c 81       	ldd	r25, Y+4	; 0x04
    3652:	00 97       	sbiw	r24, 0x00	; 0
    3654:	89 f4       	brne	.+34     	; 0x3678 <EXTI_Init+0x58>
	{
		case EXTI0 :
			DIO_Set_Pin_Direction(PORT_D,PIN2 , INPULLUP);
    3656:	83 e0       	ldi	r24, 0x03	; 3
    3658:	62 e0       	ldi	r22, 0x02	; 2
    365a:	42 e0       	ldi	r20, 0x02	; 2
    365c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
    3660:	0b c0       	rjmp	.+22     	; 0x3678 <EXTI_Init+0x58>
			break;
		case EXTI1 :
		DIO_Set_Pin_Direction(PORT_D,PIN3 , INPULLUP);
    3662:	83 e0       	ldi	r24, 0x03	; 3
    3664:	63 e0       	ldi	r22, 0x03	; 3
    3666:	42 e0       	ldi	r20, 0x02	; 2
    3668:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
    366c:	05 c0       	rjmp	.+10     	; 0x3678 <EXTI_Init+0x58>
		break;
		case EXTI2 :
		DIO_Set_Pin_Direction(PORT_B,PIN3 , INPULLUP);
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	63 e0       	ldi	r22, 0x03	; 3
    3672:	42 e0       	ldi	r20, 0x02	; 2
    3674:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
		break;
	}
	EXTI_SetTriggerEdge(exti_num , edge );
    3678:	89 81       	ldd	r24, Y+1	; 0x01
    367a:	6a 81       	ldd	r22, Y+2	; 0x02
    367c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <EXTI_SetTriggerEdge>
	EXTI_Enable(exti_num);
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	0e 94 e5 19 	call	0x33ca	; 0x33ca <EXTI_Enable>
	
}
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	08 95       	ret

00003694 <EXTI_SetCallBack>:
void EXTI_SetCallBack(EXTI_t exti_num , void(*pflocal)(void) )
{
    3694:	df 93       	push	r29
    3696:	cf 93       	push	r28
    3698:	00 d0       	rcall	.+0      	; 0x369a <EXTI_SetCallBack+0x6>
    369a:	00 d0       	rcall	.+0      	; 0x369c <EXTI_SetCallBack+0x8>
    369c:	0f 92       	push	r0
    369e:	cd b7       	in	r28, 0x3d	; 61
    36a0:	de b7       	in	r29, 0x3e	; 62
    36a2:	89 83       	std	Y+1, r24	; 0x01
    36a4:	7b 83       	std	Y+3, r23	; 0x03
    36a6:	6a 83       	std	Y+2, r22	; 0x02
	switch (exti_num)
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	28 2f       	mov	r18, r24
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	3d 83       	std	Y+5, r19	; 0x05
    36b0:	2c 83       	std	Y+4, r18	; 0x04
    36b2:	8c 81       	ldd	r24, Y+4	; 0x04
    36b4:	9d 81       	ldd	r25, Y+5	; 0x05
    36b6:	81 30       	cpi	r24, 0x01	; 1
    36b8:	91 05       	cpc	r25, r1
    36ba:	81 f0       	breq	.+32     	; 0x36dc <EXTI_SetCallBack+0x48>
    36bc:	2c 81       	ldd	r18, Y+4	; 0x04
    36be:	3d 81       	ldd	r19, Y+5	; 0x05
    36c0:	22 30       	cpi	r18, 0x02	; 2
    36c2:	31 05       	cpc	r19, r1
    36c4:	91 f0       	breq	.+36     	; 0x36ea <EXTI_SetCallBack+0x56>
    36c6:	8c 81       	ldd	r24, Y+4	; 0x04
    36c8:	9d 81       	ldd	r25, Y+5	; 0x05
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	a1 f4       	brne	.+40     	; 0x36f6 <EXTI_SetCallBack+0x62>
	{
		case EXTI0 :
			EXTI0_ptr = pflocal ;
    36ce:	8a 81       	ldd	r24, Y+2	; 0x02
    36d0:	9b 81       	ldd	r25, Y+3	; 0x03
    36d2:	90 93 5a 02 	sts	0x025A, r25
    36d6:	80 93 59 02 	sts	0x0259, r24
    36da:	0d c0       	rjmp	.+26     	; 0x36f6 <EXTI_SetCallBack+0x62>
			break ;
		case EXTI1 :
			EXTI1_ptr = pflocal ;
    36dc:	8a 81       	ldd	r24, Y+2	; 0x02
    36de:	9b 81       	ldd	r25, Y+3	; 0x03
    36e0:	90 93 5c 02 	sts	0x025C, r25
    36e4:	80 93 5b 02 	sts	0x025B, r24
    36e8:	06 c0       	rjmp	.+12     	; 0x36f6 <EXTI_SetCallBack+0x62>
			break ;
		case EXTI2 :
			EXTI2_ptr = pflocal ;
    36ea:	8a 81       	ldd	r24, Y+2	; 0x02
    36ec:	9b 81       	ldd	r25, Y+3	; 0x03
    36ee:	90 93 5e 02 	sts	0x025E, r25
    36f2:	80 93 5d 02 	sts	0x025D, r24
			break ;
	}
}
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	0f 90       	pop	r0
    36fc:	0f 90       	pop	r0
    36fe:	0f 90       	pop	r0
    3700:	cf 91       	pop	r28
    3702:	df 91       	pop	r29
    3704:	08 95       	ret

00003706 <__vector_1>:


ISR(INT0_vect)
{
    3706:	1f 92       	push	r1
    3708:	0f 92       	push	r0
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	0f 92       	push	r0
    370e:	11 24       	eor	r1, r1
    3710:	2f 93       	push	r18
    3712:	3f 93       	push	r19
    3714:	4f 93       	push	r20
    3716:	5f 93       	push	r21
    3718:	6f 93       	push	r22
    371a:	7f 93       	push	r23
    371c:	8f 93       	push	r24
    371e:	9f 93       	push	r25
    3720:	af 93       	push	r26
    3722:	bf 93       	push	r27
    3724:	ef 93       	push	r30
    3726:	ff 93       	push	r31
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	cd b7       	in	r28, 0x3d	; 61
    372e:	de b7       	in	r29, 0x3e	; 62
	
	if (EXTI0_ptr != NULLPTR)
    3730:	80 91 59 02 	lds	r24, 0x0259
    3734:	90 91 5a 02 	lds	r25, 0x025A
    3738:	00 97       	sbiw	r24, 0x00	; 0
    373a:	29 f0       	breq	.+10     	; 0x3746 <__vector_1+0x40>
	{
		EXTI0_ptr();
    373c:	e0 91 59 02 	lds	r30, 0x0259
    3740:	f0 91 5a 02 	lds	r31, 0x025A
    3744:	09 95       	icall
	}
	
}
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	ff 91       	pop	r31
    374c:	ef 91       	pop	r30
    374e:	bf 91       	pop	r27
    3750:	af 91       	pop	r26
    3752:	9f 91       	pop	r25
    3754:	8f 91       	pop	r24
    3756:	7f 91       	pop	r23
    3758:	6f 91       	pop	r22
    375a:	5f 91       	pop	r21
    375c:	4f 91       	pop	r20
    375e:	3f 91       	pop	r19
    3760:	2f 91       	pop	r18
    3762:	0f 90       	pop	r0
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	0f 90       	pop	r0
    3768:	1f 90       	pop	r1
    376a:	18 95       	reti

0000376c <__vector_2>:
ISR(INT1_vect)
{
    376c:	1f 92       	push	r1
    376e:	0f 92       	push	r0
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	0f 92       	push	r0
    3774:	11 24       	eor	r1, r1
    3776:	2f 93       	push	r18
    3778:	3f 93       	push	r19
    377a:	4f 93       	push	r20
    377c:	5f 93       	push	r21
    377e:	6f 93       	push	r22
    3780:	7f 93       	push	r23
    3782:	8f 93       	push	r24
    3784:	9f 93       	push	r25
    3786:	af 93       	push	r26
    3788:	bf 93       	push	r27
    378a:	ef 93       	push	r30
    378c:	ff 93       	push	r31
    378e:	df 93       	push	r29
    3790:	cf 93       	push	r28
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
	if (EXTI1_ptr != NULLPTR)
    3796:	80 91 5b 02 	lds	r24, 0x025B
    379a:	90 91 5c 02 	lds	r25, 0x025C
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	29 f0       	breq	.+10     	; 0x37ac <__vector_2+0x40>
	{
		EXTI1_ptr();
    37a2:	e0 91 5b 02 	lds	r30, 0x025B
    37a6:	f0 91 5c 02 	lds	r31, 0x025C
    37aa:	09 95       	icall
	}
}
    37ac:	cf 91       	pop	r28
    37ae:	df 91       	pop	r29
    37b0:	ff 91       	pop	r31
    37b2:	ef 91       	pop	r30
    37b4:	bf 91       	pop	r27
    37b6:	af 91       	pop	r26
    37b8:	9f 91       	pop	r25
    37ba:	8f 91       	pop	r24
    37bc:	7f 91       	pop	r23
    37be:	6f 91       	pop	r22
    37c0:	5f 91       	pop	r21
    37c2:	4f 91       	pop	r20
    37c4:	3f 91       	pop	r19
    37c6:	2f 91       	pop	r18
    37c8:	0f 90       	pop	r0
    37ca:	0f be       	out	0x3f, r0	; 63
    37cc:	0f 90       	pop	r0
    37ce:	1f 90       	pop	r1
    37d0:	18 95       	reti

000037d2 <__vector_3>:
ISR(INT2_vect)
{
    37d2:	1f 92       	push	r1
    37d4:	0f 92       	push	r0
    37d6:	0f b6       	in	r0, 0x3f	; 63
    37d8:	0f 92       	push	r0
    37da:	11 24       	eor	r1, r1
    37dc:	2f 93       	push	r18
    37de:	3f 93       	push	r19
    37e0:	4f 93       	push	r20
    37e2:	5f 93       	push	r21
    37e4:	6f 93       	push	r22
    37e6:	7f 93       	push	r23
    37e8:	8f 93       	push	r24
    37ea:	9f 93       	push	r25
    37ec:	af 93       	push	r26
    37ee:	bf 93       	push	r27
    37f0:	ef 93       	push	r30
    37f2:	ff 93       	push	r31
    37f4:	df 93       	push	r29
    37f6:	cf 93       	push	r28
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
	if (EXTI2_ptr != NULLPTR)
    37fc:	80 91 5d 02 	lds	r24, 0x025D
    3800:	90 91 5e 02 	lds	r25, 0x025E
    3804:	00 97       	sbiw	r24, 0x00	; 0
    3806:	29 f0       	breq	.+10     	; 0x3812 <__vector_3+0x40>
	{
		EXTI2_ptr();
    3808:	e0 91 5d 02 	lds	r30, 0x025D
    380c:	f0 91 5e 02 	lds	r31, 0x025E
    3810:	09 95       	icall
	}
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	ff 91       	pop	r31
    3818:	ef 91       	pop	r30
    381a:	bf 91       	pop	r27
    381c:	af 91       	pop	r26
    381e:	9f 91       	pop	r25
    3820:	8f 91       	pop	r24
    3822:	7f 91       	pop	r23
    3824:	6f 91       	pop	r22
    3826:	5f 91       	pop	r21
    3828:	4f 91       	pop	r20
    382a:	3f 91       	pop	r19
    382c:	2f 91       	pop	r18
    382e:	0f 90       	pop	r0
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	0f 90       	pop	r0
    3834:	1f 90       	pop	r1
    3836:	18 95       	reti

00003838 <EEPROM_Write>:
#include "EEPROM_interface.h"
#include "EEPROM_private.h"

void EEPROM_Write ( u16 address , u8 data )
{
    3838:	df 93       	push	r29
    383a:	cf 93       	push	r28
    383c:	00 d0       	rcall	.+0      	; 0x383e <EEPROM_Write+0x6>
    383e:	0f 92       	push	r0
    3840:	cd b7       	in	r28, 0x3d	; 61
    3842:	de b7       	in	r29, 0x3e	; 62
    3844:	9a 83       	std	Y+2, r25	; 0x02
    3846:	89 83       	std	Y+1, r24	; 0x01
    3848:	6b 83       	std	Y+3, r22	; 0x03
	
	while ( READ_BIT( EECR , EEWE ) ) ;
    384a:	ec e3       	ldi	r30, 0x3C	; 60
    384c:	f0 e0       	ldi	r31, 0x00	; 0
    384e:	80 81       	ld	r24, Z
    3850:	86 95       	lsr	r24
    3852:	88 2f       	mov	r24, r24
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	81 70       	andi	r24, 0x01	; 1
    3858:	90 70       	andi	r25, 0x00	; 0
    385a:	88 23       	and	r24, r24
    385c:	b1 f7       	brne	.-20     	; 0x384a <EEPROM_Write+0x12>
	
	EEAR = address ;
    385e:	ee e3       	ldi	r30, 0x3E	; 62
    3860:	f0 e0       	ldi	r31, 0x00	; 0
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	9a 81       	ldd	r25, Y+2	; 0x02
    3866:	91 83       	std	Z+1, r25	; 0x01
    3868:	80 83       	st	Z, r24
	EEDR = data ;
    386a:	ed e3       	ldi	r30, 0x3D	; 61
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	8b 81       	ldd	r24, Y+3	; 0x03
    3870:	80 83       	st	Z, r24
	
	SET_BIT ( EECR , EEMWE ) ;
    3872:	ac e3       	ldi	r26, 0x3C	; 60
    3874:	b0 e0       	ldi	r27, 0x00	; 0
    3876:	ec e3       	ldi	r30, 0x3C	; 60
    3878:	f0 e0       	ldi	r31, 0x00	; 0
    387a:	80 81       	ld	r24, Z
    387c:	84 60       	ori	r24, 0x04	; 4
    387e:	8c 93       	st	X, r24
	SET_BIT ( EECR , EEWE ) ;
    3880:	ac e3       	ldi	r26, 0x3C	; 60
    3882:	b0 e0       	ldi	r27, 0x00	; 0
    3884:	ec e3       	ldi	r30, 0x3C	; 60
    3886:	f0 e0       	ldi	r31, 0x00	; 0
    3888:	80 81       	ld	r24, Z
    388a:	82 60       	ori	r24, 0x02	; 2
    388c:	8c 93       	st	X, r24
	
}
    388e:	0f 90       	pop	r0
    3890:	0f 90       	pop	r0
    3892:	0f 90       	pop	r0
    3894:	cf 91       	pop	r28
    3896:	df 91       	pop	r29
    3898:	08 95       	ret

0000389a <EEPROM_Read>:

u8 EEPROM_Read (u16 address )
{
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	00 d0       	rcall	.+0      	; 0x38a0 <EEPROM_Read+0x6>
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    38a4:	9a 83       	std	Y+2, r25	; 0x02
    38a6:	89 83       	std	Y+1, r24	; 0x01
	while ( READ_BIT( EECR , EEWE ) ) ;
    38a8:	ec e3       	ldi	r30, 0x3C	; 60
    38aa:	f0 e0       	ldi	r31, 0x00	; 0
    38ac:	80 81       	ld	r24, Z
    38ae:	86 95       	lsr	r24
    38b0:	88 2f       	mov	r24, r24
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	81 70       	andi	r24, 0x01	; 1
    38b6:	90 70       	andi	r25, 0x00	; 0
    38b8:	88 23       	and	r24, r24
    38ba:	b1 f7       	brne	.-20     	; 0x38a8 <EEPROM_Read+0xe>
	
	EEAR = address ;
    38bc:	ee e3       	ldi	r30, 0x3E	; 62
    38be:	f0 e0       	ldi	r31, 0x00	; 0
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	9a 81       	ldd	r25, Y+2	; 0x02
    38c4:	91 83       	std	Z+1, r25	; 0x01
    38c6:	80 83       	st	Z, r24
	
	SET_BIT ( EECR , EERE ) ;
    38c8:	ac e3       	ldi	r26, 0x3C	; 60
    38ca:	b0 e0       	ldi	r27, 0x00	; 0
    38cc:	ec e3       	ldi	r30, 0x3C	; 60
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	80 81       	ld	r24, Z
    38d2:	81 60       	ori	r24, 0x01	; 1
    38d4:	8c 93       	st	X, r24
	return EEDR ;
    38d6:	ed e3       	ldi	r30, 0x3D	; 61
    38d8:	f0 e0       	ldi	r31, 0x00	; 0
    38da:	80 81       	ld	r24, Z
	
}
    38dc:	0f 90       	pop	r0
    38de:	0f 90       	pop	r0
    38e0:	cf 91       	pop	r28
    38e2:	df 91       	pop	r29
    38e4:	08 95       	ret

000038e6 <EEPROM_Write_String>:

void EEPROM_Write_String ( u16 address , u8 *data )
{
    38e6:	df 93       	push	r29
    38e8:	cf 93       	push	r28
    38ea:	00 d0       	rcall	.+0      	; 0x38ec <EEPROM_Write_String+0x6>
    38ec:	00 d0       	rcall	.+0      	; 0x38ee <EEPROM_Write_String+0x8>
    38ee:	0f 92       	push	r0
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	9b 83       	std	Y+3, r25	; 0x03
    38f6:	8a 83       	std	Y+2, r24	; 0x02
    38f8:	7d 83       	std	Y+5, r23	; 0x05
    38fa:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0 ;
    38fc:	19 82       	std	Y+1, r1	; 0x01
	for ( i=0 ; data[i] ; i++ )
    38fe:	19 82       	std	Y+1, r1	; 0x01
    3900:	18 c0       	rjmp	.+48     	; 0x3932 <EEPROM_Write_String+0x4c>
	{
		EEPROM_Write(address + i , data[i]);
    3902:	89 81       	ldd	r24, Y+1	; 0x01
    3904:	28 2f       	mov	r18, r24
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	8a 81       	ldd	r24, Y+2	; 0x02
    390a:	9b 81       	ldd	r25, Y+3	; 0x03
    390c:	a9 01       	movw	r20, r18
    390e:	48 0f       	add	r20, r24
    3910:	59 1f       	adc	r21, r25
    3912:	89 81       	ldd	r24, Y+1	; 0x01
    3914:	28 2f       	mov	r18, r24
    3916:	30 e0       	ldi	r19, 0x00	; 0
    3918:	8c 81       	ldd	r24, Y+4	; 0x04
    391a:	9d 81       	ldd	r25, Y+5	; 0x05
    391c:	fc 01       	movw	r30, r24
    391e:	e2 0f       	add	r30, r18
    3920:	f3 1f       	adc	r31, r19
    3922:	20 81       	ld	r18, Z
    3924:	ca 01       	movw	r24, r20
    3926:	62 2f       	mov	r22, r18
    3928:	0e 94 1c 1c 	call	0x3838	; 0x3838 <EEPROM_Write>
}

void EEPROM_Write_String ( u16 address , u8 *data )
{
	u8 i = 0 ;
	for ( i=0 ; data[i] ; i++ )
    392c:	89 81       	ldd	r24, Y+1	; 0x01
    392e:	8f 5f       	subi	r24, 0xFF	; 255
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	28 2f       	mov	r18, r24
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	8c 81       	ldd	r24, Y+4	; 0x04
    393a:	9d 81       	ldd	r25, Y+5	; 0x05
    393c:	fc 01       	movw	r30, r24
    393e:	e2 0f       	add	r30, r18
    3940:	f3 1f       	adc	r31, r19
    3942:	80 81       	ld	r24, Z
    3944:	88 23       	and	r24, r24
    3946:	e9 f6       	brne	.-70     	; 0x3902 <EEPROM_Write_String+0x1c>
	{
		EEPROM_Write(address + i , data[i]);
	}
	EEPROM_Write( address + i , '\0' );
    3948:	89 81       	ldd	r24, Y+1	; 0x01
    394a:	28 2f       	mov	r18, r24
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	8a 81       	ldd	r24, Y+2	; 0x02
    3950:	9b 81       	ldd	r25, Y+3	; 0x03
    3952:	82 0f       	add	r24, r18
    3954:	93 1f       	adc	r25, r19
    3956:	60 e0       	ldi	r22, 0x00	; 0
    3958:	0e 94 1c 1c 	call	0x3838	; 0x3838 <EEPROM_Write>

}
    395c:	0f 90       	pop	r0
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
    3962:	0f 90       	pop	r0
    3964:	0f 90       	pop	r0
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	08 95       	ret

0000396c <EEPROM_Read_String>:

void EEPROM_Read_String ( u16 address , u8 * arr )
{
    396c:	0f 93       	push	r16
    396e:	1f 93       	push	r17
    3970:	df 93       	push	r29
    3972:	cf 93       	push	r28
    3974:	00 d0       	rcall	.+0      	; 0x3976 <EEPROM_Read_String+0xa>
    3976:	00 d0       	rcall	.+0      	; 0x3978 <EEPROM_Read_String+0xc>
    3978:	0f 92       	push	r0
    397a:	cd b7       	in	r28, 0x3d	; 61
    397c:	de b7       	in	r29, 0x3e	; 62
    397e:	9b 83       	std	Y+3, r25	; 0x03
    3980:	8a 83       	std	Y+2, r24	; 0x02
    3982:	7d 83       	std	Y+5, r23	; 0x05
    3984:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0 ;
    3986:	19 82       	std	Y+1, r1	; 0x01
    3988:	16 c0       	rjmp	.+44     	; 0x39b6 <EEPROM_Read_String+0x4a>
	while ( EEPROM_Read(address) != '\0' )
	{
		arr[i] = EEPROM_Read(address + i );
    398a:	89 81       	ldd	r24, Y+1	; 0x01
    398c:	28 2f       	mov	r18, r24
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	8c 81       	ldd	r24, Y+4	; 0x04
    3992:	9d 81       	ldd	r25, Y+5	; 0x05
    3994:	8c 01       	movw	r16, r24
    3996:	02 0f       	add	r16, r18
    3998:	13 1f       	adc	r17, r19
    399a:	89 81       	ldd	r24, Y+1	; 0x01
    399c:	28 2f       	mov	r18, r24
    399e:	30 e0       	ldi	r19, 0x00	; 0
    39a0:	8a 81       	ldd	r24, Y+2	; 0x02
    39a2:	9b 81       	ldd	r25, Y+3	; 0x03
    39a4:	82 0f       	add	r24, r18
    39a6:	93 1f       	adc	r25, r19
    39a8:	0e 94 4d 1c 	call	0x389a	; 0x389a <EEPROM_Read>
    39ac:	f8 01       	movw	r30, r16
    39ae:	80 83       	st	Z, r24
		i++ ;
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	8f 5f       	subi	r24, 0xFF	; 255
    39b4:	89 83       	std	Y+1, r24	; 0x01
}

void EEPROM_Read_String ( u16 address , u8 * arr )
{
	u8 i = 0 ;
	while ( EEPROM_Read(address) != '\0' )
    39b6:	8a 81       	ldd	r24, Y+2	; 0x02
    39b8:	9b 81       	ldd	r25, Y+3	; 0x03
    39ba:	0e 94 4d 1c 	call	0x389a	; 0x389a <EEPROM_Read>
    39be:	88 23       	and	r24, r24
    39c0:	21 f7       	brne	.-56     	; 0x398a <EEPROM_Read_String+0x1e>
	{
		arr[i] = EEPROM_Read(address + i );
		i++ ;
	}
	arr[i] = '\0' ;
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	28 2f       	mov	r18, r24
    39c6:	30 e0       	ldi	r19, 0x00	; 0
    39c8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ca:	9d 81       	ldd	r25, Y+5	; 0x05
    39cc:	fc 01       	movw	r30, r24
    39ce:	e2 0f       	add	r30, r18
    39d0:	f3 1f       	adc	r31, r19
    39d2:	10 82       	st	Z, r1
	
}
    39d4:	0f 90       	pop	r0
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	0f 90       	pop	r0
    39de:	cf 91       	pop	r28
    39e0:	df 91       	pop	r29
    39e2:	1f 91       	pop	r17
    39e4:	0f 91       	pop	r16
    39e6:	08 95       	ret

000039e8 <EEPROM_Write_U16>:

void EEPROM_Write_U16(u16 address , u16 data){
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	00 d0       	rcall	.+0      	; 0x39ee <EEPROM_Write_U16+0x6>
    39ee:	00 d0       	rcall	.+0      	; 0x39f0 <EEPROM_Write_U16+0x8>
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	9a 83       	std	Y+2, r25	; 0x02
    39f6:	89 83       	std	Y+1, r24	; 0x01
    39f8:	7c 83       	std	Y+4, r23	; 0x04
    39fa:	6b 83       	std	Y+3, r22	; 0x03
	while (READ_BIT(EECR,EEMWE));
    39fc:	ec e3       	ldi	r30, 0x3C	; 60
    39fe:	f0 e0       	ldi	r31, 0x00	; 0
    3a00:	80 81       	ld	r24, Z
    3a02:	86 95       	lsr	r24
    3a04:	86 95       	lsr	r24
    3a06:	88 2f       	mov	r24, r24
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	81 70       	andi	r24, 0x01	; 1
    3a0c:	90 70       	andi	r25, 0x00	; 0
    3a0e:	88 23       	and	r24, r24
    3a10:	a9 f7       	brne	.-22     	; 0x39fc <EEPROM_Write_U16+0x14>
	
	EEAR = address;
    3a12:	ee e3       	ldi	r30, 0x3E	; 62
    3a14:	f0 e0       	ldi	r31, 0x00	; 0
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1a:	91 83       	std	Z+1, r25	; 0x01
    3a1c:	80 83       	st	Z, r24
	EEDR = (u8)data;
    3a1e:	ed e3       	ldi	r30, 0x3D	; 61
    3a20:	f0 e0       	ldi	r31, 0x00	; 0
    3a22:	8b 81       	ldd	r24, Y+3	; 0x03
    3a24:	80 83       	st	Z, r24
	EEPROM_Write(address , (u8)data);
    3a26:	2b 81       	ldd	r18, Y+3	; 0x03
    3a28:	89 81       	ldd	r24, Y+1	; 0x01
    3a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a2c:	62 2f       	mov	r22, r18
    3a2e:	0e 94 1c 1c 	call	0x3838	; 0x3838 <EEPROM_Write>
	EEPROM_Write(address+1 , (u8) (data >> 8));
    3a32:	89 81       	ldd	r24, Y+1	; 0x01
    3a34:	9a 81       	ldd	r25, Y+2	; 0x02
    3a36:	9c 01       	movw	r18, r24
    3a38:	2f 5f       	subi	r18, 0xFF	; 255
    3a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a40:	89 2f       	mov	r24, r25
    3a42:	99 27       	eor	r25, r25
    3a44:	48 2f       	mov	r20, r24
    3a46:	c9 01       	movw	r24, r18
    3a48:	64 2f       	mov	r22, r20
    3a4a:	0e 94 1c 1c 	call	0x3838	; 0x3838 <EEPROM_Write>
	
	SET_BIT(EECR , EEMWE);
    3a4e:	ac e3       	ldi	r26, 0x3C	; 60
    3a50:	b0 e0       	ldi	r27, 0x00	; 0
    3a52:	ec e3       	ldi	r30, 0x3C	; 60
    3a54:	f0 e0       	ldi	r31, 0x00	; 0
    3a56:	80 81       	ld	r24, Z
    3a58:	84 60       	ori	r24, 0x04	; 4
    3a5a:	8c 93       	st	X, r24
	SET_BIT(EECR , EEWE);
    3a5c:	ac e3       	ldi	r26, 0x3C	; 60
    3a5e:	b0 e0       	ldi	r27, 0x00	; 0
    3a60:	ec e3       	ldi	r30, 0x3C	; 60
    3a62:	f0 e0       	ldi	r31, 0x00	; 0
    3a64:	80 81       	ld	r24, Z
    3a66:	82 60       	ori	r24, 0x02	; 2
    3a68:	8c 93       	st	X, r24
}
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	0f 90       	pop	r0
    3a70:	0f 90       	pop	r0
    3a72:	cf 91       	pop	r28
    3a74:	df 91       	pop	r29
    3a76:	08 95       	ret

00003a78 <EEPROM_Read_U16>:

u16 EEPROM_Read_U16(u16 address){
    3a78:	df 93       	push	r29
    3a7a:	cf 93       	push	r28
    3a7c:	00 d0       	rcall	.+0      	; 0x3a7e <EEPROM_Read_U16+0x6>
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <EEPROM_Read_U16+0x8>
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	9c 83       	std	Y+4, r25	; 0x04
    3a86:	8b 83       	std	Y+3, r24	; 0x03
	
	u16 data = 0;
    3a88:	1a 82       	std	Y+2, r1	; 0x02
    3a8a:	19 82       	std	Y+1, r1	; 0x01
	
	while(READ_BIT(EECR , EEWE));
    3a8c:	ec e3       	ldi	r30, 0x3C	; 60
    3a8e:	f0 e0       	ldi	r31, 0x00	; 0
    3a90:	80 81       	ld	r24, Z
    3a92:	86 95       	lsr	r24
    3a94:	88 2f       	mov	r24, r24
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	81 70       	andi	r24, 0x01	; 1
    3a9a:	90 70       	andi	r25, 0x00	; 0
    3a9c:	88 23       	and	r24, r24
    3a9e:	b1 f7       	brne	.-20     	; 0x3a8c <EEPROM_Read_U16+0x14>
	
	EEAR = address;
    3aa0:	ee e3       	ldi	r30, 0x3E	; 62
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa8:	91 83       	std	Z+1, r25	; 0x01
    3aaa:	80 83       	st	Z, r24
	
	SET_BIT(EECR , EERE);
    3aac:	ac e3       	ldi	r26, 0x3C	; 60
    3aae:	b0 e0       	ldi	r27, 0x00	; 0
    3ab0:	ec e3       	ldi	r30, 0x3C	; 60
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	80 81       	ld	r24, Z
    3ab6:	81 60       	ori	r24, 0x01	; 1
    3ab8:	8c 93       	st	X, r24
	data = EEDR;
    3aba:	ed e3       	ldi	r30, 0x3D	; 61
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	80 81       	ld	r24, Z
    3ac0:	88 2f       	mov	r24, r24
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	9a 83       	std	Y+2, r25	; 0x02
    3ac6:	89 83       	std	Y+1, r24	; 0x01
	data <<= 8;
    3ac8:	89 81       	ldd	r24, Y+1	; 0x01
    3aca:	9a 81       	ldd	r25, Y+2	; 0x02
    3acc:	98 2f       	mov	r25, r24
    3ace:	88 27       	eor	r24, r24
    3ad0:	9a 83       	std	Y+2, r25	; 0x02
    3ad2:	89 83       	std	Y+1, r24	; 0x01
	
	SET_BIT(EECR , EERE);
    3ad4:	ac e3       	ldi	r26, 0x3C	; 60
    3ad6:	b0 e0       	ldi	r27, 0x00	; 0
    3ad8:	ec e3       	ldi	r30, 0x3C	; 60
    3ada:	f0 e0       	ldi	r31, 0x00	; 0
    3adc:	80 81       	ld	r24, Z
    3ade:	81 60       	ori	r24, 0x01	; 1
    3ae0:	8c 93       	st	X, r24
	data |= EEDR;
    3ae2:	ed e3       	ldi	r30, 0x3D	; 61
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	80 81       	ld	r24, Z
    3ae8:	28 2f       	mov	r18, r24
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	89 81       	ldd	r24, Y+1	; 0x01
    3aee:	9a 81       	ldd	r25, Y+2	; 0x02
    3af0:	82 2b       	or	r24, r18
    3af2:	93 2b       	or	r25, r19
    3af4:	9a 83       	std	Y+2, r25	; 0x02
    3af6:	89 83       	std	Y+1, r24	; 0x01
	
	return data;
    3af8:	89 81       	ldd	r24, Y+1	; 0x01
    3afa:	9a 81       	ldd	r25, Y+2	; 0x02
    3afc:	0f 90       	pop	r0
    3afe:	0f 90       	pop	r0
    3b00:	0f 90       	pop	r0
    3b02:	0f 90       	pop	r0
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	08 95       	ret

00003b0a <DIO_Set_Pin_Direction>:
#include "DIO_interface.h"
 
 void DIO_Set_Pin_Direction (PORT_t port , PIN_t pin , DIO_Status_t status)
 {
    3b0a:	df 93       	push	r29
    3b0c:	cf 93       	push	r28
    3b0e:	cd b7       	in	r28, 0x3d	; 61
    3b10:	de b7       	in	r29, 0x3e	; 62
    3b12:	2b 97       	sbiw	r28, 0x0b	; 11
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	89 83       	std	Y+1, r24	; 0x01
    3b20:	6a 83       	std	Y+2, r22	; 0x02
    3b22:	4b 83       	std	Y+3, r20	; 0x03
	 switch ( status )
    3b24:	8b 81       	ldd	r24, Y+3	; 0x03
    3b26:	28 2f       	mov	r18, r24
    3b28:	30 e0       	ldi	r19, 0x00	; 0
    3b2a:	3b 87       	std	Y+11, r19	; 0x0b
    3b2c:	2a 87       	std	Y+10, r18	; 0x0a
    3b2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b30:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b32:	81 30       	cpi	r24, 0x01	; 1
    3b34:	91 05       	cpc	r25, r1
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <DIO_Set_Pin_Direction+0x30>
    3b38:	7a c0       	rjmp	.+244    	; 0x3c2e <DIO_Set_Pin_Direction+0x124>
    3b3a:	2a 85       	ldd	r18, Y+10	; 0x0a
    3b3c:	3b 85       	ldd	r19, Y+11	; 0x0b
    3b3e:	22 30       	cpi	r18, 0x02	; 2
    3b40:	31 05       	cpc	r19, r1
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <DIO_Set_Pin_Direction+0x3c>
    3b44:	36 c1       	rjmp	.+620    	; 0x3db2 <DIO_Set_Pin_Direction+0x2a8>
    3b46:	8a 85       	ldd	r24, Y+10	; 0x0a
    3b48:	9b 85       	ldd	r25, Y+11	; 0x0b
    3b4a:	00 97       	sbiw	r24, 0x00	; 0
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <DIO_Set_Pin_Direction+0x46>
    3b4e:	ee c1       	rjmp	.+988    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
	 {
		 case OUTPUT :
			switch (port)
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	28 2f       	mov	r18, r24
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	39 87       	std	Y+9, r19	; 0x09
    3b58:	28 87       	std	Y+8, r18	; 0x08
    3b5a:	88 85       	ldd	r24, Y+8	; 0x08
    3b5c:	99 85       	ldd	r25, Y+9	; 0x09
    3b5e:	81 30       	cpi	r24, 0x01	; 1
    3b60:	91 05       	cpc	r25, r1
    3b62:	49 f1       	breq	.+82     	; 0x3bb6 <DIO_Set_Pin_Direction+0xac>
    3b64:	28 85       	ldd	r18, Y+8	; 0x08
    3b66:	39 85       	ldd	r19, Y+9	; 0x09
    3b68:	22 30       	cpi	r18, 0x02	; 2
    3b6a:	31 05       	cpc	r19, r1
    3b6c:	2c f4       	brge	.+10     	; 0x3b78 <DIO_Set_Pin_Direction+0x6e>
    3b6e:	88 85       	ldd	r24, Y+8	; 0x08
    3b70:	99 85       	ldd	r25, Y+9	; 0x09
    3b72:	00 97       	sbiw	r24, 0x00	; 0
    3b74:	61 f0       	breq	.+24     	; 0x3b8e <DIO_Set_Pin_Direction+0x84>
    3b76:	da c1       	rjmp	.+948    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
    3b78:	28 85       	ldd	r18, Y+8	; 0x08
    3b7a:	39 85       	ldd	r19, Y+9	; 0x09
    3b7c:	22 30       	cpi	r18, 0x02	; 2
    3b7e:	31 05       	cpc	r19, r1
    3b80:	71 f1       	breq	.+92     	; 0x3bde <DIO_Set_Pin_Direction+0xd4>
    3b82:	88 85       	ldd	r24, Y+8	; 0x08
    3b84:	99 85       	ldd	r25, Y+9	; 0x09
    3b86:	83 30       	cpi	r24, 0x03	; 3
    3b88:	91 05       	cpc	r25, r1
    3b8a:	e9 f1       	breq	.+122    	; 0x3c06 <DIO_Set_Pin_Direction+0xfc>
    3b8c:	cf c1       	rjmp	.+926    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
			{
				case PORT_A:
					SET_BIT(DDRA,pin);				
    3b8e:	aa e3       	ldi	r26, 0x3A	; 58
    3b90:	b0 e0       	ldi	r27, 0x00	; 0
    3b92:	ea e3       	ldi	r30, 0x3A	; 58
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 81       	ld	r24, Z
    3b98:	48 2f       	mov	r20, r24
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	28 2f       	mov	r18, r24
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	81 e0       	ldi	r24, 0x01	; 1
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	02 2e       	mov	r0, r18
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <DIO_Set_Pin_Direction+0xa2>
    3ba8:	88 0f       	add	r24, r24
    3baa:	99 1f       	adc	r25, r25
    3bac:	0a 94       	dec	r0
    3bae:	e2 f7       	brpl	.-8      	; 0x3ba8 <DIO_Set_Pin_Direction+0x9e>
    3bb0:	84 2b       	or	r24, r20
    3bb2:	8c 93       	st	X, r24
    3bb4:	bb c1       	rjmp	.+886    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
				break;
				case PORT_B:
					SET_BIT(DDRB,pin);
    3bb6:	a7 e3       	ldi	r26, 0x37	; 55
    3bb8:	b0 e0       	ldi	r27, 0x00	; 0
    3bba:	e7 e3       	ldi	r30, 0x37	; 55
    3bbc:	f0 e0       	ldi	r31, 0x00	; 0
    3bbe:	80 81       	ld	r24, Z
    3bc0:	48 2f       	mov	r20, r24
    3bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc4:	28 2f       	mov	r18, r24
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	81 e0       	ldi	r24, 0x01	; 1
    3bca:	90 e0       	ldi	r25, 0x00	; 0
    3bcc:	02 2e       	mov	r0, r18
    3bce:	02 c0       	rjmp	.+4      	; 0x3bd4 <DIO_Set_Pin_Direction+0xca>
    3bd0:	88 0f       	add	r24, r24
    3bd2:	99 1f       	adc	r25, r25
    3bd4:	0a 94       	dec	r0
    3bd6:	e2 f7       	brpl	.-8      	; 0x3bd0 <DIO_Set_Pin_Direction+0xc6>
    3bd8:	84 2b       	or	r24, r20
    3bda:	8c 93       	st	X, r24
    3bdc:	a7 c1       	rjmp	.+846    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
				break;
				case PORT_C:
					SET_BIT(DDRC,pin);
    3bde:	a4 e3       	ldi	r26, 0x34	; 52
    3be0:	b0 e0       	ldi	r27, 0x00	; 0
    3be2:	e4 e3       	ldi	r30, 0x34	; 52
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	80 81       	ld	r24, Z
    3be8:	48 2f       	mov	r20, r24
    3bea:	8a 81       	ldd	r24, Y+2	; 0x02
    3bec:	28 2f       	mov	r18, r24
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	02 2e       	mov	r0, r18
    3bf6:	02 c0       	rjmp	.+4      	; 0x3bfc <DIO_Set_Pin_Direction+0xf2>
    3bf8:	88 0f       	add	r24, r24
    3bfa:	99 1f       	adc	r25, r25
    3bfc:	0a 94       	dec	r0
    3bfe:	e2 f7       	brpl	.-8      	; 0x3bf8 <DIO_Set_Pin_Direction+0xee>
    3c00:	84 2b       	or	r24, r20
    3c02:	8c 93       	st	X, r24
    3c04:	93 c1       	rjmp	.+806    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
				break;
				case PORT_D:
					SET_BIT(DDRD,pin);
    3c06:	a1 e3       	ldi	r26, 0x31	; 49
    3c08:	b0 e0       	ldi	r27, 0x00	; 0
    3c0a:	e1 e3       	ldi	r30, 0x31	; 49
    3c0c:	f0 e0       	ldi	r31, 0x00	; 0
    3c0e:	80 81       	ld	r24, Z
    3c10:	48 2f       	mov	r20, r24
    3c12:	8a 81       	ldd	r24, Y+2	; 0x02
    3c14:	28 2f       	mov	r18, r24
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	81 e0       	ldi	r24, 0x01	; 1
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	02 2e       	mov	r0, r18
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <DIO_Set_Pin_Direction+0x11a>
    3c20:	88 0f       	add	r24, r24
    3c22:	99 1f       	adc	r25, r25
    3c24:	0a 94       	dec	r0
    3c26:	e2 f7       	brpl	.-8      	; 0x3c20 <DIO_Set_Pin_Direction+0x116>
    3c28:	84 2b       	or	r24, r20
    3c2a:	8c 93       	st	X, r24
    3c2c:	7f c1       	rjmp	.+766    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
				break;
			}
			break ;
		
		case INFREE :
			switch (port)
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	3f 83       	std	Y+7, r19	; 0x07
    3c36:	2e 83       	std	Y+6, r18	; 0x06
    3c38:	8e 81       	ldd	r24, Y+6	; 0x06
    3c3a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c3c:	81 30       	cpi	r24, 0x01	; 1
    3c3e:	91 05       	cpc	r25, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <DIO_Set_Pin_Direction+0x13a>
    3c42:	3f c0       	rjmp	.+126    	; 0x3cc2 <DIO_Set_Pin_Direction+0x1b8>
    3c44:	2e 81       	ldd	r18, Y+6	; 0x06
    3c46:	3f 81       	ldd	r19, Y+7	; 0x07
    3c48:	22 30       	cpi	r18, 0x02	; 2
    3c4a:	31 05       	cpc	r19, r1
    3c4c:	2c f4       	brge	.+10     	; 0x3c58 <DIO_Set_Pin_Direction+0x14e>
    3c4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3c50:	9f 81       	ldd	r25, Y+7	; 0x07
    3c52:	00 97       	sbiw	r24, 0x00	; 0
    3c54:	71 f0       	breq	.+28     	; 0x3c72 <DIO_Set_Pin_Direction+0x168>
    3c56:	6a c1       	rjmp	.+724    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
    3c58:	2e 81       	ldd	r18, Y+6	; 0x06
    3c5a:	3f 81       	ldd	r19, Y+7	; 0x07
    3c5c:	22 30       	cpi	r18, 0x02	; 2
    3c5e:	31 05       	cpc	r19, r1
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <DIO_Set_Pin_Direction+0x15a>
    3c62:	57 c0       	rjmp	.+174    	; 0x3d12 <DIO_Set_Pin_Direction+0x208>
    3c64:	8e 81       	ldd	r24, Y+6	; 0x06
    3c66:	9f 81       	ldd	r25, Y+7	; 0x07
    3c68:	83 30       	cpi	r24, 0x03	; 3
    3c6a:	91 05       	cpc	r25, r1
    3c6c:	09 f4       	brne	.+2      	; 0x3c70 <DIO_Set_Pin_Direction+0x166>
    3c6e:	79 c0       	rjmp	.+242    	; 0x3d62 <DIO_Set_Pin_Direction+0x258>
    3c70:	5d c1       	rjmp	.+698    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
			{
				case PORT_A:
					CLEAR_BIT(DDRA,pin);
    3c72:	aa e3       	ldi	r26, 0x3A	; 58
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	ea e3       	ldi	r30, 0x3A	; 58
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	48 2f       	mov	r20, r24
    3c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c80:	28 2f       	mov	r18, r24
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	02 c0       	rjmp	.+4      	; 0x3c8e <DIO_Set_Pin_Direction+0x184>
    3c8a:	88 0f       	add	r24, r24
    3c8c:	99 1f       	adc	r25, r25
    3c8e:	2a 95       	dec	r18
    3c90:	e2 f7       	brpl	.-8      	; 0x3c8a <DIO_Set_Pin_Direction+0x180>
    3c92:	80 95       	com	r24
    3c94:	84 23       	and	r24, r20
    3c96:	8c 93       	st	X, r24
					CLEAR_BIT(PORTA,pin);
    3c98:	ab e3       	ldi	r26, 0x3B	; 59
    3c9a:	b0 e0       	ldi	r27, 0x00	; 0
    3c9c:	eb e3       	ldi	r30, 0x3B	; 59
    3c9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ca0:	80 81       	ld	r24, Z
    3ca2:	48 2f       	mov	r20, r24
    3ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca6:	28 2f       	mov	r18, r24
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	02 2e       	mov	r0, r18
    3cb0:	02 c0       	rjmp	.+4      	; 0x3cb6 <DIO_Set_Pin_Direction+0x1ac>
    3cb2:	88 0f       	add	r24, r24
    3cb4:	99 1f       	adc	r25, r25
    3cb6:	0a 94       	dec	r0
    3cb8:	e2 f7       	brpl	.-8      	; 0x3cb2 <DIO_Set_Pin_Direction+0x1a8>
    3cba:	80 95       	com	r24
    3cbc:	84 23       	and	r24, r20
    3cbe:	8c 93       	st	X, r24
    3cc0:	35 c1       	rjmp	.+618    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
					break;
				case PORT_B:
					CLEAR_BIT(DDRB,pin);
    3cc2:	a7 e3       	ldi	r26, 0x37	; 55
    3cc4:	b0 e0       	ldi	r27, 0x00	; 0
    3cc6:	e7 e3       	ldi	r30, 0x37	; 55
    3cc8:	f0 e0       	ldi	r31, 0x00	; 0
    3cca:	80 81       	ld	r24, Z
    3ccc:	48 2f       	mov	r20, r24
    3cce:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd0:	28 2f       	mov	r18, r24
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	90 e0       	ldi	r25, 0x00	; 0
    3cd8:	02 c0       	rjmp	.+4      	; 0x3cde <DIO_Set_Pin_Direction+0x1d4>
    3cda:	88 0f       	add	r24, r24
    3cdc:	99 1f       	adc	r25, r25
    3cde:	2a 95       	dec	r18
    3ce0:	e2 f7       	brpl	.-8      	; 0x3cda <DIO_Set_Pin_Direction+0x1d0>
    3ce2:	80 95       	com	r24
    3ce4:	84 23       	and	r24, r20
    3ce6:	8c 93       	st	X, r24
					CLEAR_BIT(PORTB,pin);
    3ce8:	a8 e3       	ldi	r26, 0x38	; 56
    3cea:	b0 e0       	ldi	r27, 0x00	; 0
    3cec:	e8 e3       	ldi	r30, 0x38	; 56
    3cee:	f0 e0       	ldi	r31, 0x00	; 0
    3cf0:	80 81       	ld	r24, Z
    3cf2:	48 2f       	mov	r20, r24
    3cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf6:	28 2f       	mov	r18, r24
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	02 2e       	mov	r0, r18
    3d00:	02 c0       	rjmp	.+4      	; 0x3d06 <DIO_Set_Pin_Direction+0x1fc>
    3d02:	88 0f       	add	r24, r24
    3d04:	99 1f       	adc	r25, r25
    3d06:	0a 94       	dec	r0
    3d08:	e2 f7       	brpl	.-8      	; 0x3d02 <DIO_Set_Pin_Direction+0x1f8>
    3d0a:	80 95       	com	r24
    3d0c:	84 23       	and	r24, r20
    3d0e:	8c 93       	st	X, r24
    3d10:	0d c1       	rjmp	.+538    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
					break;
				case PORT_C:
					CLEAR_BIT(DDRC,pin);
    3d12:	a4 e3       	ldi	r26, 0x34	; 52
    3d14:	b0 e0       	ldi	r27, 0x00	; 0
    3d16:	e4 e3       	ldi	r30, 0x34	; 52
    3d18:	f0 e0       	ldi	r31, 0x00	; 0
    3d1a:	80 81       	ld	r24, Z
    3d1c:	48 2f       	mov	r20, r24
    3d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d20:	28 2f       	mov	r18, r24
    3d22:	30 e0       	ldi	r19, 0x00	; 0
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <DIO_Set_Pin_Direction+0x224>
    3d2a:	88 0f       	add	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	2a 95       	dec	r18
    3d30:	e2 f7       	brpl	.-8      	; 0x3d2a <DIO_Set_Pin_Direction+0x220>
    3d32:	80 95       	com	r24
    3d34:	84 23       	and	r24, r20
    3d36:	8c 93       	st	X, r24
					CLEAR_BIT(PORTC,pin);
    3d38:	a5 e3       	ldi	r26, 0x35	; 53
    3d3a:	b0 e0       	ldi	r27, 0x00	; 0
    3d3c:	e5 e3       	ldi	r30, 0x35	; 53
    3d3e:	f0 e0       	ldi	r31, 0x00	; 0
    3d40:	80 81       	ld	r24, Z
    3d42:	48 2f       	mov	r20, r24
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	28 2f       	mov	r18, r24
    3d48:	30 e0       	ldi	r19, 0x00	; 0
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	02 2e       	mov	r0, r18
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <DIO_Set_Pin_Direction+0x24c>
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	0a 94       	dec	r0
    3d58:	e2 f7       	brpl	.-8      	; 0x3d52 <DIO_Set_Pin_Direction+0x248>
    3d5a:	80 95       	com	r24
    3d5c:	84 23       	and	r24, r20
    3d5e:	8c 93       	st	X, r24
    3d60:	e5 c0       	rjmp	.+458    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
					break;
				case PORT_D:
					CLEAR_BIT(DDRD,pin);
    3d62:	a1 e3       	ldi	r26, 0x31	; 49
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	e1 e3       	ldi	r30, 0x31	; 49
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	80 81       	ld	r24, Z
    3d6c:	48 2f       	mov	r20, r24
    3d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d70:	28 2f       	mov	r18, r24
    3d72:	30 e0       	ldi	r19, 0x00	; 0
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	02 c0       	rjmp	.+4      	; 0x3d7e <DIO_Set_Pin_Direction+0x274>
    3d7a:	88 0f       	add	r24, r24
    3d7c:	99 1f       	adc	r25, r25
    3d7e:	2a 95       	dec	r18
    3d80:	e2 f7       	brpl	.-8      	; 0x3d7a <DIO_Set_Pin_Direction+0x270>
    3d82:	80 95       	com	r24
    3d84:	84 23       	and	r24, r20
    3d86:	8c 93       	st	X, r24
					CLEAR_BIT(PORTD,pin);
    3d88:	a2 e3       	ldi	r26, 0x32	; 50
    3d8a:	b0 e0       	ldi	r27, 0x00	; 0
    3d8c:	e2 e3       	ldi	r30, 0x32	; 50
    3d8e:	f0 e0       	ldi	r31, 0x00	; 0
    3d90:	80 81       	ld	r24, Z
    3d92:	48 2f       	mov	r20, r24
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	28 2f       	mov	r18, r24
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	02 2e       	mov	r0, r18
    3da0:	02 c0       	rjmp	.+4      	; 0x3da6 <DIO_Set_Pin_Direction+0x29c>
    3da2:	88 0f       	add	r24, r24
    3da4:	99 1f       	adc	r25, r25
    3da6:	0a 94       	dec	r0
    3da8:	e2 f7       	brpl	.-8      	; 0x3da2 <DIO_Set_Pin_Direction+0x298>
    3daa:	80 95       	com	r24
    3dac:	84 23       	and	r24, r20
    3dae:	8c 93       	st	X, r24
    3db0:	bd c0       	rjmp	.+378    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
					break;
			}
			break ;
		
		case INPULLUP :
			switch (port) 
    3db2:	89 81       	ldd	r24, Y+1	; 0x01
    3db4:	28 2f       	mov	r18, r24
    3db6:	30 e0       	ldi	r19, 0x00	; 0
    3db8:	3d 83       	std	Y+5, r19	; 0x05
    3dba:	2c 83       	std	Y+4, r18	; 0x04
    3dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc0:	81 30       	cpi	r24, 0x01	; 1
    3dc2:	91 05       	cpc	r25, r1
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <DIO_Set_Pin_Direction+0x2be>
    3dc6:	3e c0       	rjmp	.+124    	; 0x3e44 <DIO_Set_Pin_Direction+0x33a>
    3dc8:	2c 81       	ldd	r18, Y+4	; 0x04
    3dca:	3d 81       	ldd	r19, Y+5	; 0x05
    3dcc:	22 30       	cpi	r18, 0x02	; 2
    3dce:	31 05       	cpc	r19, r1
    3dd0:	2c f4       	brge	.+10     	; 0x3ddc <DIO_Set_Pin_Direction+0x2d2>
    3dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd6:	00 97       	sbiw	r24, 0x00	; 0
    3dd8:	71 f0       	breq	.+28     	; 0x3df6 <DIO_Set_Pin_Direction+0x2ec>
    3dda:	a8 c0       	rjmp	.+336    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
    3ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    3dde:	3d 81       	ldd	r19, Y+5	; 0x05
    3de0:	22 30       	cpi	r18, 0x02	; 2
    3de2:	31 05       	cpc	r19, r1
    3de4:	09 f4       	brne	.+2      	; 0x3de8 <DIO_Set_Pin_Direction+0x2de>
    3de6:	55 c0       	rjmp	.+170    	; 0x3e92 <DIO_Set_Pin_Direction+0x388>
    3de8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dea:	9d 81       	ldd	r25, Y+5	; 0x05
    3dec:	83 30       	cpi	r24, 0x03	; 3
    3dee:	91 05       	cpc	r25, r1
    3df0:	09 f4       	brne	.+2      	; 0x3df4 <DIO_Set_Pin_Direction+0x2ea>
    3df2:	76 c0       	rjmp	.+236    	; 0x3ee0 <DIO_Set_Pin_Direction+0x3d6>
    3df4:	9b c0       	rjmp	.+310    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
			{
				case PORT_A:
				CLEAR_BIT(DDRA,pin);
    3df6:	aa e3       	ldi	r26, 0x3A	; 58
    3df8:	b0 e0       	ldi	r27, 0x00	; 0
    3dfa:	ea e3       	ldi	r30, 0x3A	; 58
    3dfc:	f0 e0       	ldi	r31, 0x00	; 0
    3dfe:	80 81       	ld	r24, Z
    3e00:	48 2f       	mov	r20, r24
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	28 2f       	mov	r18, r24
    3e06:	30 e0       	ldi	r19, 0x00	; 0
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	02 c0       	rjmp	.+4      	; 0x3e12 <DIO_Set_Pin_Direction+0x308>
    3e0e:	88 0f       	add	r24, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	2a 95       	dec	r18
    3e14:	e2 f7       	brpl	.-8      	; 0x3e0e <DIO_Set_Pin_Direction+0x304>
    3e16:	80 95       	com	r24
    3e18:	84 23       	and	r24, r20
    3e1a:	8c 93       	st	X, r24
				SET_BIT(PORTA,pin);
    3e1c:	ab e3       	ldi	r26, 0x3B	; 59
    3e1e:	b0 e0       	ldi	r27, 0x00	; 0
    3e20:	eb e3       	ldi	r30, 0x3B	; 59
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	80 81       	ld	r24, Z
    3e26:	48 2f       	mov	r20, r24
    3e28:	8a 81       	ldd	r24, Y+2	; 0x02
    3e2a:	28 2f       	mov	r18, r24
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	81 e0       	ldi	r24, 0x01	; 1
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	02 2e       	mov	r0, r18
    3e34:	02 c0       	rjmp	.+4      	; 0x3e3a <DIO_Set_Pin_Direction+0x330>
    3e36:	88 0f       	add	r24, r24
    3e38:	99 1f       	adc	r25, r25
    3e3a:	0a 94       	dec	r0
    3e3c:	e2 f7       	brpl	.-8      	; 0x3e36 <DIO_Set_Pin_Direction+0x32c>
    3e3e:	84 2b       	or	r24, r20
    3e40:	8c 93       	st	X, r24
    3e42:	74 c0       	rjmp	.+232    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
				break;
				case PORT_B:
				CLEAR_BIT(DDRB,pin);
    3e44:	a7 e3       	ldi	r26, 0x37	; 55
    3e46:	b0 e0       	ldi	r27, 0x00	; 0
    3e48:	e7 e3       	ldi	r30, 0x37	; 55
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	80 81       	ld	r24, Z
    3e4e:	48 2f       	mov	r20, r24
    3e50:	8a 81       	ldd	r24, Y+2	; 0x02
    3e52:	28 2f       	mov	r18, r24
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	81 e0       	ldi	r24, 0x01	; 1
    3e58:	90 e0       	ldi	r25, 0x00	; 0
    3e5a:	02 c0       	rjmp	.+4      	; 0x3e60 <DIO_Set_Pin_Direction+0x356>
    3e5c:	88 0f       	add	r24, r24
    3e5e:	99 1f       	adc	r25, r25
    3e60:	2a 95       	dec	r18
    3e62:	e2 f7       	brpl	.-8      	; 0x3e5c <DIO_Set_Pin_Direction+0x352>
    3e64:	80 95       	com	r24
    3e66:	84 23       	and	r24, r20
    3e68:	8c 93       	st	X, r24
				SET_BIT(PORTB,pin);
    3e6a:	a8 e3       	ldi	r26, 0x38	; 56
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	e8 e3       	ldi	r30, 0x38	; 56
    3e70:	f0 e0       	ldi	r31, 0x00	; 0
    3e72:	80 81       	ld	r24, Z
    3e74:	48 2f       	mov	r20, r24
    3e76:	8a 81       	ldd	r24, Y+2	; 0x02
    3e78:	28 2f       	mov	r18, r24
    3e7a:	30 e0       	ldi	r19, 0x00	; 0
    3e7c:	81 e0       	ldi	r24, 0x01	; 1
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	02 2e       	mov	r0, r18
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <DIO_Set_Pin_Direction+0x37e>
    3e84:	88 0f       	add	r24, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	0a 94       	dec	r0
    3e8a:	e2 f7       	brpl	.-8      	; 0x3e84 <DIO_Set_Pin_Direction+0x37a>
    3e8c:	84 2b       	or	r24, r20
    3e8e:	8c 93       	st	X, r24
    3e90:	4d c0       	rjmp	.+154    	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
				break;
				case PORT_C:
				CLEAR_BIT(DDRC,pin);
    3e92:	a4 e3       	ldi	r26, 0x34	; 52
    3e94:	b0 e0       	ldi	r27, 0x00	; 0
    3e96:	e4 e3       	ldi	r30, 0x34	; 52
    3e98:	f0 e0       	ldi	r31, 0x00	; 0
    3e9a:	80 81       	ld	r24, Z
    3e9c:	48 2f       	mov	r20, r24
    3e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea0:	28 2f       	mov	r18, r24
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	81 e0       	ldi	r24, 0x01	; 1
    3ea6:	90 e0       	ldi	r25, 0x00	; 0
    3ea8:	02 c0       	rjmp	.+4      	; 0x3eae <DIO_Set_Pin_Direction+0x3a4>
    3eaa:	88 0f       	add	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	2a 95       	dec	r18
    3eb0:	e2 f7       	brpl	.-8      	; 0x3eaa <DIO_Set_Pin_Direction+0x3a0>
    3eb2:	80 95       	com	r24
    3eb4:	84 23       	and	r24, r20
    3eb6:	8c 93       	st	X, r24
				SET_BIT(PORTC,pin);
    3eb8:	a5 e3       	ldi	r26, 0x35	; 53
    3eba:	b0 e0       	ldi	r27, 0x00	; 0
    3ebc:	e5 e3       	ldi	r30, 0x35	; 53
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	80 81       	ld	r24, Z
    3ec2:	48 2f       	mov	r20, r24
    3ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec6:	28 2f       	mov	r18, r24
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	81 e0       	ldi	r24, 0x01	; 1
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	02 2e       	mov	r0, r18
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <DIO_Set_Pin_Direction+0x3cc>
    3ed2:	88 0f       	add	r24, r24
    3ed4:	99 1f       	adc	r25, r25
    3ed6:	0a 94       	dec	r0
    3ed8:	e2 f7       	brpl	.-8      	; 0x3ed2 <DIO_Set_Pin_Direction+0x3c8>
    3eda:	84 2b       	or	r24, r20
    3edc:	8c 93       	st	X, r24
    3ede:	26 c0       	rjmp	.+76     	; 0x3f2c <DIO_Set_Pin_Direction+0x422>
				break;
				case PORT_D:
				CLEAR_BIT(DDRD,pin);
    3ee0:	a1 e3       	ldi	r26, 0x31	; 49
    3ee2:	b0 e0       	ldi	r27, 0x00	; 0
    3ee4:	e1 e3       	ldi	r30, 0x31	; 49
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	80 81       	ld	r24, Z
    3eea:	48 2f       	mov	r20, r24
    3eec:	8a 81       	ldd	r24, Y+2	; 0x02
    3eee:	28 2f       	mov	r18, r24
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	81 e0       	ldi	r24, 0x01	; 1
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <DIO_Set_Pin_Direction+0x3f2>
    3ef8:	88 0f       	add	r24, r24
    3efa:	99 1f       	adc	r25, r25
    3efc:	2a 95       	dec	r18
    3efe:	e2 f7       	brpl	.-8      	; 0x3ef8 <DIO_Set_Pin_Direction+0x3ee>
    3f00:	80 95       	com	r24
    3f02:	84 23       	and	r24, r20
    3f04:	8c 93       	st	X, r24
				SET_BIT(PORTD,pin);
    3f06:	a2 e3       	ldi	r26, 0x32	; 50
    3f08:	b0 e0       	ldi	r27, 0x00	; 0
    3f0a:	e2 e3       	ldi	r30, 0x32	; 50
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	80 81       	ld	r24, Z
    3f10:	48 2f       	mov	r20, r24
    3f12:	8a 81       	ldd	r24, Y+2	; 0x02
    3f14:	28 2f       	mov	r18, r24
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	90 e0       	ldi	r25, 0x00	; 0
    3f1c:	02 2e       	mov	r0, r18
    3f1e:	02 c0       	rjmp	.+4      	; 0x3f24 <DIO_Set_Pin_Direction+0x41a>
    3f20:	88 0f       	add	r24, r24
    3f22:	99 1f       	adc	r25, r25
    3f24:	0a 94       	dec	r0
    3f26:	e2 f7       	brpl	.-8      	; 0x3f20 <DIO_Set_Pin_Direction+0x416>
    3f28:	84 2b       	or	r24, r20
    3f2a:	8c 93       	st	X, r24
				break;
			}
			break ;
	 }	 
 }
    3f2c:	2b 96       	adiw	r28, 0x0b	; 11
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	cf 91       	pop	r28
    3f3a:	df 91       	pop	r29
    3f3c:	08 95       	ret

00003f3e <DIO_Write_Pin>:
 void DIO_Write_Pin (PORT_t port , PIN_t pin , DIO_Voltage_t volt)
 {
    3f3e:	df 93       	push	r29
    3f40:	cf 93       	push	r28
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	29 97       	sbiw	r28, 0x09	; 9
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
    3f52:	89 83       	std	Y+1, r24	; 0x01
    3f54:	6a 83       	std	Y+2, r22	; 0x02
    3f56:	4b 83       	std	Y+3, r20	; 0x03
	 switch ( volt )
    3f58:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5a:	28 2f       	mov	r18, r24
    3f5c:	30 e0       	ldi	r19, 0x00	; 0
    3f5e:	39 87       	std	Y+9, r19	; 0x09
    3f60:	28 87       	std	Y+8, r18	; 0x08
    3f62:	88 85       	ldd	r24, Y+8	; 0x08
    3f64:	99 85       	ldd	r25, Y+9	; 0x09
    3f66:	00 97       	sbiw	r24, 0x00	; 0
    3f68:	39 f0       	breq	.+14     	; 0x3f78 <DIO_Write_Pin+0x3a>
    3f6a:	28 85       	ldd	r18, Y+8	; 0x08
    3f6c:	39 85       	ldd	r19, Y+9	; 0x09
    3f6e:	21 30       	cpi	r18, 0x01	; 1
    3f70:	31 05       	cpc	r19, r1
    3f72:	09 f4       	brne	.+2      	; 0x3f76 <DIO_Write_Pin+0x38>
    3f74:	75 c0       	rjmp	.+234    	; 0x4060 <DIO_Write_Pin+0x122>
    3f76:	e2 c0       	rjmp	.+452    	; 0x413c <DIO_Write_Pin+0x1fe>
	 {
		 case LOW :
			switch (port)
    3f78:	89 81       	ldd	r24, Y+1	; 0x01
    3f7a:	28 2f       	mov	r18, r24
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	3f 83       	std	Y+7, r19	; 0x07
    3f80:	2e 83       	std	Y+6, r18	; 0x06
    3f82:	8e 81       	ldd	r24, Y+6	; 0x06
    3f84:	9f 81       	ldd	r25, Y+7	; 0x07
    3f86:	81 30       	cpi	r24, 0x01	; 1
    3f88:	91 05       	cpc	r25, r1
    3f8a:	59 f1       	breq	.+86     	; 0x3fe2 <DIO_Write_Pin+0xa4>
    3f8c:	2e 81       	ldd	r18, Y+6	; 0x06
    3f8e:	3f 81       	ldd	r19, Y+7	; 0x07
    3f90:	22 30       	cpi	r18, 0x02	; 2
    3f92:	31 05       	cpc	r19, r1
    3f94:	2c f4       	brge	.+10     	; 0x3fa0 <DIO_Write_Pin+0x62>
    3f96:	8e 81       	ldd	r24, Y+6	; 0x06
    3f98:	9f 81       	ldd	r25, Y+7	; 0x07
    3f9a:	00 97       	sbiw	r24, 0x00	; 0
    3f9c:	69 f0       	breq	.+26     	; 0x3fb8 <DIO_Write_Pin+0x7a>
    3f9e:	ce c0       	rjmp	.+412    	; 0x413c <DIO_Write_Pin+0x1fe>
    3fa0:	2e 81       	ldd	r18, Y+6	; 0x06
    3fa2:	3f 81       	ldd	r19, Y+7	; 0x07
    3fa4:	22 30       	cpi	r18, 0x02	; 2
    3fa6:	31 05       	cpc	r19, r1
    3fa8:	89 f1       	breq	.+98     	; 0x400c <DIO_Write_Pin+0xce>
    3faa:	8e 81       	ldd	r24, Y+6	; 0x06
    3fac:	9f 81       	ldd	r25, Y+7	; 0x07
    3fae:	83 30       	cpi	r24, 0x03	; 3
    3fb0:	91 05       	cpc	r25, r1
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <DIO_Write_Pin+0x78>
    3fb4:	40 c0       	rjmp	.+128    	; 0x4036 <DIO_Write_Pin+0xf8>
    3fb6:	c2 c0       	rjmp	.+388    	; 0x413c <DIO_Write_Pin+0x1fe>
			{
				case PORT_A:
				CLEAR_BIT(PORTA,pin);
    3fb8:	ab e3       	ldi	r26, 0x3B	; 59
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	eb e3       	ldi	r30, 0x3B	; 59
    3fbe:	f0 e0       	ldi	r31, 0x00	; 0
    3fc0:	80 81       	ld	r24, Z
    3fc2:	48 2f       	mov	r20, r24
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	28 2f       	mov	r18, r24
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	81 e0       	ldi	r24, 0x01	; 1
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	02 2e       	mov	r0, r18
    3fd0:	02 c0       	rjmp	.+4      	; 0x3fd6 <DIO_Write_Pin+0x98>
    3fd2:	88 0f       	add	r24, r24
    3fd4:	99 1f       	adc	r25, r25
    3fd6:	0a 94       	dec	r0
    3fd8:	e2 f7       	brpl	.-8      	; 0x3fd2 <DIO_Write_Pin+0x94>
    3fda:	80 95       	com	r24
    3fdc:	84 23       	and	r24, r20
    3fde:	8c 93       	st	X, r24
    3fe0:	ad c0       	rjmp	.+346    	; 0x413c <DIO_Write_Pin+0x1fe>
				break;
				case PORT_B:
				CLEAR_BIT(PORTB,pin);
    3fe2:	a8 e3       	ldi	r26, 0x38	; 56
    3fe4:	b0 e0       	ldi	r27, 0x00	; 0
    3fe6:	e8 e3       	ldi	r30, 0x38	; 56
    3fe8:	f0 e0       	ldi	r31, 0x00	; 0
    3fea:	80 81       	ld	r24, Z
    3fec:	48 2f       	mov	r20, r24
    3fee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff0:	28 2f       	mov	r18, r24
    3ff2:	30 e0       	ldi	r19, 0x00	; 0
    3ff4:	81 e0       	ldi	r24, 0x01	; 1
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	02 2e       	mov	r0, r18
    3ffa:	02 c0       	rjmp	.+4      	; 0x4000 <DIO_Write_Pin+0xc2>
    3ffc:	88 0f       	add	r24, r24
    3ffe:	99 1f       	adc	r25, r25
    4000:	0a 94       	dec	r0
    4002:	e2 f7       	brpl	.-8      	; 0x3ffc <DIO_Write_Pin+0xbe>
    4004:	80 95       	com	r24
    4006:	84 23       	and	r24, r20
    4008:	8c 93       	st	X, r24
    400a:	98 c0       	rjmp	.+304    	; 0x413c <DIO_Write_Pin+0x1fe>
				break;
				case PORT_C:
				CLEAR_BIT(PORTC,pin);
    400c:	a5 e3       	ldi	r26, 0x35	; 53
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	e5 e3       	ldi	r30, 0x35	; 53
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	48 2f       	mov	r20, r24
    4018:	8a 81       	ldd	r24, Y+2	; 0x02
    401a:	28 2f       	mov	r18, r24
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	02 2e       	mov	r0, r18
    4024:	02 c0       	rjmp	.+4      	; 0x402a <DIO_Write_Pin+0xec>
    4026:	88 0f       	add	r24, r24
    4028:	99 1f       	adc	r25, r25
    402a:	0a 94       	dec	r0
    402c:	e2 f7       	brpl	.-8      	; 0x4026 <DIO_Write_Pin+0xe8>
    402e:	80 95       	com	r24
    4030:	84 23       	and	r24, r20
    4032:	8c 93       	st	X, r24
    4034:	83 c0       	rjmp	.+262    	; 0x413c <DIO_Write_Pin+0x1fe>
				break;
				case PORT_D:
				CLEAR_BIT(PORTD,pin);
    4036:	a2 e3       	ldi	r26, 0x32	; 50
    4038:	b0 e0       	ldi	r27, 0x00	; 0
    403a:	e2 e3       	ldi	r30, 0x32	; 50
    403c:	f0 e0       	ldi	r31, 0x00	; 0
    403e:	80 81       	ld	r24, Z
    4040:	48 2f       	mov	r20, r24
    4042:	8a 81       	ldd	r24, Y+2	; 0x02
    4044:	28 2f       	mov	r18, r24
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	02 2e       	mov	r0, r18
    404e:	02 c0       	rjmp	.+4      	; 0x4054 <DIO_Write_Pin+0x116>
    4050:	88 0f       	add	r24, r24
    4052:	99 1f       	adc	r25, r25
    4054:	0a 94       	dec	r0
    4056:	e2 f7       	brpl	.-8      	; 0x4050 <DIO_Write_Pin+0x112>
    4058:	80 95       	com	r24
    405a:	84 23       	and	r24, r20
    405c:	8c 93       	st	X, r24
    405e:	6e c0       	rjmp	.+220    	; 0x413c <DIO_Write_Pin+0x1fe>
				break;
			}
			break ;
		case HIGH :
			switch (port)
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	28 2f       	mov	r18, r24
    4064:	30 e0       	ldi	r19, 0x00	; 0
    4066:	3d 83       	std	Y+5, r19	; 0x05
    4068:	2c 83       	std	Y+4, r18	; 0x04
    406a:	8c 81       	ldd	r24, Y+4	; 0x04
    406c:	9d 81       	ldd	r25, Y+5	; 0x05
    406e:	81 30       	cpi	r24, 0x01	; 1
    4070:	91 05       	cpc	r25, r1
    4072:	49 f1       	breq	.+82     	; 0x40c6 <DIO_Write_Pin+0x188>
    4074:	2c 81       	ldd	r18, Y+4	; 0x04
    4076:	3d 81       	ldd	r19, Y+5	; 0x05
    4078:	22 30       	cpi	r18, 0x02	; 2
    407a:	31 05       	cpc	r19, r1
    407c:	2c f4       	brge	.+10     	; 0x4088 <DIO_Write_Pin+0x14a>
    407e:	8c 81       	ldd	r24, Y+4	; 0x04
    4080:	9d 81       	ldd	r25, Y+5	; 0x05
    4082:	00 97       	sbiw	r24, 0x00	; 0
    4084:	61 f0       	breq	.+24     	; 0x409e <DIO_Write_Pin+0x160>
    4086:	5a c0       	rjmp	.+180    	; 0x413c <DIO_Write_Pin+0x1fe>
    4088:	2c 81       	ldd	r18, Y+4	; 0x04
    408a:	3d 81       	ldd	r19, Y+5	; 0x05
    408c:	22 30       	cpi	r18, 0x02	; 2
    408e:	31 05       	cpc	r19, r1
    4090:	71 f1       	breq	.+92     	; 0x40ee <DIO_Write_Pin+0x1b0>
    4092:	8c 81       	ldd	r24, Y+4	; 0x04
    4094:	9d 81       	ldd	r25, Y+5	; 0x05
    4096:	83 30       	cpi	r24, 0x03	; 3
    4098:	91 05       	cpc	r25, r1
    409a:	e9 f1       	breq	.+122    	; 0x4116 <DIO_Write_Pin+0x1d8>
    409c:	4f c0       	rjmp	.+158    	; 0x413c <DIO_Write_Pin+0x1fe>
			{
				case PORT_A:
				SET_BIT(PORTA,pin);
    409e:	ab e3       	ldi	r26, 0x3B	; 59
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	eb e3       	ldi	r30, 0x3B	; 59
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	48 2f       	mov	r20, r24
    40aa:	8a 81       	ldd	r24, Y+2	; 0x02
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	02 2e       	mov	r0, r18
    40b6:	02 c0       	rjmp	.+4      	; 0x40bc <DIO_Write_Pin+0x17e>
    40b8:	88 0f       	add	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	0a 94       	dec	r0
    40be:	e2 f7       	brpl	.-8      	; 0x40b8 <DIO_Write_Pin+0x17a>
    40c0:	84 2b       	or	r24, r20
    40c2:	8c 93       	st	X, r24
    40c4:	3b c0       	rjmp	.+118    	; 0x413c <DIO_Write_Pin+0x1fe>
				break;
				case PORT_B:
				SET_BIT(PORTB,pin);
    40c6:	a8 e3       	ldi	r26, 0x38	; 56
    40c8:	b0 e0       	ldi	r27, 0x00	; 0
    40ca:	e8 e3       	ldi	r30, 0x38	; 56
    40cc:	f0 e0       	ldi	r31, 0x00	; 0
    40ce:	80 81       	ld	r24, Z
    40d0:	48 2f       	mov	r20, r24
    40d2:	8a 81       	ldd	r24, Y+2	; 0x02
    40d4:	28 2f       	mov	r18, r24
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	02 2e       	mov	r0, r18
    40de:	02 c0       	rjmp	.+4      	; 0x40e4 <DIO_Write_Pin+0x1a6>
    40e0:	88 0f       	add	r24, r24
    40e2:	99 1f       	adc	r25, r25
    40e4:	0a 94       	dec	r0
    40e6:	e2 f7       	brpl	.-8      	; 0x40e0 <DIO_Write_Pin+0x1a2>
    40e8:	84 2b       	or	r24, r20
    40ea:	8c 93       	st	X, r24
    40ec:	27 c0       	rjmp	.+78     	; 0x413c <DIO_Write_Pin+0x1fe>
				break;
				case PORT_C:
				SET_BIT(PORTC,pin);
    40ee:	a5 e3       	ldi	r26, 0x35	; 53
    40f0:	b0 e0       	ldi	r27, 0x00	; 0
    40f2:	e5 e3       	ldi	r30, 0x35	; 53
    40f4:	f0 e0       	ldi	r31, 0x00	; 0
    40f6:	80 81       	ld	r24, Z
    40f8:	48 2f       	mov	r20, r24
    40fa:	8a 81       	ldd	r24, Y+2	; 0x02
    40fc:	28 2f       	mov	r18, r24
    40fe:	30 e0       	ldi	r19, 0x00	; 0
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	02 2e       	mov	r0, r18
    4106:	02 c0       	rjmp	.+4      	; 0x410c <DIO_Write_Pin+0x1ce>
    4108:	88 0f       	add	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	0a 94       	dec	r0
    410e:	e2 f7       	brpl	.-8      	; 0x4108 <DIO_Write_Pin+0x1ca>
    4110:	84 2b       	or	r24, r20
    4112:	8c 93       	st	X, r24
    4114:	13 c0       	rjmp	.+38     	; 0x413c <DIO_Write_Pin+0x1fe>
				break;
				case PORT_D:
				SET_BIT(PORTD,pin);
    4116:	a2 e3       	ldi	r26, 0x32	; 50
    4118:	b0 e0       	ldi	r27, 0x00	; 0
    411a:	e2 e3       	ldi	r30, 0x32	; 50
    411c:	f0 e0       	ldi	r31, 0x00	; 0
    411e:	80 81       	ld	r24, Z
    4120:	48 2f       	mov	r20, r24
    4122:	8a 81       	ldd	r24, Y+2	; 0x02
    4124:	28 2f       	mov	r18, r24
    4126:	30 e0       	ldi	r19, 0x00	; 0
    4128:	81 e0       	ldi	r24, 0x01	; 1
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	02 2e       	mov	r0, r18
    412e:	02 c0       	rjmp	.+4      	; 0x4134 <DIO_Write_Pin+0x1f6>
    4130:	88 0f       	add	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	0a 94       	dec	r0
    4136:	e2 f7       	brpl	.-8      	; 0x4130 <DIO_Write_Pin+0x1f2>
    4138:	84 2b       	or	r24, r20
    413a:	8c 93       	st	X, r24
				break;
			}
			break ;		
	 } 
 }
    413c:	29 96       	adiw	r28, 0x09	; 9
    413e:	0f b6       	in	r0, 0x3f	; 63
    4140:	f8 94       	cli
    4142:	de bf       	out	0x3e, r29	; 62
    4144:	0f be       	out	0x3f, r0	; 63
    4146:	cd bf       	out	0x3d, r28	; 61
    4148:	cf 91       	pop	r28
    414a:	df 91       	pop	r29
    414c:	08 95       	ret

0000414e <DIO_Read_Pin>:
 DIO_Voltage_t DIO_Read_Pin (PORT_t port , PIN_t pin )
 {
    414e:	df 93       	push	r29
    4150:	cf 93       	push	r28
    4152:	00 d0       	rcall	.+0      	; 0x4154 <DIO_Read_Pin+0x6>
    4154:	00 d0       	rcall	.+0      	; 0x4156 <DIO_Read_Pin+0x8>
    4156:	0f 92       	push	r0
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
    415c:	8a 83       	std	Y+2, r24	; 0x02
    415e:	6b 83       	std	Y+3, r22	; 0x03
	 DIO_Voltage_t volt = LOW ;
    4160:	19 82       	std	Y+1, r1	; 0x01
	 
		 switch (port)
    4162:	8a 81       	ldd	r24, Y+2	; 0x02
    4164:	28 2f       	mov	r18, r24
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	3d 83       	std	Y+5, r19	; 0x05
    416a:	2c 83       	std	Y+4, r18	; 0x04
    416c:	4c 81       	ldd	r20, Y+4	; 0x04
    416e:	5d 81       	ldd	r21, Y+5	; 0x05
    4170:	41 30       	cpi	r20, 0x01	; 1
    4172:	51 05       	cpc	r21, r1
    4174:	41 f1       	breq	.+80     	; 0x41c6 <DIO_Read_Pin+0x78>
    4176:	8c 81       	ldd	r24, Y+4	; 0x04
    4178:	9d 81       	ldd	r25, Y+5	; 0x05
    417a:	82 30       	cpi	r24, 0x02	; 2
    417c:	91 05       	cpc	r25, r1
    417e:	34 f4       	brge	.+12     	; 0x418c <DIO_Read_Pin+0x3e>
    4180:	2c 81       	ldd	r18, Y+4	; 0x04
    4182:	3d 81       	ldd	r19, Y+5	; 0x05
    4184:	21 15       	cp	r18, r1
    4186:	31 05       	cpc	r19, r1
    4188:	61 f0       	breq	.+24     	; 0x41a2 <DIO_Read_Pin+0x54>
    418a:	52 c0       	rjmp	.+164    	; 0x4230 <DIO_Read_Pin+0xe2>
    418c:	4c 81       	ldd	r20, Y+4	; 0x04
    418e:	5d 81       	ldd	r21, Y+5	; 0x05
    4190:	42 30       	cpi	r20, 0x02	; 2
    4192:	51 05       	cpc	r21, r1
    4194:	51 f1       	breq	.+84     	; 0x41ea <DIO_Read_Pin+0x9c>
    4196:	8c 81       	ldd	r24, Y+4	; 0x04
    4198:	9d 81       	ldd	r25, Y+5	; 0x05
    419a:	83 30       	cpi	r24, 0x03	; 3
    419c:	91 05       	cpc	r25, r1
    419e:	b9 f1       	breq	.+110    	; 0x420e <DIO_Read_Pin+0xc0>
    41a0:	47 c0       	rjmp	.+142    	; 0x4230 <DIO_Read_Pin+0xe2>
		 {
			 case PORT_A:
			 volt = READ_BIT(PINA,pin);
    41a2:	e9 e3       	ldi	r30, 0x39	; 57
    41a4:	f0 e0       	ldi	r31, 0x00	; 0
    41a6:	80 81       	ld	r24, Z
    41a8:	28 2f       	mov	r18, r24
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
    41ae:	88 2f       	mov	r24, r24
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	a9 01       	movw	r20, r18
    41b4:	02 c0       	rjmp	.+4      	; 0x41ba <DIO_Read_Pin+0x6c>
    41b6:	55 95       	asr	r21
    41b8:	47 95       	ror	r20
    41ba:	8a 95       	dec	r24
    41bc:	e2 f7       	brpl	.-8      	; 0x41b6 <DIO_Read_Pin+0x68>
    41be:	ca 01       	movw	r24, r20
    41c0:	81 70       	andi	r24, 0x01	; 1
    41c2:	89 83       	std	Y+1, r24	; 0x01
    41c4:	35 c0       	rjmp	.+106    	; 0x4230 <DIO_Read_Pin+0xe2>
			 break;
			 case PORT_B:
			 volt = READ_BIT(PINB,pin);
    41c6:	e6 e3       	ldi	r30, 0x36	; 54
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	80 81       	ld	r24, Z
    41cc:	28 2f       	mov	r18, r24
    41ce:	30 e0       	ldi	r19, 0x00	; 0
    41d0:	8b 81       	ldd	r24, Y+3	; 0x03
    41d2:	88 2f       	mov	r24, r24
    41d4:	90 e0       	ldi	r25, 0x00	; 0
    41d6:	a9 01       	movw	r20, r18
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <DIO_Read_Pin+0x90>
    41da:	55 95       	asr	r21
    41dc:	47 95       	ror	r20
    41de:	8a 95       	dec	r24
    41e0:	e2 f7       	brpl	.-8      	; 0x41da <DIO_Read_Pin+0x8c>
    41e2:	ca 01       	movw	r24, r20
    41e4:	81 70       	andi	r24, 0x01	; 1
    41e6:	89 83       	std	Y+1, r24	; 0x01
    41e8:	23 c0       	rjmp	.+70     	; 0x4230 <DIO_Read_Pin+0xe2>
			 break;
			 case PORT_C:
			 volt = READ_BIT(PINC,pin);
    41ea:	e3 e3       	ldi	r30, 0x33	; 51
    41ec:	f0 e0       	ldi	r31, 0x00	; 0
    41ee:	80 81       	ld	r24, Z
    41f0:	28 2f       	mov	r18, r24
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	8b 81       	ldd	r24, Y+3	; 0x03
    41f6:	88 2f       	mov	r24, r24
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	a9 01       	movw	r20, r18
    41fc:	02 c0       	rjmp	.+4      	; 0x4202 <DIO_Read_Pin+0xb4>
    41fe:	55 95       	asr	r21
    4200:	47 95       	ror	r20
    4202:	8a 95       	dec	r24
    4204:	e2 f7       	brpl	.-8      	; 0x41fe <DIO_Read_Pin+0xb0>
    4206:	ca 01       	movw	r24, r20
    4208:	81 70       	andi	r24, 0x01	; 1
    420a:	89 83       	std	Y+1, r24	; 0x01
    420c:	11 c0       	rjmp	.+34     	; 0x4230 <DIO_Read_Pin+0xe2>
			 break;
			 case PORT_D:
			 volt = READ_BIT(PIND,pin);
    420e:	e0 e3       	ldi	r30, 0x30	; 48
    4210:	f0 e0       	ldi	r31, 0x00	; 0
    4212:	80 81       	ld	r24, Z
    4214:	28 2f       	mov	r18, r24
    4216:	30 e0       	ldi	r19, 0x00	; 0
    4218:	8b 81       	ldd	r24, Y+3	; 0x03
    421a:	88 2f       	mov	r24, r24
    421c:	90 e0       	ldi	r25, 0x00	; 0
    421e:	a9 01       	movw	r20, r18
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <DIO_Read_Pin+0xd8>
    4222:	55 95       	asr	r21
    4224:	47 95       	ror	r20
    4226:	8a 95       	dec	r24
    4228:	e2 f7       	brpl	.-8      	; 0x4222 <DIO_Read_Pin+0xd4>
    422a:	ca 01       	movw	r24, r20
    422c:	81 70       	andi	r24, 0x01	; 1
    422e:	89 83       	std	Y+1, r24	; 0x01
			 break;
		 }
		 return volt ;	 
    4230:	89 81       	ldd	r24, Y+1	; 0x01
 }
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	0f 90       	pop	r0
    4238:	0f 90       	pop	r0
    423a:	0f 90       	pop	r0
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	08 95       	ret

00004242 <DIO_Set_Pin>:
 void DIO_Set_Pin(PORT_t port , PIN_t pin)
 {
    4242:	df 93       	push	r29
    4244:	cf 93       	push	r28
    4246:	00 d0       	rcall	.+0      	; 0x4248 <DIO_Set_Pin+0x6>
    4248:	cd b7       	in	r28, 0x3d	; 61
    424a:	de b7       	in	r29, 0x3e	; 62
    424c:	89 83       	std	Y+1, r24	; 0x01
    424e:	6a 83       	std	Y+2, r22	; 0x02
	 DIO_Write_Pin(port , pin , HIGH);	 
    4250:	89 81       	ldd	r24, Y+1	; 0x01
    4252:	6a 81       	ldd	r22, Y+2	; 0x02
    4254:	41 e0       	ldi	r20, 0x01	; 1
    4256:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
 }
    425a:	0f 90       	pop	r0
    425c:	0f 90       	pop	r0
    425e:	cf 91       	pop	r28
    4260:	df 91       	pop	r29
    4262:	08 95       	ret

00004264 <DIO_Clear_Pin>:
 void DIO_Clear_Pin(PORT_t port , PIN_t pin)
 {
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	00 d0       	rcall	.+0      	; 0x426a <DIO_Clear_Pin+0x6>
    426a:	cd b7       	in	r28, 0x3d	; 61
    426c:	de b7       	in	r29, 0x3e	; 62
    426e:	89 83       	std	Y+1, r24	; 0x01
    4270:	6a 83       	std	Y+2, r22	; 0x02
	 DIO_Write_Pin(port , pin , LOW); 
    4272:	89 81       	ldd	r24, Y+1	; 0x01
    4274:	6a 81       	ldd	r22, Y+2	; 0x02
    4276:	40 e0       	ldi	r20, 0x00	; 0
    4278:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
 }
    427c:	0f 90       	pop	r0
    427e:	0f 90       	pop	r0
    4280:	cf 91       	pop	r28
    4282:	df 91       	pop	r29
    4284:	08 95       	ret

00004286 <DIO_Toggle_Pin>:
 void DIO_Toggle_Pin(PORT_t port , PIN_t pin)
 {
    4286:	df 93       	push	r29
    4288:	cf 93       	push	r28
    428a:	00 d0       	rcall	.+0      	; 0x428c <DIO_Toggle_Pin+0x6>
    428c:	00 d0       	rcall	.+0      	; 0x428e <DIO_Toggle_Pin+0x8>
    428e:	cd b7       	in	r28, 0x3d	; 61
    4290:	de b7       	in	r29, 0x3e	; 62
    4292:	89 83       	std	Y+1, r24	; 0x01
    4294:	6a 83       	std	Y+2, r22	; 0x02
	 switch (port)
    4296:	89 81       	ldd	r24, Y+1	; 0x01
    4298:	28 2f       	mov	r18, r24
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	3c 83       	std	Y+4, r19	; 0x04
    429e:	2b 83       	std	Y+3, r18	; 0x03
    42a0:	8b 81       	ldd	r24, Y+3	; 0x03
    42a2:	9c 81       	ldd	r25, Y+4	; 0x04
    42a4:	81 30       	cpi	r24, 0x01	; 1
    42a6:	91 05       	cpc	r25, r1
    42a8:	49 f1       	breq	.+82     	; 0x42fc <DIO_Toggle_Pin+0x76>
    42aa:	2b 81       	ldd	r18, Y+3	; 0x03
    42ac:	3c 81       	ldd	r19, Y+4	; 0x04
    42ae:	22 30       	cpi	r18, 0x02	; 2
    42b0:	31 05       	cpc	r19, r1
    42b2:	2c f4       	brge	.+10     	; 0x42be <DIO_Toggle_Pin+0x38>
    42b4:	8b 81       	ldd	r24, Y+3	; 0x03
    42b6:	9c 81       	ldd	r25, Y+4	; 0x04
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	61 f0       	breq	.+24     	; 0x42d4 <DIO_Toggle_Pin+0x4e>
    42bc:	5a c0       	rjmp	.+180    	; 0x4372 <DIO_Toggle_Pin+0xec>
    42be:	2b 81       	ldd	r18, Y+3	; 0x03
    42c0:	3c 81       	ldd	r19, Y+4	; 0x04
    42c2:	22 30       	cpi	r18, 0x02	; 2
    42c4:	31 05       	cpc	r19, r1
    42c6:	71 f1       	breq	.+92     	; 0x4324 <DIO_Toggle_Pin+0x9e>
    42c8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ca:	9c 81       	ldd	r25, Y+4	; 0x04
    42cc:	83 30       	cpi	r24, 0x03	; 3
    42ce:	91 05       	cpc	r25, r1
    42d0:	e9 f1       	breq	.+122    	; 0x434c <DIO_Toggle_Pin+0xc6>
    42d2:	4f c0       	rjmp	.+158    	; 0x4372 <DIO_Toggle_Pin+0xec>
	 {
		 case PORT_A:
		 TOGGLE_BIT(PORTA,pin);
    42d4:	ab e3       	ldi	r26, 0x3B	; 59
    42d6:	b0 e0       	ldi	r27, 0x00	; 0
    42d8:	eb e3       	ldi	r30, 0x3B	; 59
    42da:	f0 e0       	ldi	r31, 0x00	; 0
    42dc:	80 81       	ld	r24, Z
    42de:	48 2f       	mov	r20, r24
    42e0:	8a 81       	ldd	r24, Y+2	; 0x02
    42e2:	28 2f       	mov	r18, r24
    42e4:	30 e0       	ldi	r19, 0x00	; 0
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	02 2e       	mov	r0, r18
    42ec:	02 c0       	rjmp	.+4      	; 0x42f2 <DIO_Toggle_Pin+0x6c>
    42ee:	88 0f       	add	r24, r24
    42f0:	99 1f       	adc	r25, r25
    42f2:	0a 94       	dec	r0
    42f4:	e2 f7       	brpl	.-8      	; 0x42ee <DIO_Toggle_Pin+0x68>
    42f6:	84 27       	eor	r24, r20
    42f8:	8c 93       	st	X, r24
    42fa:	3b c0       	rjmp	.+118    	; 0x4372 <DIO_Toggle_Pin+0xec>
		 break;
		 case PORT_B:
		 TOGGLE_BIT(PORTB,pin);
    42fc:	a8 e3       	ldi	r26, 0x38	; 56
    42fe:	b0 e0       	ldi	r27, 0x00	; 0
    4300:	e8 e3       	ldi	r30, 0x38	; 56
    4302:	f0 e0       	ldi	r31, 0x00	; 0
    4304:	80 81       	ld	r24, Z
    4306:	48 2f       	mov	r20, r24
    4308:	8a 81       	ldd	r24, Y+2	; 0x02
    430a:	28 2f       	mov	r18, r24
    430c:	30 e0       	ldi	r19, 0x00	; 0
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	02 2e       	mov	r0, r18
    4314:	02 c0       	rjmp	.+4      	; 0x431a <DIO_Toggle_Pin+0x94>
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	0a 94       	dec	r0
    431c:	e2 f7       	brpl	.-8      	; 0x4316 <DIO_Toggle_Pin+0x90>
    431e:	84 27       	eor	r24, r20
    4320:	8c 93       	st	X, r24
    4322:	27 c0       	rjmp	.+78     	; 0x4372 <DIO_Toggle_Pin+0xec>
		 break;
		 case PORT_C:
		 TOGGLE_BIT(PORTC,pin);
    4324:	a5 e3       	ldi	r26, 0x35	; 53
    4326:	b0 e0       	ldi	r27, 0x00	; 0
    4328:	e5 e3       	ldi	r30, 0x35	; 53
    432a:	f0 e0       	ldi	r31, 0x00	; 0
    432c:	80 81       	ld	r24, Z
    432e:	48 2f       	mov	r20, r24
    4330:	8a 81       	ldd	r24, Y+2	; 0x02
    4332:	28 2f       	mov	r18, r24
    4334:	30 e0       	ldi	r19, 0x00	; 0
    4336:	81 e0       	ldi	r24, 0x01	; 1
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	02 2e       	mov	r0, r18
    433c:	02 c0       	rjmp	.+4      	; 0x4342 <DIO_Toggle_Pin+0xbc>
    433e:	88 0f       	add	r24, r24
    4340:	99 1f       	adc	r25, r25
    4342:	0a 94       	dec	r0
    4344:	e2 f7       	brpl	.-8      	; 0x433e <DIO_Toggle_Pin+0xb8>
    4346:	84 27       	eor	r24, r20
    4348:	8c 93       	st	X, r24
    434a:	13 c0       	rjmp	.+38     	; 0x4372 <DIO_Toggle_Pin+0xec>
		 break;
		 case PORT_D:
		 TOGGLE_BIT(PORTD,pin);
    434c:	a2 e3       	ldi	r26, 0x32	; 50
    434e:	b0 e0       	ldi	r27, 0x00	; 0
    4350:	e2 e3       	ldi	r30, 0x32	; 50
    4352:	f0 e0       	ldi	r31, 0x00	; 0
    4354:	80 81       	ld	r24, Z
    4356:	48 2f       	mov	r20, r24
    4358:	8a 81       	ldd	r24, Y+2	; 0x02
    435a:	28 2f       	mov	r18, r24
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	90 e0       	ldi	r25, 0x00	; 0
    4362:	02 2e       	mov	r0, r18
    4364:	02 c0       	rjmp	.+4      	; 0x436a <DIO_Toggle_Pin+0xe4>
    4366:	88 0f       	add	r24, r24
    4368:	99 1f       	adc	r25, r25
    436a:	0a 94       	dec	r0
    436c:	e2 f7       	brpl	.-8      	; 0x4366 <DIO_Toggle_Pin+0xe0>
    436e:	84 27       	eor	r24, r20
    4370:	8c 93       	st	X, r24
		 break;
	 }	 
 }
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	0f 90       	pop	r0
    437a:	cf 91       	pop	r28
    437c:	df 91       	pop	r29
    437e:	08 95       	ret

00004380 <DIO_Read_Port>:
 u8 DIO_Read_Port(PORT_t port)
 {
    4380:	df 93       	push	r29
    4382:	cf 93       	push	r28
    4384:	00 d0       	rcall	.+0      	; 0x4386 <DIO_Read_Port+0x6>
    4386:	00 d0       	rcall	.+0      	; 0x4388 <DIO_Read_Port+0x8>
    4388:	cd b7       	in	r28, 0x3d	; 61
    438a:	de b7       	in	r29, 0x3e	; 62
    438c:	8a 83       	std	Y+2, r24	; 0x02
	 u8 status  = 0x00;
    438e:	19 82       	std	Y+1, r1	; 0x01
	 switch(port)
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
    4392:	28 2f       	mov	r18, r24
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	3c 83       	std	Y+4, r19	; 0x04
    4398:	2b 83       	std	Y+3, r18	; 0x03
    439a:	8b 81       	ldd	r24, Y+3	; 0x03
    439c:	9c 81       	ldd	r25, Y+4	; 0x04
    439e:	81 30       	cpi	r24, 0x01	; 1
    43a0:	91 05       	cpc	r25, r1
    43a2:	d1 f0       	breq	.+52     	; 0x43d8 <DIO_Read_Port+0x58>
    43a4:	2b 81       	ldd	r18, Y+3	; 0x03
    43a6:	3c 81       	ldd	r19, Y+4	; 0x04
    43a8:	22 30       	cpi	r18, 0x02	; 2
    43aa:	31 05       	cpc	r19, r1
    43ac:	2c f4       	brge	.+10     	; 0x43b8 <DIO_Read_Port+0x38>
    43ae:	8b 81       	ldd	r24, Y+3	; 0x03
    43b0:	9c 81       	ldd	r25, Y+4	; 0x04
    43b2:	00 97       	sbiw	r24, 0x00	; 0
    43b4:	61 f0       	breq	.+24     	; 0x43ce <DIO_Read_Port+0x4e>
    43b6:	1e c0       	rjmp	.+60     	; 0x43f4 <DIO_Read_Port+0x74>
    43b8:	2b 81       	ldd	r18, Y+3	; 0x03
    43ba:	3c 81       	ldd	r19, Y+4	; 0x04
    43bc:	22 30       	cpi	r18, 0x02	; 2
    43be:	31 05       	cpc	r19, r1
    43c0:	81 f0       	breq	.+32     	; 0x43e2 <DIO_Read_Port+0x62>
    43c2:	8b 81       	ldd	r24, Y+3	; 0x03
    43c4:	9c 81       	ldd	r25, Y+4	; 0x04
    43c6:	83 30       	cpi	r24, 0x03	; 3
    43c8:	91 05       	cpc	r25, r1
    43ca:	81 f0       	breq	.+32     	; 0x43ec <DIO_Read_Port+0x6c>
    43cc:	13 c0       	rjmp	.+38     	; 0x43f4 <DIO_Read_Port+0x74>
	 {
		 case PORT_A :
			status = PINA ;
    43ce:	e9 e3       	ldi	r30, 0x39	; 57
    43d0:	f0 e0       	ldi	r31, 0x00	; 0
    43d2:	80 81       	ld	r24, Z
    43d4:	89 83       	std	Y+1, r24	; 0x01
    43d6:	0e c0       	rjmp	.+28     	; 0x43f4 <DIO_Read_Port+0x74>
		 break ;
		 case PORT_B :
		 	status = PINB ;
    43d8:	e6 e3       	ldi	r30, 0x36	; 54
    43da:	f0 e0       	ldi	r31, 0x00	; 0
    43dc:	80 81       	ld	r24, Z
    43de:	89 83       	std	Y+1, r24	; 0x01
    43e0:	09 c0       	rjmp	.+18     	; 0x43f4 <DIO_Read_Port+0x74>
		 break ;
		 case PORT_C :
		 	status = PINC ;
    43e2:	e3 e3       	ldi	r30, 0x33	; 51
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	89 83       	std	Y+1, r24	; 0x01
    43ea:	04 c0       	rjmp	.+8      	; 0x43f4 <DIO_Read_Port+0x74>
		 break ;
		 case PORT_D :
		 	status = PIND ;
    43ec:	e0 e3       	ldi	r30, 0x30	; 48
    43ee:	f0 e0       	ldi	r31, 0x00	; 0
    43f0:	80 81       	ld	r24, Z
    43f2:	89 83       	std	Y+1, r24	; 0x01
		 break ;
	 }
	 return status ;
    43f4:	89 81       	ldd	r24, Y+1	; 0x01
 }
    43f6:	0f 90       	pop	r0
    43f8:	0f 90       	pop	r0
    43fa:	0f 90       	pop	r0
    43fc:	0f 90       	pop	r0
    43fe:	cf 91       	pop	r28
    4400:	df 91       	pop	r29
    4402:	08 95       	ret

00004404 <DIO_Write_Port>:
 
 void DIO_Write_Port(PORT_t port , u8 volt)
 {
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	00 d0       	rcall	.+0      	; 0x440a <DIO_Write_Port+0x6>
    440a:	00 d0       	rcall	.+0      	; 0x440c <DIO_Write_Port+0x8>
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
    4410:	89 83       	std	Y+1, r24	; 0x01
    4412:	6a 83       	std	Y+2, r22	; 0x02
	 
	 switch(port)
    4414:	89 81       	ldd	r24, Y+1	; 0x01
    4416:	28 2f       	mov	r18, r24
    4418:	30 e0       	ldi	r19, 0x00	; 0
    441a:	3c 83       	std	Y+4, r19	; 0x04
    441c:	2b 83       	std	Y+3, r18	; 0x03
    441e:	8b 81       	ldd	r24, Y+3	; 0x03
    4420:	9c 81       	ldd	r25, Y+4	; 0x04
    4422:	81 30       	cpi	r24, 0x01	; 1
    4424:	91 05       	cpc	r25, r1
    4426:	d1 f0       	breq	.+52     	; 0x445c <DIO_Write_Port+0x58>
    4428:	2b 81       	ldd	r18, Y+3	; 0x03
    442a:	3c 81       	ldd	r19, Y+4	; 0x04
    442c:	22 30       	cpi	r18, 0x02	; 2
    442e:	31 05       	cpc	r19, r1
    4430:	2c f4       	brge	.+10     	; 0x443c <DIO_Write_Port+0x38>
    4432:	8b 81       	ldd	r24, Y+3	; 0x03
    4434:	9c 81       	ldd	r25, Y+4	; 0x04
    4436:	00 97       	sbiw	r24, 0x00	; 0
    4438:	61 f0       	breq	.+24     	; 0x4452 <DIO_Write_Port+0x4e>
    443a:	1e c0       	rjmp	.+60     	; 0x4478 <DIO_Write_Port+0x74>
    443c:	2b 81       	ldd	r18, Y+3	; 0x03
    443e:	3c 81       	ldd	r19, Y+4	; 0x04
    4440:	22 30       	cpi	r18, 0x02	; 2
    4442:	31 05       	cpc	r19, r1
    4444:	81 f0       	breq	.+32     	; 0x4466 <DIO_Write_Port+0x62>
    4446:	8b 81       	ldd	r24, Y+3	; 0x03
    4448:	9c 81       	ldd	r25, Y+4	; 0x04
    444a:	83 30       	cpi	r24, 0x03	; 3
    444c:	91 05       	cpc	r25, r1
    444e:	81 f0       	breq	.+32     	; 0x4470 <DIO_Write_Port+0x6c>
    4450:	13 c0       	rjmp	.+38     	; 0x4478 <DIO_Write_Port+0x74>
	 {
		 case PORT_A :
			PORTA = volt ;
    4452:	eb e3       	ldi	r30, 0x3B	; 59
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	8a 81       	ldd	r24, Y+2	; 0x02
    4458:	80 83       	st	Z, r24
    445a:	0e c0       	rjmp	.+28     	; 0x4478 <DIO_Write_Port+0x74>
			break ;
		case PORT_B :
			PORTB = volt ;
    445c:	e8 e3       	ldi	r30, 0x38	; 56
    445e:	f0 e0       	ldi	r31, 0x00	; 0
    4460:	8a 81       	ldd	r24, Y+2	; 0x02
    4462:	80 83       	st	Z, r24
    4464:	09 c0       	rjmp	.+18     	; 0x4478 <DIO_Write_Port+0x74>
			break ;
		case PORT_C :
			PORTC = volt ;
    4466:	e5 e3       	ldi	r30, 0x35	; 53
    4468:	f0 e0       	ldi	r31, 0x00	; 0
    446a:	8a 81       	ldd	r24, Y+2	; 0x02
    446c:	80 83       	st	Z, r24
    446e:	04 c0       	rjmp	.+8      	; 0x4478 <DIO_Write_Port+0x74>
			break ;
		case PORT_D :
			PORTD = volt ;
    4470:	e2 e3       	ldi	r30, 0x32	; 50
    4472:	f0 e0       	ldi	r31, 0x00	; 0
    4474:	8a 81       	ldd	r24, Y+2	; 0x02
    4476:	80 83       	st	Z, r24
			break ;	 
	 }
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	cf 91       	pop	r28
    4482:	df 91       	pop	r29
    4484:	08 95       	ret

00004486 <ADC_voidInt>:
static u8 ADC_u8ISRSource;

u8 ADC_u8BusyState = IDLE;

void ADC_voidInt(void)
{
    4486:	df 93       	push	r29
    4488:	cf 93       	push	r28
    448a:	cd b7       	in	r28, 0x3d	; 61
    448c:	de b7       	in	r29, 0x3e	; 62
	/*AVCC as refrence voltage*/
	CLEAR_BIT(ADMUX, ADMUX_REFS1);
    448e:	a7 e2       	ldi	r26, 0x27	; 39
    4490:	b0 e0       	ldi	r27, 0x00	; 0
    4492:	e7 e2       	ldi	r30, 0x27	; 39
    4494:	f0 e0       	ldi	r31, 0x00	; 0
    4496:	80 81       	ld	r24, Z
    4498:	8f 77       	andi	r24, 0x7F	; 127
    449a:	8c 93       	st	X, r24
	SET_BIT(ADMUX, ADMUX_REFS0);
    449c:	a7 e2       	ldi	r26, 0x27	; 39
    449e:	b0 e0       	ldi	r27, 0x00	; 0
    44a0:	e7 e2       	ldi	r30, 0x27	; 39
    44a2:	f0 e0       	ldi	r31, 0x00	; 0
    44a4:	80 81       	ld	r24, Z
    44a6:	80 64       	ori	r24, 0x40	; 64
    44a8:	8c 93       	st	X, r24

	/*Activate right adjust result*/
	CLEAR_BIT(ADMUX, ADMUX_ADLAR);
    44aa:	a7 e2       	ldi	r26, 0x27	; 39
    44ac:	b0 e0       	ldi	r27, 0x00	; 0
    44ae:	e7 e2       	ldi	r30, 0x27	; 39
    44b0:	f0 e0       	ldi	r31, 0x00	; 0
    44b2:	80 81       	ld	r24, Z
    44b4:	8f 7d       	andi	r24, 0xDF	; 223
    44b6:	8c 93       	st	X, r24

	/*Set prescaler to devide by 128*/
	SET_BIT(ADCSRA, ADCSRA_ADPS2);
    44b8:	a6 e2       	ldi	r26, 0x26	; 38
    44ba:	b0 e0       	ldi	r27, 0x00	; 0
    44bc:	e6 e2       	ldi	r30, 0x26	; 38
    44be:	f0 e0       	ldi	r31, 0x00	; 0
    44c0:	80 81       	ld	r24, Z
    44c2:	84 60       	ori	r24, 0x04	; 4
    44c4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS1);
    44c6:	a6 e2       	ldi	r26, 0x26	; 38
    44c8:	b0 e0       	ldi	r27, 0x00	; 0
    44ca:	e6 e2       	ldi	r30, 0x26	; 38
    44cc:	f0 e0       	ldi	r31, 0x00	; 0
    44ce:	80 81       	ld	r24, Z
    44d0:	82 60       	ori	r24, 0x02	; 2
    44d2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADCSRA_ADPS0);
    44d4:	a6 e2       	ldi	r26, 0x26	; 38
    44d6:	b0 e0       	ldi	r27, 0x00	; 0
    44d8:	e6 e2       	ldi	r30, 0x26	; 38
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	80 81       	ld	r24, Z
    44de:	81 60       	ori	r24, 0x01	; 1
    44e0:	8c 93       	st	X, r24

	/*Enable ADC peripheral*/
	SET_BIT(ADCSRA, ADCSRA_ADEN);
    44e2:	a6 e2       	ldi	r26, 0x26	; 38
    44e4:	b0 e0       	ldi	r27, 0x00	; 0
    44e6:	e6 e2       	ldi	r30, 0x26	; 38
    44e8:	f0 e0       	ldi	r31, 0x00	; 0
    44ea:	80 81       	ld	r24, Z
    44ec:	80 68       	ori	r24, 0x80	; 128
    44ee:	8c 93       	st	X, r24
}
    44f0:	cf 91       	pop	r28
    44f2:	df 91       	pop	r29
    44f4:	08 95       	ret

000044f6 <ADC_u8StartConversionSynch>:


u8 ADC_u8StartConversionSynch(u8 Copy_u8Channel, u8* copy_pu8Reading)
{
    44f6:	df 93       	push	r29
    44f8:	cf 93       	push	r28
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	28 97       	sbiw	r28, 0x08	; 8
    4500:	0f b6       	in	r0, 0x3f	; 63
    4502:	f8 94       	cli
    4504:	de bf       	out	0x3e, r29	; 62
    4506:	0f be       	out	0x3f, r0	; 63
    4508:	cd bf       	out	0x3d, r28	; 61
    450a:	8e 83       	std	Y+6, r24	; 0x06
    450c:	78 87       	std	Y+8, r23	; 0x08
    450e:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_u32Counter = 0;
    4510:	1a 82       	std	Y+2, r1	; 0x02
    4512:	1b 82       	std	Y+3, r1	; 0x03
    4514:	1c 82       	std	Y+4, r1	; 0x04
    4516:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8ErrorState = OK;
    4518:	19 82       	std	Y+1, r1	; 0x01
	if(ADC_u8BusyState == IDLE)
    451a:	80 91 68 02 	lds	r24, 0x0268
    451e:	88 23       	and	r24, r24
    4520:	09 f0       	breq	.+2      	; 0x4524 <ADC_u8StartConversionSynch+0x2e>
    4522:	5c c0       	rjmp	.+184    	; 0x45dc <ADC_u8StartConversionSynch+0xe6>
	{
		/*ADC is now busy*/
		ADC_u8BusyState = BUSY;
    4524:	81 e0       	ldi	r24, 0x01	; 1
    4526:	80 93 68 02 	sts	0x0268, r24

		/*Clear the MUX bits in MUX register*/
		ADMUX &= 0b11100000;
    452a:	a7 e2       	ldi	r26, 0x27	; 39
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	e7 e2       	ldi	r30, 0x27	; 39
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	80 7e       	andi	r24, 0xE0	; 224
    4536:	8c 93       	st	X, r24

		/*Set the required channel*/
		ADMUX |= Copy_u8Channel;
    4538:	a7 e2       	ldi	r26, 0x27	; 39
    453a:	b0 e0       	ldi	r27, 0x00	; 0
    453c:	e7 e2       	ldi	r30, 0x27	; 39
    453e:	f0 e0       	ldi	r31, 0x00	; 0
    4540:	90 81       	ld	r25, Z
    4542:	8e 81       	ldd	r24, Y+6	; 0x06
    4544:	89 2b       	or	r24, r25
    4546:	8c 93       	st	X, r24

		/*Start conversion*/
		SET_BIT(ADCSRA, ADCSRA_ADSC);
    4548:	a6 e2       	ldi	r26, 0x26	; 38
    454a:	b0 e0       	ldi	r27, 0x00	; 0
    454c:	e6 e2       	ldi	r30, 0x26	; 38
    454e:	f0 e0       	ldi	r31, 0x00	; 0
    4550:	80 81       	ld	r24, Z
    4552:	80 64       	ori	r24, 0x40	; 64
    4554:	8c 93       	st	X, r24
    4556:	0b c0       	rjmp	.+22     	; 0x456e <ADC_u8StartConversionSynch+0x78>

		/*Polling busy waiting untill the conversion complete flag is set or counter reaching timeout value*/
		while(	((READ_BIT(ADCSRA, ADCSRA_ADIF))==0) &&(Local_u32Counter != ADC_u32TIMEOUT) )
		{
			Local_u32Counter++;
    4558:	8a 81       	ldd	r24, Y+2	; 0x02
    455a:	9b 81       	ldd	r25, Y+3	; 0x03
    455c:	ac 81       	ldd	r26, Y+4	; 0x04
    455e:	bd 81       	ldd	r27, Y+5	; 0x05
    4560:	01 96       	adiw	r24, 0x01	; 1
    4562:	a1 1d       	adc	r26, r1
    4564:	b1 1d       	adc	r27, r1
    4566:	8a 83       	std	Y+2, r24	; 0x02
    4568:	9b 83       	std	Y+3, r25	; 0x03
    456a:	ac 83       	std	Y+4, r26	; 0x04
    456c:	bd 83       	std	Y+5, r27	; 0x05

		/*Start conversion*/
		SET_BIT(ADCSRA, ADCSRA_ADSC);

		/*Polling busy waiting untill the conversion complete flag is set or counter reaching timeout value*/
		while(	((READ_BIT(ADCSRA, ADCSRA_ADIF))==0) &&(Local_u32Counter != ADC_u32TIMEOUT) )
    456e:	e6 e2       	ldi	r30, 0x26	; 38
    4570:	f0 e0       	ldi	r31, 0x00	; 0
    4572:	80 81       	ld	r24, Z
    4574:	82 95       	swap	r24
    4576:	8f 70       	andi	r24, 0x0F	; 15
    4578:	88 2f       	mov	r24, r24
    457a:	90 e0       	ldi	r25, 0x00	; 0
    457c:	81 70       	andi	r24, 0x01	; 1
    457e:	90 70       	andi	r25, 0x00	; 0
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	61 f4       	brne	.+24     	; 0x459c <ADC_u8StartConversionSynch+0xa6>
    4584:	8a 81       	ldd	r24, Y+2	; 0x02
    4586:	9b 81       	ldd	r25, Y+3	; 0x03
    4588:	ac 81       	ldd	r26, Y+4	; 0x04
    458a:	bd 81       	ldd	r27, Y+5	; 0x05
    458c:	80 35       	cpi	r24, 0x50	; 80
    458e:	23 ec       	ldi	r18, 0xC3	; 195
    4590:	92 07       	cpc	r25, r18
    4592:	20 e0       	ldi	r18, 0x00	; 0
    4594:	a2 07       	cpc	r26, r18
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	b2 07       	cpc	r27, r18
    459a:	f1 f6       	brne	.-68     	; 0x4558 <ADC_u8StartConversionSynch+0x62>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter == ADC_u32TIMEOUT)
    459c:	8a 81       	ldd	r24, Y+2	; 0x02
    459e:	9b 81       	ldd	r25, Y+3	; 0x03
    45a0:	ac 81       	ldd	r26, Y+4	; 0x04
    45a2:	bd 81       	ldd	r27, Y+5	; 0x05
    45a4:	80 35       	cpi	r24, 0x50	; 80
    45a6:	23 ec       	ldi	r18, 0xC3	; 195
    45a8:	92 07       	cpc	r25, r18
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	a2 07       	cpc	r26, r18
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	b2 07       	cpc	r27, r18
    45b2:	19 f4       	brne	.+6      	; 0x45ba <ADC_u8StartConversionSynch+0xc4>
		{
			/*loop is broken because timeout is reached*/
			Local_u8ErrorState = NOK;
    45b4:	81 e0       	ldi	r24, 0x01	; 1
    45b6:	89 83       	std	Y+1, r24	; 0x01
    45b8:	13 c0       	rjmp	.+38     	; 0x45e0 <ADC_u8StartConversionSynch+0xea>
		else
		{
			/*loop is broken because FLAG is raised*/

			/*Clear the conversion complete flag by setting it*/
			SET_BIT(ADCSRA, ADCSRA_ADIF);
    45ba:	a6 e2       	ldi	r26, 0x26	; 38
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	e6 e2       	ldi	r30, 0x26	; 38
    45c0:	f0 e0       	ldi	r31, 0x00	; 0
    45c2:	80 81       	ld	r24, Z
    45c4:	80 61       	ori	r24, 0x10	; 16
    45c6:	8c 93       	st	X, r24

			/*Return the reading*/
			*copy_pu8Reading = ADC;
    45c8:	e4 e2       	ldi	r30, 0x24	; 36
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	80 81       	ld	r24, Z
    45ce:	91 81       	ldd	r25, Z+1	; 0x01
    45d0:	ef 81       	ldd	r30, Y+7	; 0x07
    45d2:	f8 85       	ldd	r31, Y+8	; 0x08
    45d4:	80 83       	st	Z, r24

			/*ADC is finished, return it to idle*/
			ADC_u8BusyState = IDLE;
    45d6:	10 92 68 02 	sts	0x0268, r1
    45da:	02 c0       	rjmp	.+4      	; 0x45e0 <ADC_u8StartConversionSynch+0xea>
		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
    45dc:	83 e0       	ldi	r24, 0x03	; 3
    45de:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    45e0:	89 81       	ldd	r24, Y+1	; 0x01

}
    45e2:	28 96       	adiw	r28, 0x08	; 8
    45e4:	0f b6       	in	r0, 0x3f	; 63
    45e6:	f8 94       	cli
    45e8:	de bf       	out	0x3e, r29	; 62
    45ea:	0f be       	out	0x3f, r0	; 63
    45ec:	cd bf       	out	0x3d, r28	; 61
    45ee:	cf 91       	pop	r28
    45f0:	df 91       	pop	r29
    45f2:	08 95       	ret

000045f4 <ADC_u8StartConversionAsynch>:

u8 ADC_u8StartConversionAsynch(u8 Copy_u8Channel, u16* copy_pu8Reading, void(*Copy_pvNotificationFunc)(void))
{
    45f4:	df 93       	push	r29
    45f6:	cf 93       	push	r28
    45f8:	00 d0       	rcall	.+0      	; 0x45fa <ADC_u8StartConversionAsynch+0x6>
    45fa:	00 d0       	rcall	.+0      	; 0x45fc <ADC_u8StartConversionAsynch+0x8>
    45fc:	00 d0       	rcall	.+0      	; 0x45fe <ADC_u8StartConversionAsynch+0xa>
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
    4602:	8a 83       	std	Y+2, r24	; 0x02
    4604:	7c 83       	std	Y+4, r23	; 0x04
    4606:	6b 83       	std	Y+3, r22	; 0x03
    4608:	5e 83       	std	Y+6, r21	; 0x06
    460a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = OK;
    460c:	19 82       	std	Y+1, r1	; 0x01

	if(ADC_u8BusyState == IDLE)
    460e:	80 91 68 02 	lds	r24, 0x0268
    4612:	88 23       	and	r24, r24
    4614:	d1 f5       	brne	.+116    	; 0x468a <ADC_u8StartConversionAsynch+0x96>
	{
		if(	(copy_pu8Reading == NULL) || (Copy_pvNotificationFunc == NULL) )
    4616:	8b 81       	ldd	r24, Y+3	; 0x03
    4618:	9c 81       	ldd	r25, Y+4	; 0x04
    461a:	00 97       	sbiw	r24, 0x00	; 0
    461c:	21 f0       	breq	.+8      	; 0x4626 <ADC_u8StartConversionAsynch+0x32>
    461e:	8d 81       	ldd	r24, Y+5	; 0x05
    4620:	9e 81       	ldd	r25, Y+6	; 0x06
    4622:	00 97       	sbiw	r24, 0x00	; 0
    4624:	19 f4       	brne	.+6      	; 0x462c <ADC_u8StartConversionAsynch+0x38>
		{
			Local_u8ErrorState = NULL_POINTER;
    4626:	82 e0       	ldi	r24, 0x02	; 2
    4628:	89 83       	std	Y+1, r24	; 0x01
    462a:	31 c0       	rjmp	.+98     	; 0x468e <ADC_u8StartConversionAsynch+0x9a>
		}
		else
		{
			/*make ADC busy in order not to work until being idle*/
			ADC_u8BusyState = BUSY;
    462c:	81 e0       	ldi	r24, 0x01	; 1
    462e:	80 93 68 02 	sts	0x0268, r24

			/*Make ISR source: Single Channel Asynchronous*/
			ADC_u8ISRSource = SINGLE_CHANNEL_ASYNCH;
    4632:	10 92 6a 02 	sts	0x026A, r1

			/*Copy local pointers to the global pointers*/
			ADC_pu8Reading = copy_pu8Reading;
    4636:	8b 81       	ldd	r24, Y+3	; 0x03
    4638:	9c 81       	ldd	r25, Y+4	; 0x04
    463a:	90 93 60 02 	sts	0x0260, r25
    463e:	80 93 5f 02 	sts	0x025F, r24

			ADC_pvCallBackNotificationFunc = Copy_pvNotificationFunc;
    4642:	8d 81       	ldd	r24, Y+5	; 0x05
    4644:	9e 81       	ldd	r25, Y+6	; 0x06
    4646:	90 93 62 02 	sts	0x0262, r25
    464a:	80 93 61 02 	sts	0x0261, r24

			/*Clear the MUX bits in MUX register*/
			ADMUX &= 0b11100000;
    464e:	a7 e2       	ldi	r26, 0x27	; 39
    4650:	b0 e0       	ldi	r27, 0x00	; 0
    4652:	e7 e2       	ldi	r30, 0x27	; 39
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	80 81       	ld	r24, Z
    4658:	80 7e       	andi	r24, 0xE0	; 224
    465a:	8c 93       	st	X, r24

			/*Set the required channel*/
			ADMUX |= Copy_u8Channel;
    465c:	a7 e2       	ldi	r26, 0x27	; 39
    465e:	b0 e0       	ldi	r27, 0x00	; 0
    4660:	e7 e2       	ldi	r30, 0x27	; 39
    4662:	f0 e0       	ldi	r31, 0x00	; 0
    4664:	90 81       	ld	r25, Z
    4666:	8a 81       	ldd	r24, Y+2	; 0x02
    4668:	89 2b       	or	r24, r25
    466a:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    466c:	a6 e2       	ldi	r26, 0x26	; 38
    466e:	b0 e0       	ldi	r27, 0x00	; 0
    4670:	e6 e2       	ldi	r30, 0x26	; 38
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	80 81       	ld	r24, Z
    4676:	80 64       	ori	r24, 0x40	; 64
    4678:	8c 93       	st	X, r24

			/*ADC interrupt enable*/
			SET_BIT(ADCSRA , ADCSRA_ADIE);
    467a:	a6 e2       	ldi	r26, 0x26	; 38
    467c:	b0 e0       	ldi	r27, 0x00	; 0
    467e:	e6 e2       	ldi	r30, 0x26	; 38
    4680:	f0 e0       	ldi	r31, 0x00	; 0
    4682:	80 81       	ld	r24, Z
    4684:	88 60       	ori	r24, 0x08	; 8
    4686:	8c 93       	st	X, r24
    4688:	02 c0       	rjmp	.+4      	; 0x468e <ADC_u8StartConversionAsynch+0x9a>

		}
	}
	else
	{
		Local_u8ErrorState = BUSY_FUNC;
    468a:	83 e0       	ldi	r24, 0x03	; 3
    468c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState;
    468e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4690:	26 96       	adiw	r28, 0x06	; 6
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	de bf       	out	0x3e, r29	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	cd bf       	out	0x3d, r28	; 61
    469c:	cf 91       	pop	r28
    469e:	df 91       	pop	r29
    46a0:	08 95       	ret

000046a2 <ADC_u8StartChainAsynch>:

u8 ADC_u8StartChainAsynch(Chain_t * Copy_Chain)
{
    46a2:	df 93       	push	r29
    46a4:	cf 93       	push	r28
    46a6:	00 d0       	rcall	.+0      	; 0x46a8 <ADC_u8StartChainAsynch+0x6>
    46a8:	0f 92       	push	r0
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
    46ae:	9b 83       	std	Y+3, r25	; 0x03
    46b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
    46b2:	19 82       	std	Y+1, r1	; 0x01
	/*Check NULL pointer*/
	if(Copy_Chain == NULL)
    46b4:	8a 81       	ldd	r24, Y+2	; 0x02
    46b6:	9b 81       	ldd	r25, Y+3	; 0x03
    46b8:	00 97       	sbiw	r24, 0x00	; 0
    46ba:	19 f4       	brne	.+6      	; 0x46c2 <ADC_u8StartChainAsynch+0x20>
	{
		Local_u8ErrorState = NULL_POINTER;
    46bc:	82 e0       	ldi	r24, 0x02	; 2
    46be:	89 83       	std	Y+1, r24	; 0x01
    46c0:	55 c0       	rjmp	.+170    	; 0x476c <ADC_u8StartChainAsynch+0xca>
	}
	else
	{
		/*Check if the ADC is IDLE*/
		if(ADC_u8BusyState == IDLE)
    46c2:	80 91 68 02 	lds	r24, 0x0268
    46c6:	88 23       	and	r24, r24
    46c8:	09 f0       	breq	.+2      	; 0x46cc <ADC_u8StartChainAsynch+0x2a>
    46ca:	4e c0       	rjmp	.+156    	; 0x4768 <ADC_u8StartChainAsynch+0xc6>
		{
			/*Make ADC bust*/
			ADC_u8BusyState = BUSY;
    46cc:	81 e0       	ldi	r24, 0x01	; 1
    46ce:	80 93 68 02 	sts	0x0268, r24

			/*Make ISR source: Chain Asynchronous*/
			ADC_u8ISRSource = CHAIN_ASYNCH;
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	80 93 6a 02 	sts	0x026A, r24

			/*Intialize chain channel array*/
			ADC_pu8ChainChannelArr = Copy_Chain->Channel;
    46d8:	ea 81       	ldd	r30, Y+2	; 0x02
    46da:	fb 81       	ldd	r31, Y+3	; 0x03
    46dc:	80 81       	ld	r24, Z
    46de:	91 81       	ldd	r25, Z+1	; 0x01
    46e0:	90 93 64 02 	sts	0x0264, r25
    46e4:	80 93 63 02 	sts	0x0263, r24

			/*Intialize chain size*/
			ADC_u8ChainSize = Copy_Chain->Size;
    46e8:	ea 81       	ldd	r30, Y+2	; 0x02
    46ea:	fb 81       	ldd	r31, Y+3	; 0x03
    46ec:	84 81       	ldd	r24, Z+4	; 0x04
    46ee:	80 93 69 02 	sts	0x0269, r24

			/*Intialize chain result array*/
			ADC_pu16ChainResultArr = Copy_Chain->Result;
    46f2:	ea 81       	ldd	r30, Y+2	; 0x02
    46f4:	fb 81       	ldd	r31, Y+3	; 0x03
    46f6:	82 81       	ldd	r24, Z+2	; 0x02
    46f8:	93 81       	ldd	r25, Z+3	; 0x03
    46fa:	90 93 66 02 	sts	0x0266, r25
    46fe:	80 93 65 02 	sts	0x0265, r24

			/*Intialize Notification function*/
			ADC_pvCallBackNotificationFunc = Copy_Chain->NotifcationFunc;
    4702:	ea 81       	ldd	r30, Y+2	; 0x02
    4704:	fb 81       	ldd	r31, Y+3	; 0x03
    4706:	85 81       	ldd	r24, Z+5	; 0x05
    4708:	96 81       	ldd	r25, Z+6	; 0x06
    470a:	90 93 62 02 	sts	0x0262, r25
    470e:	80 93 61 02 	sts	0x0261, r24

			/*Intialize current convrsion index*/
			ADC_u8ChainConversionIndex = 0;
    4712:	10 92 67 02 	sts	0x0267, r1

			/*Set required channel(first channel)*/
			ADMUX &= 0b11100000;
    4716:	a7 e2       	ldi	r26, 0x27	; 39
    4718:	b0 e0       	ldi	r27, 0x00	; 0
    471a:	e7 e2       	ldi	r30, 0x27	; 39
    471c:	f0 e0       	ldi	r31, 0x00	; 0
    471e:	80 81       	ld	r24, Z
    4720:	80 7e       	andi	r24, 0xE0	; 224
    4722:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    4724:	a7 e2       	ldi	r26, 0x27	; 39
    4726:	b0 e0       	ldi	r27, 0x00	; 0
    4728:	e7 e2       	ldi	r30, 0x27	; 39
    472a:	f0 e0       	ldi	r31, 0x00	; 0
    472c:	40 81       	ld	r20, Z
    472e:	20 91 63 02 	lds	r18, 0x0263
    4732:	30 91 64 02 	lds	r19, 0x0264
    4736:	80 91 67 02 	lds	r24, 0x0267
    473a:	88 2f       	mov	r24, r24
    473c:	90 e0       	ldi	r25, 0x00	; 0
    473e:	f9 01       	movw	r30, r18
    4740:	e8 0f       	add	r30, r24
    4742:	f9 1f       	adc	r31, r25
    4744:	80 81       	ld	r24, Z
    4746:	84 2b       	or	r24, r20
    4748:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    474a:	a6 e2       	ldi	r26, 0x26	; 38
    474c:	b0 e0       	ldi	r27, 0x00	; 0
    474e:	e6 e2       	ldi	r30, 0x26	; 38
    4750:	f0 e0       	ldi	r31, 0x00	; 0
    4752:	80 81       	ld	r24, Z
    4754:	80 64       	ori	r24, 0x40	; 64
    4756:	8c 93       	st	X, r24

			/*Enable conversion complete interrupt*/
			SET_BIT(ADCSRA , ADCSRA_ADIE);
    4758:	a6 e2       	ldi	r26, 0x26	; 38
    475a:	b0 e0       	ldi	r27, 0x00	; 0
    475c:	e6 e2       	ldi	r30, 0x26	; 38
    475e:	f0 e0       	ldi	r31, 0x00	; 0
    4760:	80 81       	ld	r24, Z
    4762:	88 60       	ori	r24, 0x08	; 8
    4764:	8c 93       	st	X, r24
    4766:	02 c0       	rjmp	.+4      	; 0x476c <ADC_u8StartChainAsynch+0xca>
		}
		else
		{
			Local_u8ErrorState = BUSY_FUNC;
    4768:	83 e0       	ldi	r24, 0x03	; 3
    476a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8ErrorState;
    476c:	89 81       	ldd	r24, Y+1	; 0x01
}
    476e:	0f 90       	pop	r0
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	cf 91       	pop	r28
    4776:	df 91       	pop	r29
    4778:	08 95       	ret

0000477a <__vector_16>:

void __vector_16 (void)	__attribute__((signal));
void __vector_16 (void)
{
    477a:	1f 92       	push	r1
    477c:	0f 92       	push	r0
    477e:	0f b6       	in	r0, 0x3f	; 63
    4780:	0f 92       	push	r0
    4782:	11 24       	eor	r1, r1
    4784:	2f 93       	push	r18
    4786:	3f 93       	push	r19
    4788:	4f 93       	push	r20
    478a:	5f 93       	push	r21
    478c:	6f 93       	push	r22
    478e:	7f 93       	push	r23
    4790:	8f 93       	push	r24
    4792:	9f 93       	push	r25
    4794:	af 93       	push	r26
    4796:	bf 93       	push	r27
    4798:	ef 93       	push	r30
    479a:	ff 93       	push	r31
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	cd b7       	in	r28, 0x3d	; 61
    47a2:	de b7       	in	r29, 0x3e	; 62
	if(ADC_u8ISRSource == SINGLE_CHANNEL_ASYNCH)
    47a4:	80 91 6a 02 	lds	r24, 0x026A
    47a8:	88 23       	and	r24, r24
    47aa:	c9 f4       	brne	.+50     	; 0x47de <__vector_16+0x64>
	{
		/*Read ADC result*/
		*ADC_pu8Reading = ADC;
    47ac:	a0 91 5f 02 	lds	r26, 0x025F
    47b0:	b0 91 60 02 	lds	r27, 0x0260
    47b4:	e4 e2       	ldi	r30, 0x24	; 36
    47b6:	f0 e0       	ldi	r31, 0x00	; 0
    47b8:	80 81       	ld	r24, Z
    47ba:	91 81       	ldd	r25, Z+1	; 0x01
    47bc:	8d 93       	st	X+, r24
    47be:	9c 93       	st	X, r25

		/*make ADC state idle because it finished*/
		ADC_u8BusyState = IDLE;
    47c0:	10 92 68 02 	sts	0x0268, r1

		/*Invoke the callBack notification function*/
		ADC_pvCallBackNotificationFunc();
    47c4:	e0 91 61 02 	lds	r30, 0x0261
    47c8:	f0 91 62 02 	lds	r31, 0x0262
    47cc:	09 95       	icall

		/*Disable ADC conversion complete interrupt*/
		CLEAR_BIT(ADCSRA , ADCSRA_ADIE);
    47ce:	a6 e2       	ldi	r26, 0x26	; 38
    47d0:	b0 e0       	ldi	r27, 0x00	; 0
    47d2:	e6 e2       	ldi	r30, 0x26	; 38
    47d4:	f0 e0       	ldi	r31, 0x00	; 0
    47d6:	80 81       	ld	r24, Z
    47d8:	87 7f       	andi	r24, 0xF7	; 247
    47da:	8c 93       	st	X, r24
    47dc:	55 c0       	rjmp	.+170    	; 0x4888 <__vector_16+0x10e>
	}
	else if(ADC_u8ISRSource == CHAIN_ASYNCH)
    47de:	80 91 6a 02 	lds	r24, 0x026A
    47e2:	81 30       	cpi	r24, 0x01	; 1
    47e4:	09 f0       	breq	.+2      	; 0x47e8 <__vector_16+0x6e>
    47e6:	50 c0       	rjmp	.+160    	; 0x4888 <__vector_16+0x10e>
	{
		/*Read current conversion*/
		ADC_pu16ChainResultArr[ADC_u8ChainConversionIndex] = ADCH;
    47e8:	20 91 65 02 	lds	r18, 0x0265
    47ec:	30 91 66 02 	lds	r19, 0x0266
    47f0:	80 91 67 02 	lds	r24, 0x0267
    47f4:	88 2f       	mov	r24, r24
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	88 0f       	add	r24, r24
    47fa:	99 1f       	adc	r25, r25
    47fc:	d9 01       	movw	r26, r18
    47fe:	a8 0f       	add	r26, r24
    4800:	b9 1f       	adc	r27, r25
    4802:	e5 e2       	ldi	r30, 0x25	; 37
    4804:	f0 e0       	ldi	r31, 0x00	; 0
    4806:	80 81       	ld	r24, Z
    4808:	88 2f       	mov	r24, r24
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	11 96       	adiw	r26, 0x01	; 1
    480e:	9c 93       	st	X, r25
    4810:	8e 93       	st	-X, r24

		/*Increment chain index*/
		ADC_u8ChainConversionIndex++;
    4812:	80 91 67 02 	lds	r24, 0x0267
    4816:	8f 5f       	subi	r24, 0xFF	; 255
    4818:	80 93 67 02 	sts	0x0267, r24

		/*Check chain is finished or not*/
		if(ADC_u8ChainConversionIndex == ADC_u8ChainSize)
    481c:	90 91 67 02 	lds	r25, 0x0267
    4820:	80 91 69 02 	lds	r24, 0x0269
    4824:	98 17       	cp	r25, r24
    4826:	79 f4       	brne	.+30     	; 0x4846 <__vector_16+0xcc>
		{
			/*Chain conversion is finished*/

			/*ADC is mow IDLE*/
			ADC_u8BusyState = IDLE;
    4828:	10 92 68 02 	sts	0x0268, r1

			/*Invoke the callback notification function*/
			ADC_pvCallBackNotificationFunc();
    482c:	e0 91 61 02 	lds	r30, 0x0261
    4830:	f0 91 62 02 	lds	r31, 0x0262
    4834:	09 95       	icall

			/*Disable ADC conversion complete interrupt*/
			CLEAR_BIT(ADCSRA , ADCSRA_ADIE);
    4836:	a6 e2       	ldi	r26, 0x26	; 38
    4838:	b0 e0       	ldi	r27, 0x00	; 0
    483a:	e6 e2       	ldi	r30, 0x26	; 38
    483c:	f0 e0       	ldi	r31, 0x00	; 0
    483e:	80 81       	ld	r24, Z
    4840:	87 7f       	andi	r24, 0xF7	; 247
    4842:	8c 93       	st	X, r24
    4844:	21 c0       	rjmp	.+66     	; 0x4888 <__vector_16+0x10e>
		else
		{
			/*Chain is not finished*/

			/*Set new required channel*/
			ADMUX &= 0b11100000;
    4846:	a7 e2       	ldi	r26, 0x27	; 39
    4848:	b0 e0       	ldi	r27, 0x00	; 0
    484a:	e7 e2       	ldi	r30, 0x27	; 39
    484c:	f0 e0       	ldi	r31, 0x00	; 0
    484e:	80 81       	ld	r24, Z
    4850:	80 7e       	andi	r24, 0xE0	; 224
    4852:	8c 93       	st	X, r24

			/*Set next required channel*/
			ADMUX |= ADC_pu8ChainChannelArr[ADC_u8ChainConversionIndex];
    4854:	a7 e2       	ldi	r26, 0x27	; 39
    4856:	b0 e0       	ldi	r27, 0x00	; 0
    4858:	e7 e2       	ldi	r30, 0x27	; 39
    485a:	f0 e0       	ldi	r31, 0x00	; 0
    485c:	40 81       	ld	r20, Z
    485e:	20 91 63 02 	lds	r18, 0x0263
    4862:	30 91 64 02 	lds	r19, 0x0264
    4866:	80 91 67 02 	lds	r24, 0x0267
    486a:	88 2f       	mov	r24, r24
    486c:	90 e0       	ldi	r25, 0x00	; 0
    486e:	f9 01       	movw	r30, r18
    4870:	e8 0f       	add	r30, r24
    4872:	f9 1f       	adc	r31, r25
    4874:	80 81       	ld	r24, Z
    4876:	84 2b       	or	r24, r20
    4878:	8c 93       	st	X, r24

			/*Start conversion*/
			SET_BIT(ADCSRA, ADCSRA_ADSC);
    487a:	a6 e2       	ldi	r26, 0x26	; 38
    487c:	b0 e0       	ldi	r27, 0x00	; 0
    487e:	e6 e2       	ldi	r30, 0x26	; 38
    4880:	f0 e0       	ldi	r31, 0x00	; 0
    4882:	80 81       	ld	r24, Z
    4884:	80 64       	ori	r24, 0x40	; 64
    4886:	8c 93       	st	X, r24

		}
	}
}
    4888:	cf 91       	pop	r28
    488a:	df 91       	pop	r29
    488c:	ff 91       	pop	r31
    488e:	ef 91       	pop	r30
    4890:	bf 91       	pop	r27
    4892:	af 91       	pop	r26
    4894:	9f 91       	pop	r25
    4896:	8f 91       	pop	r24
    4898:	7f 91       	pop	r23
    489a:	6f 91       	pop	r22
    489c:	5f 91       	pop	r21
    489e:	4f 91       	pop	r20
    48a0:	3f 91       	pop	r19
    48a2:	2f 91       	pop	r18
    48a4:	0f 90       	pop	r0
    48a6:	0f be       	out	0x3f, r0	; 63
    48a8:	0f 90       	pop	r0
    48aa:	1f 90       	pop	r1
    48ac:	18 95       	reti

000048ae <RELAY_Init>:
#include "RELAY_interface.h"


void RELAY_Init(RELAY_Type_t relay)
{
    48ae:	df 93       	push	r29
    48b0:	cf 93       	push	r28
    48b2:	0f 92       	push	r0
    48b4:	cd b7       	in	r28, 0x3d	; 61
    48b6:	de b7       	in	r29, 0x3e	; 62
    48b8:	89 83       	std	Y+1, r24	; 0x01
	if (relay == RELAY_ONE)
    48ba:	89 81       	ldd	r24, Y+1	; 0x01
    48bc:	81 30       	cpi	r24, 0x01	; 1
    48be:	31 f4       	brne	.+12     	; 0x48cc <RELAY_Init+0x1e>
	{
		DIO_Set_Pin_Direction(RELAY_1_PORT,RELAY_1_PIN , OUTPUT);
    48c0:	82 e0       	ldi	r24, 0x02	; 2
    48c2:	67 e0       	ldi	r22, 0x07	; 7
    48c4:	40 e0       	ldi	r20, 0x00	; 0
    48c6:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
    48ca:	08 c0       	rjmp	.+16     	; 0x48dc <RELAY_Init+0x2e>
	}
	else if (relay == RELAY_TWO)
    48cc:	89 81       	ldd	r24, Y+1	; 0x01
    48ce:	82 30       	cpi	r24, 0x02	; 2
    48d0:	29 f4       	brne	.+10     	; 0x48dc <RELAY_Init+0x2e>
	{
		DIO_Set_Pin_Direction(RELAY_2_PORT,RELAY_2_PIN , OUTPUT);
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	67 e0       	ldi	r22, 0x07	; 7
    48d6:	40 e0       	ldi	r20, 0x00	; 0
    48d8:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	}
	else
	{
		
	}
}
    48dc:	0f 90       	pop	r0
    48de:	cf 91       	pop	r28
    48e0:	df 91       	pop	r29
    48e2:	08 95       	ret

000048e4 <RELAY_ON>:
void RELAY_ON(RELAY_Type_t relay)
{
    48e4:	df 93       	push	r29
    48e6:	cf 93       	push	r28
    48e8:	0f 92       	push	r0
    48ea:	cd b7       	in	r28, 0x3d	; 61
    48ec:	de b7       	in	r29, 0x3e	; 62
    48ee:	89 83       	std	Y+1, r24	; 0x01
	if (relay == RELAY_ONE)
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	81 30       	cpi	r24, 0x01	; 1
    48f4:	31 f4       	brne	.+12     	; 0x4902 <RELAY_ON+0x1e>
	{
		DIO_Write_Pin(RELAY_1_PORT,RELAY_1_PIN , HIGH);
    48f6:	82 e0       	ldi	r24, 0x02	; 2
    48f8:	67 e0       	ldi	r22, 0x07	; 7
    48fa:	41 e0       	ldi	r20, 0x01	; 1
    48fc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4900:	08 c0       	rjmp	.+16     	; 0x4912 <RELAY_ON+0x2e>
	}
	else if (relay == RELAY_TWO)
    4902:	89 81       	ldd	r24, Y+1	; 0x01
    4904:	82 30       	cpi	r24, 0x02	; 2
    4906:	29 f4       	brne	.+10     	; 0x4912 <RELAY_ON+0x2e>
	{
		DIO_Write_Pin(RELAY_2_PORT,RELAY_2_PIN , HIGH);
    4908:	80 e0       	ldi	r24, 0x00	; 0
    490a:	67 e0       	ldi	r22, 0x07	; 7
    490c:	41 e0       	ldi	r20, 0x01	; 1
    490e:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	}
	else
	{
		
	}
}
    4912:	0f 90       	pop	r0
    4914:	cf 91       	pop	r28
    4916:	df 91       	pop	r29
    4918:	08 95       	ret

0000491a <RELAY_OFF>:
void RELAY_OFF(RELAY_Type_t relay)
{
    491a:	df 93       	push	r29
    491c:	cf 93       	push	r28
    491e:	0f 92       	push	r0
    4920:	cd b7       	in	r28, 0x3d	; 61
    4922:	de b7       	in	r29, 0x3e	; 62
    4924:	89 83       	std	Y+1, r24	; 0x01
	if (relay == RELAY_ONE)
    4926:	89 81       	ldd	r24, Y+1	; 0x01
    4928:	81 30       	cpi	r24, 0x01	; 1
    492a:	31 f4       	brne	.+12     	; 0x4938 <RELAY_OFF+0x1e>
	{
		DIO_Write_Pin(RELAY_1_PORT,RELAY_1_PIN , LOW);
    492c:	82 e0       	ldi	r24, 0x02	; 2
    492e:	67 e0       	ldi	r22, 0x07	; 7
    4930:	40 e0       	ldi	r20, 0x00	; 0
    4932:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4936:	08 c0       	rjmp	.+16     	; 0x4948 <RELAY_OFF+0x2e>
	}
	else if (relay == RELAY_TWO)
    4938:	89 81       	ldd	r24, Y+1	; 0x01
    493a:	82 30       	cpi	r24, 0x02	; 2
    493c:	29 f4       	brne	.+10     	; 0x4948 <RELAY_OFF+0x2e>
	{
		DIO_Write_Pin(RELAY_2_PORT,RELAY_2_PIN , LOW);
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	67 e0       	ldi	r22, 0x07	; 7
    4942:	40 e0       	ldi	r20, 0x00	; 0
    4944:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	else
	{
		
	}

}
    4948:	0f 90       	pop	r0
    494a:	cf 91       	pop	r28
    494c:	df 91       	pop	r29
    494e:	08 95       	ret

00004950 <RELAY_Control>:
void RELAY_Control(RELAY_Type_t relay , RELAY_status_t  status)
{
    4950:	df 93       	push	r29
    4952:	cf 93       	push	r28
    4954:	00 d0       	rcall	.+0      	; 0x4956 <RELAY_Control+0x6>
    4956:	cd b7       	in	r28, 0x3d	; 61
    4958:	de b7       	in	r29, 0x3e	; 62
    495a:	89 83       	std	Y+1, r24	; 0x01
    495c:	6a 83       	std	Y+2, r22	; 0x02
	if(status == OFF)
    495e:	8a 81       	ldd	r24, Y+2	; 0x02
    4960:	88 23       	and	r24, r24
    4962:	21 f4       	brne	.+8      	; 0x496c <RELAY_Control+0x1c>
	{
		RELAY_OFF(relay);
    4964:	89 81       	ldd	r24, Y+1	; 0x01
    4966:	0e 94 8d 24 	call	0x491a	; 0x491a <RELAY_OFF>
    496a:	06 c0       	rjmp	.+12     	; 0x4978 <RELAY_Control+0x28>
	}
	else if ( status == ON)
    496c:	8a 81       	ldd	r24, Y+2	; 0x02
    496e:	81 30       	cpi	r24, 0x01	; 1
    4970:	19 f4       	brne	.+6      	; 0x4978 <RELAY_Control+0x28>
	{
		RELAY_ON(relay);
    4972:	89 81       	ldd	r24, Y+1	; 0x01
    4974:	0e 94 72 24 	call	0x48e4	; 0x48e4 <RELAY_ON>
	}
	else
	{
		
	}
}
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	cf 91       	pop	r28
    497e:	df 91       	pop	r29
    4980:	08 95       	ret

00004982 <Button_Init>:
#include "PushButton_interface.h"
#include "PushButton_private.h"


void Button_Init(void)
{
    4982:	df 93       	push	r29
    4984:	cf 93       	push	r28
    4986:	cd b7       	in	r28, 0x3d	; 61
    4988:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_D, PIN7, INPULLUP);
    498a:	83 e0       	ldi	r24, 0x03	; 3
    498c:	67 e0       	ldi	r22, 0x07	; 7
    498e:	42 e0       	ldi	r20, 0x02	; 2
    4990:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_D, PIN6, INPULLUP);
    4994:	83 e0       	ldi	r24, 0x03	; 3
    4996:	66 e0       	ldi	r22, 0x06	; 6
    4998:	42 e0       	ldi	r20, 0x02	; 2
    499a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_D, PIN5, INPULLUP);
    499e:	83 e0       	ldi	r24, 0x03	; 3
    49a0:	65 e0       	ldi	r22, 0x05	; 5
    49a2:	42 e0       	ldi	r20, 0x02	; 2
    49a4:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(PORT_D, PIN3, INPULLUP);
    49a8:	83 e0       	ldi	r24, 0x03	; 3
    49aa:	63 e0       	ldi	r22, 0x03	; 3
    49ac:	42 e0       	ldi	r20, 0x02	; 2
    49ae:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
}
    49b2:	cf 91       	pop	r28
    49b4:	df 91       	pop	r29
    49b6:	08 95       	ret

000049b8 <Get_ButtonStatus>:



BUTTON_Status_t Get_ButtonStatus(BUTTON_Type_t button)
{
    49b8:	df 93       	push	r29
    49ba:	cf 93       	push	r28
    49bc:	00 d0       	rcall	.+0      	; 0x49be <Get_ButtonStatus+0x6>
    49be:	00 d0       	rcall	.+0      	; 0x49c0 <Get_ButtonStatus+0x8>
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
    49c4:	8a 83       	std	Y+2, r24	; 0x02
	BUTTON_Status_t ButtonStatus ;

	switch(button){
    49c6:	8a 81       	ldd	r24, Y+2	; 0x02
    49c8:	28 2f       	mov	r18, r24
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	3c 83       	std	Y+4, r19	; 0x04
    49ce:	2b 83       	std	Y+3, r18	; 0x03
    49d0:	8b 81       	ldd	r24, Y+3	; 0x03
    49d2:	9c 81       	ldd	r25, Y+4	; 0x04
    49d4:	81 30       	cpi	r24, 0x01	; 1
    49d6:	91 05       	cpc	r25, r1
    49d8:	d9 f0       	breq	.+54     	; 0x4a10 <Get_ButtonStatus+0x58>
    49da:	2b 81       	ldd	r18, Y+3	; 0x03
    49dc:	3c 81       	ldd	r19, Y+4	; 0x04
    49de:	22 30       	cpi	r18, 0x02	; 2
    49e0:	31 05       	cpc	r19, r1
    49e2:	2c f4       	brge	.+10     	; 0x49ee <Get_ButtonStatus+0x36>
    49e4:	8b 81       	ldd	r24, Y+3	; 0x03
    49e6:	9c 81       	ldd	r25, Y+4	; 0x04
    49e8:	00 97       	sbiw	r24, 0x00	; 0
    49ea:	61 f0       	breq	.+24     	; 0x4a04 <Get_ButtonStatus+0x4c>
    49ec:	22 c0       	rjmp	.+68     	; 0x4a32 <Get_ButtonStatus+0x7a>
    49ee:	2b 81       	ldd	r18, Y+3	; 0x03
    49f0:	3c 81       	ldd	r19, Y+4	; 0x04
    49f2:	22 30       	cpi	r18, 0x02	; 2
    49f4:	31 05       	cpc	r19, r1
    49f6:	91 f0       	breq	.+36     	; 0x4a1c <Get_ButtonStatus+0x64>
    49f8:	8b 81       	ldd	r24, Y+3	; 0x03
    49fa:	9c 81       	ldd	r25, Y+4	; 0x04
    49fc:	83 30       	cpi	r24, 0x03	; 3
    49fe:	91 05       	cpc	r25, r1
    4a00:	99 f0       	breq	.+38     	; 0x4a28 <Get_ButtonStatus+0x70>
    4a02:	17 c0       	rjmp	.+46     	; 0x4a32 <Get_ButtonStatus+0x7a>
		case BUTTON_1: ButtonStatus = DIO_Read_Pin(BUTTON_1_PORT , BUTTON_1_PIN); break;
    4a04:	83 e0       	ldi	r24, 0x03	; 3
    4a06:	67 e0       	ldi	r22, 0x07	; 7
    4a08:	0e 94 a7 20 	call	0x414e	; 0x414e <DIO_Read_Pin>
    4a0c:	89 83       	std	Y+1, r24	; 0x01
    4a0e:	11 c0       	rjmp	.+34     	; 0x4a32 <Get_ButtonStatus+0x7a>
		case BUTTON_2: ButtonStatus = DIO_Read_Pin(BUTTON_2_PORT , BUTTON_2_PIN); break;
    4a10:	83 e0       	ldi	r24, 0x03	; 3
    4a12:	66 e0       	ldi	r22, 0x06	; 6
    4a14:	0e 94 a7 20 	call	0x414e	; 0x414e <DIO_Read_Pin>
    4a18:	89 83       	std	Y+1, r24	; 0x01
    4a1a:	0b c0       	rjmp	.+22     	; 0x4a32 <Get_ButtonStatus+0x7a>
		case BUTTON_3: ButtonStatus = DIO_Read_Pin(BUTTON_3_PORT , BUTTON_3_PIN); break;
    4a1c:	83 e0       	ldi	r24, 0x03	; 3
    4a1e:	65 e0       	ldi	r22, 0x05	; 5
    4a20:	0e 94 a7 20 	call	0x414e	; 0x414e <DIO_Read_Pin>
    4a24:	89 83       	std	Y+1, r24	; 0x01
    4a26:	05 c0       	rjmp	.+10     	; 0x4a32 <Get_ButtonStatus+0x7a>
		case BUTTON_4: ButtonStatus = DIO_Read_Pin(BUTTON_4_PORT , BUTTON_4_PIN); break;
    4a28:	83 e0       	ldi	r24, 0x03	; 3
    4a2a:	63 e0       	ldi	r22, 0x03	; 3
    4a2c:	0e 94 a7 20 	call	0x414e	; 0x414e <DIO_Read_Pin>
    4a30:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
	return ButtonStatus;
    4a32:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a34:	0f 90       	pop	r0
    4a36:	0f 90       	pop	r0
    4a38:	0f 90       	pop	r0
    4a3a:	0f 90       	pop	r0
    4a3c:	cf 91       	pop	r28
    4a3e:	df 91       	pop	r29
    4a40:	08 95       	ret

00004a42 <LED_Init>:
#include "LED_interface.h"
#include "LED_private.h"

void LED_Init()
{
    4a42:	df 93       	push	r29
    4a44:	cf 93       	push	r28
    4a46:	cd b7       	in	r28, 0x3d	; 61
    4a48:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(LED_BLUE_PORT , LED_BLUE_PIN, OUTPUT);
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
    4a4c:	65 e0       	ldi	r22, 0x05	; 5
    4a4e:	40 e0       	ldi	r20, 0x00	; 0
    4a50:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LED_GREEN_PORT , LED_GREEN_PIN, OUTPUT);
    4a54:	80 e0       	ldi	r24, 0x00	; 0
    4a56:	64 e0       	ldi	r22, 0x04	; 4
    4a58:	40 e0       	ldi	r20, 0x00	; 0
    4a5a:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LED_YELLOW_PORT , LED_YELLOW_PIN, OUTPUT);
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	66 e0       	ldi	r22, 0x06	; 6
    4a62:	40 e0       	ldi	r20, 0x00	; 0
    4a64:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LED_RED_PORT , LED_RED_PIN, OUTPUT);
    4a68:	81 e0       	ldi	r24, 0x01	; 1
    4a6a:	67 e0       	ldi	r22, 0x07	; 7
    4a6c:	40 e0       	ldi	r20, 0x00	; 0
    4a6e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Write_Pin(LED_BLUE_PORT , LED_BLUE_PIN,LOW);
    4a72:	80 e0       	ldi	r24, 0x00	; 0
    4a74:	65 e0       	ldi	r22, 0x05	; 5
    4a76:	40 e0       	ldi	r20, 0x00	; 0
    4a78:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(LED_GREEN_PORT , LED_GREEN_PIN,LOW);
    4a7c:	80 e0       	ldi	r24, 0x00	; 0
    4a7e:	64 e0       	ldi	r22, 0x04	; 4
    4a80:	40 e0       	ldi	r20, 0x00	; 0
    4a82:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(LED_YELLOW_PORT , LED_YELLOW_PIN,LOW);
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	66 e0       	ldi	r22, 0x06	; 6
    4a8a:	40 e0       	ldi	r20, 0x00	; 0
    4a8c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(LED_RED_PORT , LED_RED_PIN,LOW);
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	67 e0       	ldi	r22, 0x07	; 7
    4a94:	40 e0       	ldi	r20, 0x00	; 0
    4a96:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>

}
    4a9a:	cf 91       	pop	r28
    4a9c:	df 91       	pop	r29
    4a9e:	08 95       	ret

00004aa0 <LED_ON>:

void LED_ON(LED_t led)
{
    4aa0:	df 93       	push	r29
    4aa2:	cf 93       	push	r28
    4aa4:	00 d0       	rcall	.+0      	; 0x4aa6 <LED_ON+0x6>
    4aa6:	0f 92       	push	r0
    4aa8:	cd b7       	in	r28, 0x3d	; 61
    4aaa:	de b7       	in	r29, 0x3e	; 62
    4aac:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    4aae:	89 81       	ldd	r24, Y+1	; 0x01
    4ab0:	28 2f       	mov	r18, r24
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
    4ab4:	3b 83       	std	Y+3, r19	; 0x03
    4ab6:	2a 83       	std	Y+2, r18	; 0x02
    4ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    4aba:	9b 81       	ldd	r25, Y+3	; 0x03
    4abc:	82 30       	cpi	r24, 0x02	; 2
    4abe:	91 05       	cpc	r25, r1
    4ac0:	d1 f0       	breq	.+52     	; 0x4af6 <LED_ON+0x56>
    4ac2:	2a 81       	ldd	r18, Y+2	; 0x02
    4ac4:	3b 81       	ldd	r19, Y+3	; 0x03
    4ac6:	23 30       	cpi	r18, 0x03	; 3
    4ac8:	31 05       	cpc	r19, r1
    4aca:	54 f4       	brge	.+20     	; 0x4ae0 <LED_ON+0x40>
    4acc:	8a 81       	ldd	r24, Y+2	; 0x02
    4ace:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad0:	00 97       	sbiw	r24, 0x00	; 0
    4ad2:	19 f1       	breq	.+70     	; 0x4b1a <LED_ON+0x7a>
    4ad4:	2a 81       	ldd	r18, Y+2	; 0x02
    4ad6:	3b 81       	ldd	r19, Y+3	; 0x03
    4ad8:	21 30       	cpi	r18, 0x01	; 1
    4ada:	31 05       	cpc	r19, r1
    4adc:	91 f0       	breq	.+36     	; 0x4b02 <LED_ON+0x62>
    4ade:	37 c0       	rjmp	.+110    	; 0x4b4e <LED_ON+0xae>
    4ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    4ae4:	83 30       	cpi	r24, 0x03	; 3
    4ae6:	91 05       	cpc	r25, r1
    4ae8:	91 f0       	breq	.+36     	; 0x4b0e <LED_ON+0x6e>
    4aea:	2a 81       	ldd	r18, Y+2	; 0x02
    4aec:	3b 81       	ldd	r19, Y+3	; 0x03
    4aee:	24 30       	cpi	r18, 0x04	; 4
    4af0:	31 05       	cpc	r19, r1
    4af2:	c9 f0       	breq	.+50     	; 0x4b26 <LED_ON+0x86>
    4af4:	2c c0       	rjmp	.+88     	; 0x4b4e <LED_ON+0xae>
	{
	case LED_BLUE :
		DIO_Write_Pin(LED_BLUE_PORT , LED_BLUE_PIN , HIGH);
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	65 e0       	ldi	r22, 0x05	; 5
    4afa:	41 e0       	ldi	r20, 0x01	; 1
    4afc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4b00:	26 c0       	rjmp	.+76     	; 0x4b4e <LED_ON+0xae>
		break;
	case LED_GREEN :
		DIO_Write_Pin(LED_GREEN_PORT , LED_GREEN_PIN , HIGH);
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	64 e0       	ldi	r22, 0x04	; 4
    4b06:	41 e0       	ldi	r20, 0x01	; 1
    4b08:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4b0c:	20 c0       	rjmp	.+64     	; 0x4b4e <LED_ON+0xae>
		break;
	case LED_YELLOW :
		DIO_Write_Pin(LED_YELLOW_PORT , LED_YELLOW_PIN , HIGH);
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	66 e0       	ldi	r22, 0x06	; 6
    4b12:	41 e0       	ldi	r20, 0x01	; 1
    4b14:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4b18:	1a c0       	rjmp	.+52     	; 0x4b4e <LED_ON+0xae>
		break;
	case LED_RED :
		DIO_Write_Pin(LED_RED_PORT , LED_RED_PIN , HIGH);
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	67 e0       	ldi	r22, 0x07	; 7
    4b1e:	41 e0       	ldi	r20, 0x01	; 1
    4b20:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4b24:	14 c0       	rjmp	.+40     	; 0x4b4e <LED_ON+0xae>
		break;
	case LED_ALL:
		DIO_Write_Pin(LED_BLUE_PORT , LED_BLUE_PIN , HIGH);
    4b26:	80 e0       	ldi	r24, 0x00	; 0
    4b28:	65 e0       	ldi	r22, 0x05	; 5
    4b2a:	41 e0       	ldi	r20, 0x01	; 1
    4b2c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		DIO_Write_Pin(LED_GREEN_PORT , LED_GREEN_PIN , HIGH);
    4b30:	80 e0       	ldi	r24, 0x00	; 0
    4b32:	64 e0       	ldi	r22, 0x04	; 4
    4b34:	41 e0       	ldi	r20, 0x01	; 1
    4b36:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		DIO_Write_Pin(LED_YELLOW_PORT , LED_YELLOW_PIN , HIGH);
    4b3a:	80 e0       	ldi	r24, 0x00	; 0
    4b3c:	66 e0       	ldi	r22, 0x06	; 6
    4b3e:	41 e0       	ldi	r20, 0x01	; 1
    4b40:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		DIO_Write_Pin(LED_RED_PORT , LED_RED_PIN , HIGH);
    4b44:	81 e0       	ldi	r24, 0x01	; 1
    4b46:	67 e0       	ldi	r22, 0x07	; 7
    4b48:	41 e0       	ldi	r20, 0x01	; 1
    4b4a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		break;

	}
}
    4b4e:	0f 90       	pop	r0
    4b50:	0f 90       	pop	r0
    4b52:	0f 90       	pop	r0
    4b54:	cf 91       	pop	r28
    4b56:	df 91       	pop	r29
    4b58:	08 95       	ret

00004b5a <LED_OFF>:
void LED_OFF(LED_t led)
{
    4b5a:	df 93       	push	r29
    4b5c:	cf 93       	push	r28
    4b5e:	00 d0       	rcall	.+0      	; 0x4b60 <LED_OFF+0x6>
    4b60:	0f 92       	push	r0
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    4b68:	89 81       	ldd	r24, Y+1	; 0x01
    4b6a:	28 2f       	mov	r18, r24
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	3b 83       	std	Y+3, r19	; 0x03
    4b70:	2a 83       	std	Y+2, r18	; 0x02
    4b72:	8a 81       	ldd	r24, Y+2	; 0x02
    4b74:	9b 81       	ldd	r25, Y+3	; 0x03
    4b76:	82 30       	cpi	r24, 0x02	; 2
    4b78:	91 05       	cpc	r25, r1
    4b7a:	d1 f0       	breq	.+52     	; 0x4bb0 <LED_OFF+0x56>
    4b7c:	2a 81       	ldd	r18, Y+2	; 0x02
    4b7e:	3b 81       	ldd	r19, Y+3	; 0x03
    4b80:	23 30       	cpi	r18, 0x03	; 3
    4b82:	31 05       	cpc	r19, r1
    4b84:	54 f4       	brge	.+20     	; 0x4b9a <LED_OFF+0x40>
    4b86:	8a 81       	ldd	r24, Y+2	; 0x02
    4b88:	9b 81       	ldd	r25, Y+3	; 0x03
    4b8a:	00 97       	sbiw	r24, 0x00	; 0
    4b8c:	19 f1       	breq	.+70     	; 0x4bd4 <LED_OFF+0x7a>
    4b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    4b90:	3b 81       	ldd	r19, Y+3	; 0x03
    4b92:	21 30       	cpi	r18, 0x01	; 1
    4b94:	31 05       	cpc	r19, r1
    4b96:	91 f0       	breq	.+36     	; 0x4bbc <LED_OFF+0x62>
    4b98:	37 c0       	rjmp	.+110    	; 0x4c08 <LED_OFF+0xae>
    4b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b9e:	83 30       	cpi	r24, 0x03	; 3
    4ba0:	91 05       	cpc	r25, r1
    4ba2:	91 f0       	breq	.+36     	; 0x4bc8 <LED_OFF+0x6e>
    4ba4:	2a 81       	ldd	r18, Y+2	; 0x02
    4ba6:	3b 81       	ldd	r19, Y+3	; 0x03
    4ba8:	24 30       	cpi	r18, 0x04	; 4
    4baa:	31 05       	cpc	r19, r1
    4bac:	c9 f0       	breq	.+50     	; 0x4be0 <LED_OFF+0x86>
    4bae:	2c c0       	rjmp	.+88     	; 0x4c08 <LED_OFF+0xae>
	{
	case LED_BLUE :
		DIO_Write_Pin(LED_BLUE_PORT , LED_BLUE_PIN , LOW);
    4bb0:	80 e0       	ldi	r24, 0x00	; 0
    4bb2:	65 e0       	ldi	r22, 0x05	; 5
    4bb4:	40 e0       	ldi	r20, 0x00	; 0
    4bb6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4bba:	26 c0       	rjmp	.+76     	; 0x4c08 <LED_OFF+0xae>
		break;
	case LED_GREEN :
		DIO_Write_Pin(LED_GREEN_PORT , LED_GREEN_PIN , LOW);
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	64 e0       	ldi	r22, 0x04	; 4
    4bc0:	40 e0       	ldi	r20, 0x00	; 0
    4bc2:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4bc6:	20 c0       	rjmp	.+64     	; 0x4c08 <LED_OFF+0xae>
		break;
	case LED_YELLOW :
		DIO_Write_Pin(LED_YELLOW_PORT , LED_YELLOW_PIN , LOW);
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	66 e0       	ldi	r22, 0x06	; 6
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4bd2:	1a c0       	rjmp	.+52     	; 0x4c08 <LED_OFF+0xae>
		break;
	case LED_RED :
		DIO_Write_Pin(LED_RED_PORT , LED_RED_PIN , LOW);
    4bd4:	81 e0       	ldi	r24, 0x01	; 1
    4bd6:	67 e0       	ldi	r22, 0x07	; 7
    4bd8:	40 e0       	ldi	r20, 0x00	; 0
    4bda:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
    4bde:	14 c0       	rjmp	.+40     	; 0x4c08 <LED_OFF+0xae>
		break;
	case LED_ALL:
		DIO_Write_Pin(LED_BLUE_PORT , LED_BLUE_PIN , LOW);
    4be0:	80 e0       	ldi	r24, 0x00	; 0
    4be2:	65 e0       	ldi	r22, 0x05	; 5
    4be4:	40 e0       	ldi	r20, 0x00	; 0
    4be6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		DIO_Write_Pin(LED_GREEN_PORT , LED_GREEN_PIN , LOW);
    4bea:	80 e0       	ldi	r24, 0x00	; 0
    4bec:	64 e0       	ldi	r22, 0x04	; 4
    4bee:	40 e0       	ldi	r20, 0x00	; 0
    4bf0:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		DIO_Write_Pin(LED_YELLOW_PORT , LED_YELLOW_PIN , LOW);
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	66 e0       	ldi	r22, 0x06	; 6
    4bf8:	40 e0       	ldi	r20, 0x00	; 0
    4bfa:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		DIO_Write_Pin(LED_RED_PORT , LED_RED_PIN , LOW);
    4bfe:	81 e0       	ldi	r24, 0x01	; 1
    4c00:	67 e0       	ldi	r22, 0x07	; 7
    4c02:	40 e0       	ldi	r20, 0x00	; 0
    4c04:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		break;
	}
}
    4c08:	0f 90       	pop	r0
    4c0a:	0f 90       	pop	r0
    4c0c:	0f 90       	pop	r0
    4c0e:	cf 91       	pop	r28
    4c10:	df 91       	pop	r29
    4c12:	08 95       	ret

00004c14 <LED_Toggle>:
void LED_Toggle(LED_t led)
{
    4c14:	df 93       	push	r29
    4c16:	cf 93       	push	r28
    4c18:	00 d0       	rcall	.+0      	; 0x4c1a <LED_Toggle+0x6>
    4c1a:	0f 92       	push	r0
    4c1c:	cd b7       	in	r28, 0x3d	; 61
    4c1e:	de b7       	in	r29, 0x3e	; 62
    4c20:	89 83       	std	Y+1, r24	; 0x01
	switch (led)
    4c22:	89 81       	ldd	r24, Y+1	; 0x01
    4c24:	28 2f       	mov	r18, r24
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	3b 83       	std	Y+3, r19	; 0x03
    4c2a:	2a 83       	std	Y+2, r18	; 0x02
    4c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c30:	81 30       	cpi	r24, 0x01	; 1
    4c32:	91 05       	cpc	r25, r1
    4c34:	d1 f0       	breq	.+52     	; 0x4c6a <LED_Toggle+0x56>
    4c36:	2a 81       	ldd	r18, Y+2	; 0x02
    4c38:	3b 81       	ldd	r19, Y+3	; 0x03
    4c3a:	22 30       	cpi	r18, 0x02	; 2
    4c3c:	31 05       	cpc	r19, r1
    4c3e:	2c f4       	brge	.+10     	; 0x4c4a <LED_Toggle+0x36>
    4c40:	8a 81       	ldd	r24, Y+2	; 0x02
    4c42:	9b 81       	ldd	r25, Y+3	; 0x03
    4c44:	00 97       	sbiw	r24, 0x00	; 0
    4c46:	d9 f0       	breq	.+54     	; 0x4c7e <LED_Toggle+0x6a>
    4c48:	1e c0       	rjmp	.+60     	; 0x4c86 <LED_Toggle+0x72>
    4c4a:	2a 81       	ldd	r18, Y+2	; 0x02
    4c4c:	3b 81       	ldd	r19, Y+3	; 0x03
    4c4e:	22 30       	cpi	r18, 0x02	; 2
    4c50:	31 05       	cpc	r19, r1
    4c52:	31 f0       	breq	.+12     	; 0x4c60 <LED_Toggle+0x4c>
    4c54:	8a 81       	ldd	r24, Y+2	; 0x02
    4c56:	9b 81       	ldd	r25, Y+3	; 0x03
    4c58:	83 30       	cpi	r24, 0x03	; 3
    4c5a:	91 05       	cpc	r25, r1
    4c5c:	59 f0       	breq	.+22     	; 0x4c74 <LED_Toggle+0x60>
    4c5e:	13 c0       	rjmp	.+38     	; 0x4c86 <LED_Toggle+0x72>
	{
	case LED_BLUE :
		DIO_Toggle_Pin(LED_BLUE_PORT , LED_BLUE_PIN);
    4c60:	80 e0       	ldi	r24, 0x00	; 0
    4c62:	65 e0       	ldi	r22, 0x05	; 5
    4c64:	0e 94 43 21 	call	0x4286	; 0x4286 <DIO_Toggle_Pin>
    4c68:	0e c0       	rjmp	.+28     	; 0x4c86 <LED_Toggle+0x72>
		break;
	case LED_GREEN :
		DIO_Toggle_Pin(LED_GREEN_PORT , LED_GREEN_PIN );
    4c6a:	80 e0       	ldi	r24, 0x00	; 0
    4c6c:	64 e0       	ldi	r22, 0x04	; 4
    4c6e:	0e 94 43 21 	call	0x4286	; 0x4286 <DIO_Toggle_Pin>
    4c72:	09 c0       	rjmp	.+18     	; 0x4c86 <LED_Toggle+0x72>
		break;
	case LED_YELLOW :
		DIO_Toggle_Pin(LED_YELLOW_PORT , LED_YELLOW_PIN);
    4c74:	80 e0       	ldi	r24, 0x00	; 0
    4c76:	66 e0       	ldi	r22, 0x06	; 6
    4c78:	0e 94 43 21 	call	0x4286	; 0x4286 <DIO_Toggle_Pin>
    4c7c:	04 c0       	rjmp	.+8      	; 0x4c86 <LED_Toggle+0x72>
		break;
	case LED_RED :
		DIO_Toggle_Pin(LED_RED_PORT , LED_RED_PIN );
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	67 e0       	ldi	r22, 0x07	; 7
    4c82:	0e 94 43 21 	call	0x4286	; 0x4286 <DIO_Toggle_Pin>
		break;	
	}
}
    4c86:	0f 90       	pop	r0
    4c88:	0f 90       	pop	r0
    4c8a:	0f 90       	pop	r0
    4c8c:	cf 91       	pop	r28
    4c8e:	df 91       	pop	r29
    4c90:	08 95       	ret

00004c92 <LED_write>:


void LED_write(LED_t led , u8 status )
{
    4c92:	df 93       	push	r29
    4c94:	cf 93       	push	r28
    4c96:	00 d0       	rcall	.+0      	; 0x4c98 <LED_write+0x6>
    4c98:	cd b7       	in	r28, 0x3d	; 61
    4c9a:	de b7       	in	r29, 0x3e	; 62
    4c9c:	89 83       	std	Y+1, r24	; 0x01
    4c9e:	6a 83       	std	Y+2, r22	; 0x02
	if(status ==  0)
    4ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    4ca2:	88 23       	and	r24, r24
    4ca4:	21 f4       	brne	.+8      	; 0x4cae <LED_write+0x1c>
	{
		LED_OFF(led);
    4ca6:	89 81       	ldd	r24, Y+1	; 0x01
    4ca8:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <LED_OFF>
    4cac:	06 c0       	rjmp	.+12     	; 0x4cba <LED_write+0x28>
	}
	else if (status == 1)
    4cae:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb0:	81 30       	cpi	r24, 0x01	; 1
    4cb2:	19 f4       	brne	.+6      	; 0x4cba <LED_write+0x28>
	{
		LED_ON(led);
    4cb4:	89 81       	ldd	r24, Y+1	; 0x01
    4cb6:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <LED_ON>
	}
}
    4cba:	0f 90       	pop	r0
    4cbc:	0f 90       	pop	r0
    4cbe:	cf 91       	pop	r28
    4cc0:	df 91       	pop	r29
    4cc2:	08 95       	ret

00004cc4 <write_port>:
#include <util/delay.h>



static void write_port ( u8 data)
{
    4cc4:	df 93       	push	r29
    4cc6:	cf 93       	push	r28
    4cc8:	0f 92       	push	r0
    4cca:	cd b7       	in	r28, 0x3d	; 61
    4ccc:	de b7       	in	r29, 0x3e	; 62
    4cce:	89 83       	std	Y+1, r24	; 0x01
	WRITE_BIT(data , 4 , READ_BIT(data , 3 ));
	CLEAR_BIT(data , 3 );
	PORTB &= 0b11101000 ;
	PORTB |= data ;*/
	
	DIO_Write_Pin(LCD_DATA_PORT , LCD_DATA_PIN0 , READ_BIT(data , 0) );
    4cd0:	89 81       	ldd	r24, Y+1	; 0x01
    4cd2:	98 2f       	mov	r25, r24
    4cd4:	91 70       	andi	r25, 0x01	; 1
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	60 e0       	ldi	r22, 0x00	; 0
    4cda:	49 2f       	mov	r20, r25
    4cdc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(LCD_DATA_PORT , LCD_DATA_PIN1 , READ_BIT(data , 1) );
    4ce0:	89 81       	ldd	r24, Y+1	; 0x01
    4ce2:	86 95       	lsr	r24
    4ce4:	98 2f       	mov	r25, r24
    4ce6:	91 70       	andi	r25, 0x01	; 1
    4ce8:	81 e0       	ldi	r24, 0x01	; 1
    4cea:	61 e0       	ldi	r22, 0x01	; 1
    4cec:	49 2f       	mov	r20, r25
    4cee:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(LCD_DATA_PORT , LCD_DATA_PIN2 , READ_BIT(data , 2) );
    4cf2:	89 81       	ldd	r24, Y+1	; 0x01
    4cf4:	86 95       	lsr	r24
    4cf6:	86 95       	lsr	r24
    4cf8:	98 2f       	mov	r25, r24
    4cfa:	91 70       	andi	r25, 0x01	; 1
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	62 e0       	ldi	r22, 0x02	; 2
    4d00:	49 2f       	mov	r20, r25
    4d02:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(LCD_DATA_PORT , LCD_DATA_PIN3 , READ_BIT(data , 3) );
    4d06:	89 81       	ldd	r24, Y+1	; 0x01
    4d08:	86 95       	lsr	r24
    4d0a:	86 95       	lsr	r24
    4d0c:	86 95       	lsr	r24
    4d0e:	98 2f       	mov	r25, r24
    4d10:	91 70       	andi	r25, 0x01	; 1
    4d12:	81 e0       	ldi	r24, 0x01	; 1
    4d14:	64 e0       	ldi	r22, 0x04	; 4
    4d16:	49 2f       	mov	r20, r25
    4d18:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
}
    4d1c:	0f 90       	pop	r0
    4d1e:	cf 91       	pop	r28
    4d20:	df 91       	pop	r29
    4d22:	08 95       	ret

00004d24 <LCD_Write_Command>:

void LCD_Write_Command(u8 cmd )
{
    4d24:	df 93       	push	r29
    4d26:	cf 93       	push	r28
    4d28:	cd b7       	in	r28, 0x3d	; 61
    4d2a:	de b7       	in	r29, 0x3e	; 62
    4d2c:	e9 97       	sbiw	r28, 0x39	; 57
    4d2e:	0f b6       	in	r0, 0x3f	; 63
    4d30:	f8 94       	cli
    4d32:	de bf       	out	0x3e, r29	; 62
    4d34:	0f be       	out	0x3f, r0	; 63
    4d36:	cd bf       	out	0x3d, r28	; 61
    4d38:	89 af       	std	Y+57, r24	; 0x39
	DIO_Clear_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    4d3a:	80 e0       	ldi	r24, 0x00	; 0
    4d3c:	62 e0       	ldi	r22, 0x02	; 2
    4d3e:	0e 94 32 21 	call	0x4264	; 0x4264 <DIO_Clear_Pin>
	DIO_Clear_Pin(LCD_CTRL_PORT , LCD_RS_PIN );
    4d42:	80 e0       	ldi	r24, 0x00	; 0
    4d44:	63 e0       	ldi	r22, 0x03	; 3
    4d46:	0e 94 32 21 	call	0x4264	; 0x4264 <DIO_Clear_Pin>
	write_port(cmd>>4);
    4d4a:	89 ad       	ldd	r24, Y+57	; 0x39
    4d4c:	82 95       	swap	r24
    4d4e:	8f 70       	andi	r24, 0x0F	; 15
    4d50:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <write_port>
	DIO_Set_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	62 e0       	ldi	r22, 0x02	; 2
    4d58:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_Set_Pin>
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	a0 e8       	ldi	r26, 0x80	; 128
    4d62:	bf e3       	ldi	r27, 0x3F	; 63
    4d64:	8d ab       	std	Y+53, r24	; 0x35
    4d66:	9e ab       	std	Y+54, r25	; 0x36
    4d68:	af ab       	std	Y+55, r26	; 0x37
    4d6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d6c:	6d a9       	ldd	r22, Y+53	; 0x35
    4d6e:	7e a9       	ldd	r23, Y+54	; 0x36
    4d70:	8f a9       	ldd	r24, Y+55	; 0x37
    4d72:	98 ad       	ldd	r25, Y+56	; 0x38
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
    4d78:	4a ef       	ldi	r20, 0xFA	; 250
    4d7a:	54 e4       	ldi	r21, 0x44	; 68
    4d7c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4d80:	dc 01       	movw	r26, r24
    4d82:	cb 01       	movw	r24, r22
    4d84:	89 ab       	std	Y+49, r24	; 0x31
    4d86:	9a ab       	std	Y+50, r25	; 0x32
    4d88:	ab ab       	std	Y+51, r26	; 0x33
    4d8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d8c:	69 a9       	ldd	r22, Y+49	; 0x31
    4d8e:	7a a9       	ldd	r23, Y+50	; 0x32
    4d90:	8b a9       	ldd	r24, Y+51	; 0x33
    4d92:	9c a9       	ldd	r25, Y+52	; 0x34
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e8       	ldi	r20, 0x80	; 128
    4d9a:	5f e3       	ldi	r21, 0x3F	; 63
    4d9c:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    4da0:	88 23       	and	r24, r24
    4da2:	2c f4       	brge	.+10     	; 0x4dae <LCD_Write_Command+0x8a>
		__ticks = 1;
    4da4:	81 e0       	ldi	r24, 0x01	; 1
    4da6:	90 e0       	ldi	r25, 0x00	; 0
    4da8:	98 ab       	std	Y+48, r25	; 0x30
    4daa:	8f a7       	std	Y+47, r24	; 0x2f
    4dac:	3f c0       	rjmp	.+126    	; 0x4e2c <LCD_Write_Command+0x108>
	else if (__tmp > 65535)
    4dae:	69 a9       	ldd	r22, Y+49	; 0x31
    4db0:	7a a9       	ldd	r23, Y+50	; 0x32
    4db2:	8b a9       	ldd	r24, Y+51	; 0x33
    4db4:	9c a9       	ldd	r25, Y+52	; 0x34
    4db6:	20 e0       	ldi	r18, 0x00	; 0
    4db8:	3f ef       	ldi	r19, 0xFF	; 255
    4dba:	4f e7       	ldi	r20, 0x7F	; 127
    4dbc:	57 e4       	ldi	r21, 0x47	; 71
    4dbe:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    4dc2:	18 16       	cp	r1, r24
    4dc4:	4c f5       	brge	.+82     	; 0x4e18 <LCD_Write_Command+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dc6:	6d a9       	ldd	r22, Y+53	; 0x35
    4dc8:	7e a9       	ldd	r23, Y+54	; 0x36
    4dca:	8f a9       	ldd	r24, Y+55	; 0x37
    4dcc:	98 ad       	ldd	r25, Y+56	; 0x38
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	40 e2       	ldi	r20, 0x20	; 32
    4dd4:	51 e4       	ldi	r21, 0x41	; 65
    4dd6:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	bc 01       	movw	r22, r24
    4de0:	cd 01       	movw	r24, r26
    4de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4de6:	dc 01       	movw	r26, r24
    4de8:	cb 01       	movw	r24, r22
    4dea:	98 ab       	std	Y+48, r25	; 0x30
    4dec:	8f a7       	std	Y+47, r24	; 0x2f
    4dee:	0f c0       	rjmp	.+30     	; 0x4e0e <LCD_Write_Command+0xea>
    4df0:	88 ec       	ldi	r24, 0xC8	; 200
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	9e a7       	std	Y+46, r25	; 0x2e
    4df6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4df8:	8d a5       	ldd	r24, Y+45	; 0x2d
    4dfa:	9e a5       	ldd	r25, Y+46	; 0x2e
    4dfc:	01 97       	sbiw	r24, 0x01	; 1
    4dfe:	f1 f7       	brne	.-4      	; 0x4dfc <LCD_Write_Command+0xd8>
    4e00:	9e a7       	std	Y+46, r25	; 0x2e
    4e02:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e04:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e06:	98 a9       	ldd	r25, Y+48	; 0x30
    4e08:	01 97       	sbiw	r24, 0x01	; 1
    4e0a:	98 ab       	std	Y+48, r25	; 0x30
    4e0c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e10:	98 a9       	ldd	r25, Y+48	; 0x30
    4e12:	00 97       	sbiw	r24, 0x00	; 0
    4e14:	69 f7       	brne	.-38     	; 0x4df0 <LCD_Write_Command+0xcc>
    4e16:	14 c0       	rjmp	.+40     	; 0x4e40 <LCD_Write_Command+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e18:	69 a9       	ldd	r22, Y+49	; 0x31
    4e1a:	7a a9       	ldd	r23, Y+50	; 0x32
    4e1c:	8b a9       	ldd	r24, Y+51	; 0x33
    4e1e:	9c a9       	ldd	r25, Y+52	; 0x34
    4e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	98 ab       	std	Y+48, r25	; 0x30
    4e2a:	8f a7       	std	Y+47, r24	; 0x2f
    4e2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4e2e:	98 a9       	ldd	r25, Y+48	; 0x30
    4e30:	9c a7       	std	Y+44, r25	; 0x2c
    4e32:	8b a7       	std	Y+43, r24	; 0x2b
    4e34:	8b a5       	ldd	r24, Y+43	; 0x2b
    4e36:	9c a5       	ldd	r25, Y+44	; 0x2c
    4e38:	01 97       	sbiw	r24, 0x01	; 1
    4e3a:	f1 f7       	brne	.-4      	; 0x4e38 <LCD_Write_Command+0x114>
    4e3c:	9c a7       	std	Y+44, r25	; 0x2c
    4e3e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_Clear_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	62 e0       	ldi	r22, 0x02	; 2
    4e44:	0e 94 32 21 	call	0x4264	; 0x4264 <DIO_Clear_Pin>
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	a0 e8       	ldi	r26, 0x80	; 128
    4e4e:	bf e3       	ldi	r27, 0x3F	; 63
    4e50:	8f a3       	std	Y+39, r24	; 0x27
    4e52:	98 a7       	std	Y+40, r25	; 0x28
    4e54:	a9 a7       	std	Y+41, r26	; 0x29
    4e56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e58:	6f a1       	ldd	r22, Y+39	; 0x27
    4e5a:	78 a5       	ldd	r23, Y+40	; 0x28
    4e5c:	89 a5       	ldd	r24, Y+41	; 0x29
    4e5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e60:	20 e0       	ldi	r18, 0x00	; 0
    4e62:	30 e0       	ldi	r19, 0x00	; 0
    4e64:	4a ef       	ldi	r20, 0xFA	; 250
    4e66:	54 e4       	ldi	r21, 0x44	; 68
    4e68:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4e6c:	dc 01       	movw	r26, r24
    4e6e:	cb 01       	movw	r24, r22
    4e70:	8b a3       	std	Y+35, r24	; 0x23
    4e72:	9c a3       	std	Y+36, r25	; 0x24
    4e74:	ad a3       	std	Y+37, r26	; 0x25
    4e76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e78:	6b a1       	ldd	r22, Y+35	; 0x23
    4e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    4e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    4e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	40 e8       	ldi	r20, 0x80	; 128
    4e86:	5f e3       	ldi	r21, 0x3F	; 63
    4e88:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    4e8c:	88 23       	and	r24, r24
    4e8e:	2c f4       	brge	.+10     	; 0x4e9a <LCD_Write_Command+0x176>
		__ticks = 1;
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	9a a3       	std	Y+34, r25	; 0x22
    4e96:	89 a3       	std	Y+33, r24	; 0x21
    4e98:	3f c0       	rjmp	.+126    	; 0x4f18 <LCD_Write_Command+0x1f4>
	else if (__tmp > 65535)
    4e9a:	6b a1       	ldd	r22, Y+35	; 0x23
    4e9c:	7c a1       	ldd	r23, Y+36	; 0x24
    4e9e:	8d a1       	ldd	r24, Y+37	; 0x25
    4ea0:	9e a1       	ldd	r25, Y+38	; 0x26
    4ea2:	20 e0       	ldi	r18, 0x00	; 0
    4ea4:	3f ef       	ldi	r19, 0xFF	; 255
    4ea6:	4f e7       	ldi	r20, 0x7F	; 127
    4ea8:	57 e4       	ldi	r21, 0x47	; 71
    4eaa:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    4eae:	18 16       	cp	r1, r24
    4eb0:	4c f5       	brge	.+82     	; 0x4f04 <LCD_Write_Command+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb2:	6f a1       	ldd	r22, Y+39	; 0x27
    4eb4:	78 a5       	ldd	r23, Y+40	; 0x28
    4eb6:	89 a5       	ldd	r24, Y+41	; 0x29
    4eb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	40 e2       	ldi	r20, 0x20	; 32
    4ec0:	51 e4       	ldi	r21, 0x41	; 65
    4ec2:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4ec6:	dc 01       	movw	r26, r24
    4ec8:	cb 01       	movw	r24, r22
    4eca:	bc 01       	movw	r22, r24
    4ecc:	cd 01       	movw	r24, r26
    4ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	9a a3       	std	Y+34, r25	; 0x22
    4ed8:	89 a3       	std	Y+33, r24	; 0x21
    4eda:	0f c0       	rjmp	.+30     	; 0x4efa <LCD_Write_Command+0x1d6>
    4edc:	88 ec       	ldi	r24, 0xC8	; 200
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	98 a3       	std	Y+32, r25	; 0x20
    4ee2:	8f 8f       	std	Y+31, r24	; 0x1f
    4ee4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ee6:	98 a1       	ldd	r25, Y+32	; 0x20
    4ee8:	01 97       	sbiw	r24, 0x01	; 1
    4eea:	f1 f7       	brne	.-4      	; 0x4ee8 <LCD_Write_Command+0x1c4>
    4eec:	98 a3       	std	Y+32, r25	; 0x20
    4eee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ef0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ef2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ef4:	01 97       	sbiw	r24, 0x01	; 1
    4ef6:	9a a3       	std	Y+34, r25	; 0x22
    4ef8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4efa:	89 a1       	ldd	r24, Y+33	; 0x21
    4efc:	9a a1       	ldd	r25, Y+34	; 0x22
    4efe:	00 97       	sbiw	r24, 0x00	; 0
    4f00:	69 f7       	brne	.-38     	; 0x4edc <LCD_Write_Command+0x1b8>
    4f02:	14 c0       	rjmp	.+40     	; 0x4f2c <LCD_Write_Command+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f04:	6b a1       	ldd	r22, Y+35	; 0x23
    4f06:	7c a1       	ldd	r23, Y+36	; 0x24
    4f08:	8d a1       	ldd	r24, Y+37	; 0x25
    4f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    4f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f10:	dc 01       	movw	r26, r24
    4f12:	cb 01       	movw	r24, r22
    4f14:	9a a3       	std	Y+34, r25	; 0x22
    4f16:	89 a3       	std	Y+33, r24	; 0x21
    4f18:	89 a1       	ldd	r24, Y+33	; 0x21
    4f1a:	9a a1       	ldd	r25, Y+34	; 0x22
    4f1c:	9e 8f       	std	Y+30, r25	; 0x1e
    4f1e:	8d 8f       	std	Y+29, r24	; 0x1d
    4f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f24:	01 97       	sbiw	r24, 0x01	; 1
    4f26:	f1 f7       	brne	.-4      	; 0x4f24 <LCD_Write_Command+0x200>
    4f28:	9e 8f       	std	Y+30, r25	; 0x1e
    4f2a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	write_port(cmd);
    4f2c:	89 ad       	ldd	r24, Y+57	; 0x39
    4f2e:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <write_port>
	DIO_Set_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    4f32:	80 e0       	ldi	r24, 0x00	; 0
    4f34:	62 e0       	ldi	r22, 0x02	; 2
    4f36:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_Set_Pin>
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	a0 e8       	ldi	r26, 0x80	; 128
    4f40:	bf e3       	ldi	r27, 0x3F	; 63
    4f42:	89 8f       	std	Y+25, r24	; 0x19
    4f44:	9a 8f       	std	Y+26, r25	; 0x1a
    4f46:	ab 8f       	std	Y+27, r26	; 0x1b
    4f48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f4a:	69 8d       	ldd	r22, Y+25	; 0x19
    4f4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f52:	20 e0       	ldi	r18, 0x00	; 0
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	4a ef       	ldi	r20, 0xFA	; 250
    4f58:	54 e4       	ldi	r21, 0x44	; 68
    4f5a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4f5e:	dc 01       	movw	r26, r24
    4f60:	cb 01       	movw	r24, r22
    4f62:	8d 8b       	std	Y+21, r24	; 0x15
    4f64:	9e 8b       	std	Y+22, r25	; 0x16
    4f66:	af 8b       	std	Y+23, r26	; 0x17
    4f68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f6a:	6d 89       	ldd	r22, Y+21	; 0x15
    4f6c:	7e 89       	ldd	r23, Y+22	; 0x16
    4f6e:	8f 89       	ldd	r24, Y+23	; 0x17
    4f70:	98 8d       	ldd	r25, Y+24	; 0x18
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	40 e8       	ldi	r20, 0x80	; 128
    4f78:	5f e3       	ldi	r21, 0x3F	; 63
    4f7a:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    4f7e:	88 23       	and	r24, r24
    4f80:	2c f4       	brge	.+10     	; 0x4f8c <LCD_Write_Command+0x268>
		__ticks = 1;
    4f82:	81 e0       	ldi	r24, 0x01	; 1
    4f84:	90 e0       	ldi	r25, 0x00	; 0
    4f86:	9c 8b       	std	Y+20, r25	; 0x14
    4f88:	8b 8b       	std	Y+19, r24	; 0x13
    4f8a:	3f c0       	rjmp	.+126    	; 0x500a <LCD_Write_Command+0x2e6>
	else if (__tmp > 65535)
    4f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f90:	8f 89       	ldd	r24, Y+23	; 0x17
    4f92:	98 8d       	ldd	r25, Y+24	; 0x18
    4f94:	20 e0       	ldi	r18, 0x00	; 0
    4f96:	3f ef       	ldi	r19, 0xFF	; 255
    4f98:	4f e7       	ldi	r20, 0x7F	; 127
    4f9a:	57 e4       	ldi	r21, 0x47	; 71
    4f9c:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    4fa0:	18 16       	cp	r1, r24
    4fa2:	4c f5       	brge	.+82     	; 0x4ff6 <LCD_Write_Command+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fa4:	69 8d       	ldd	r22, Y+25	; 0x19
    4fa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4faa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fac:	20 e0       	ldi	r18, 0x00	; 0
    4fae:	30 e0       	ldi	r19, 0x00	; 0
    4fb0:	40 e2       	ldi	r20, 0x20	; 32
    4fb2:	51 e4       	ldi	r21, 0x41	; 65
    4fb4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	bc 01       	movw	r22, r24
    4fbe:	cd 01       	movw	r24, r26
    4fc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc4:	dc 01       	movw	r26, r24
    4fc6:	cb 01       	movw	r24, r22
    4fc8:	9c 8b       	std	Y+20, r25	; 0x14
    4fca:	8b 8b       	std	Y+19, r24	; 0x13
    4fcc:	0f c0       	rjmp	.+30     	; 0x4fec <LCD_Write_Command+0x2c8>
    4fce:	88 ec       	ldi	r24, 0xC8	; 200
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	9a 8b       	std	Y+18, r25	; 0x12
    4fd4:	89 8b       	std	Y+17, r24	; 0x11
    4fd6:	89 89       	ldd	r24, Y+17	; 0x11
    4fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    4fda:	01 97       	sbiw	r24, 0x01	; 1
    4fdc:	f1 f7       	brne	.-4      	; 0x4fda <LCD_Write_Command+0x2b6>
    4fde:	9a 8b       	std	Y+18, r25	; 0x12
    4fe0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    4fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    4fe6:	01 97       	sbiw	r24, 0x01	; 1
    4fe8:	9c 8b       	std	Y+20, r25	; 0x14
    4fea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fec:	8b 89       	ldd	r24, Y+19	; 0x13
    4fee:	9c 89       	ldd	r25, Y+20	; 0x14
    4ff0:	00 97       	sbiw	r24, 0x00	; 0
    4ff2:	69 f7       	brne	.-38     	; 0x4fce <LCD_Write_Command+0x2aa>
    4ff4:	14 c0       	rjmp	.+40     	; 0x501e <LCD_Write_Command+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff6:	6d 89       	ldd	r22, Y+21	; 0x15
    4ff8:	7e 89       	ldd	r23, Y+22	; 0x16
    4ffa:	8f 89       	ldd	r24, Y+23	; 0x17
    4ffc:	98 8d       	ldd	r25, Y+24	; 0x18
    4ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5002:	dc 01       	movw	r26, r24
    5004:	cb 01       	movw	r24, r22
    5006:	9c 8b       	std	Y+20, r25	; 0x14
    5008:	8b 8b       	std	Y+19, r24	; 0x13
    500a:	8b 89       	ldd	r24, Y+19	; 0x13
    500c:	9c 89       	ldd	r25, Y+20	; 0x14
    500e:	98 8b       	std	Y+16, r25	; 0x10
    5010:	8f 87       	std	Y+15, r24	; 0x0f
    5012:	8f 85       	ldd	r24, Y+15	; 0x0f
    5014:	98 89       	ldd	r25, Y+16	; 0x10
    5016:	01 97       	sbiw	r24, 0x01	; 1
    5018:	f1 f7       	brne	.-4      	; 0x5016 <LCD_Write_Command+0x2f2>
    501a:	98 8b       	std	Y+16, r25	; 0x10
    501c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_Clear_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    501e:	80 e0       	ldi	r24, 0x00	; 0
    5020:	62 e0       	ldi	r22, 0x02	; 2
    5022:	0e 94 32 21 	call	0x4264	; 0x4264 <DIO_Clear_Pin>
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	a0 e8       	ldi	r26, 0x80	; 128
    502c:	bf e3       	ldi	r27, 0x3F	; 63
    502e:	8b 87       	std	Y+11, r24	; 0x0b
    5030:	9c 87       	std	Y+12, r25	; 0x0c
    5032:	ad 87       	std	Y+13, r26	; 0x0d
    5034:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5036:	6b 85       	ldd	r22, Y+11	; 0x0b
    5038:	7c 85       	ldd	r23, Y+12	; 0x0c
    503a:	8d 85       	ldd	r24, Y+13	; 0x0d
    503c:	9e 85       	ldd	r25, Y+14	; 0x0e
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	30 e0       	ldi	r19, 0x00	; 0
    5042:	4a ef       	ldi	r20, 0xFA	; 250
    5044:	54 e4       	ldi	r21, 0x44	; 68
    5046:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    504a:	dc 01       	movw	r26, r24
    504c:	cb 01       	movw	r24, r22
    504e:	8f 83       	std	Y+7, r24	; 0x07
    5050:	98 87       	std	Y+8, r25	; 0x08
    5052:	a9 87       	std	Y+9, r26	; 0x09
    5054:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5056:	6f 81       	ldd	r22, Y+7	; 0x07
    5058:	78 85       	ldd	r23, Y+8	; 0x08
    505a:	89 85       	ldd	r24, Y+9	; 0x09
    505c:	9a 85       	ldd	r25, Y+10	; 0x0a
    505e:	20 e0       	ldi	r18, 0x00	; 0
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	40 e8       	ldi	r20, 0x80	; 128
    5064:	5f e3       	ldi	r21, 0x3F	; 63
    5066:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    506a:	88 23       	and	r24, r24
    506c:	2c f4       	brge	.+10     	; 0x5078 <LCD_Write_Command+0x354>
		__ticks = 1;
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	9e 83       	std	Y+6, r25	; 0x06
    5074:	8d 83       	std	Y+5, r24	; 0x05
    5076:	3f c0       	rjmp	.+126    	; 0x50f6 <LCD_Write_Command+0x3d2>
	else if (__tmp > 65535)
    5078:	6f 81       	ldd	r22, Y+7	; 0x07
    507a:	78 85       	ldd	r23, Y+8	; 0x08
    507c:	89 85       	ldd	r24, Y+9	; 0x09
    507e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	3f ef       	ldi	r19, 0xFF	; 255
    5084:	4f e7       	ldi	r20, 0x7F	; 127
    5086:	57 e4       	ldi	r21, 0x47	; 71
    5088:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    508c:	18 16       	cp	r1, r24
    508e:	4c f5       	brge	.+82     	; 0x50e2 <LCD_Write_Command+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5090:	6b 85       	ldd	r22, Y+11	; 0x0b
    5092:	7c 85       	ldd	r23, Y+12	; 0x0c
    5094:	8d 85       	ldd	r24, Y+13	; 0x0d
    5096:	9e 85       	ldd	r25, Y+14	; 0x0e
    5098:	20 e0       	ldi	r18, 0x00	; 0
    509a:	30 e0       	ldi	r19, 0x00	; 0
    509c:	40 e2       	ldi	r20, 0x20	; 32
    509e:	51 e4       	ldi	r21, 0x41	; 65
    50a0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    50a4:	dc 01       	movw	r26, r24
    50a6:	cb 01       	movw	r24, r22
    50a8:	bc 01       	movw	r22, r24
    50aa:	cd 01       	movw	r24, r26
    50ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50b0:	dc 01       	movw	r26, r24
    50b2:	cb 01       	movw	r24, r22
    50b4:	9e 83       	std	Y+6, r25	; 0x06
    50b6:	8d 83       	std	Y+5, r24	; 0x05
    50b8:	0f c0       	rjmp	.+30     	; 0x50d8 <LCD_Write_Command+0x3b4>
    50ba:	88 ec       	ldi	r24, 0xC8	; 200
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	9c 83       	std	Y+4, r25	; 0x04
    50c0:	8b 83       	std	Y+3, r24	; 0x03
    50c2:	8b 81       	ldd	r24, Y+3	; 0x03
    50c4:	9c 81       	ldd	r25, Y+4	; 0x04
    50c6:	01 97       	sbiw	r24, 0x01	; 1
    50c8:	f1 f7       	brne	.-4      	; 0x50c6 <LCD_Write_Command+0x3a2>
    50ca:	9c 83       	std	Y+4, r25	; 0x04
    50cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ce:	8d 81       	ldd	r24, Y+5	; 0x05
    50d0:	9e 81       	ldd	r25, Y+6	; 0x06
    50d2:	01 97       	sbiw	r24, 0x01	; 1
    50d4:	9e 83       	std	Y+6, r25	; 0x06
    50d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50d8:	8d 81       	ldd	r24, Y+5	; 0x05
    50da:	9e 81       	ldd	r25, Y+6	; 0x06
    50dc:	00 97       	sbiw	r24, 0x00	; 0
    50de:	69 f7       	brne	.-38     	; 0x50ba <LCD_Write_Command+0x396>
    50e0:	14 c0       	rjmp	.+40     	; 0x510a <LCD_Write_Command+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e2:	6f 81       	ldd	r22, Y+7	; 0x07
    50e4:	78 85       	ldd	r23, Y+8	; 0x08
    50e6:	89 85       	ldd	r24, Y+9	; 0x09
    50e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    50ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ee:	dc 01       	movw	r26, r24
    50f0:	cb 01       	movw	r24, r22
    50f2:	9e 83       	std	Y+6, r25	; 0x06
    50f4:	8d 83       	std	Y+5, r24	; 0x05
    50f6:	8d 81       	ldd	r24, Y+5	; 0x05
    50f8:	9e 81       	ldd	r25, Y+6	; 0x06
    50fa:	9a 83       	std	Y+2, r25	; 0x02
    50fc:	89 83       	std	Y+1, r24	; 0x01
    50fe:	89 81       	ldd	r24, Y+1	; 0x01
    5100:	9a 81       	ldd	r25, Y+2	; 0x02
    5102:	01 97       	sbiw	r24, 0x01	; 1
    5104:	f1 f7       	brne	.-4      	; 0x5102 <LCD_Write_Command+0x3de>
    5106:	9a 83       	std	Y+2, r25	; 0x02
    5108:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
}
    510a:	e9 96       	adiw	r28, 0x39	; 57
    510c:	0f b6       	in	r0, 0x3f	; 63
    510e:	f8 94       	cli
    5110:	de bf       	out	0x3e, r29	; 62
    5112:	0f be       	out	0x3f, r0	; 63
    5114:	cd bf       	out	0x3d, r28	; 61
    5116:	cf 91       	pop	r28
    5118:	df 91       	pop	r29
    511a:	08 95       	ret

0000511c <LCD_Write_Data>:

void LCD_Write_Data(u8 data)
{
    511c:	df 93       	push	r29
    511e:	cf 93       	push	r28
    5120:	cd b7       	in	r28, 0x3d	; 61
    5122:	de b7       	in	r29, 0x3e	; 62
    5124:	e9 97       	sbiw	r28, 0x39	; 57
    5126:	0f b6       	in	r0, 0x3f	; 63
    5128:	f8 94       	cli
    512a:	de bf       	out	0x3e, r29	; 62
    512c:	0f be       	out	0x3f, r0	; 63
    512e:	cd bf       	out	0x3d, r28	; 61
    5130:	89 af       	std	Y+57, r24	; 0x39
	 
	DIO_Clear_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    5132:	80 e0       	ldi	r24, 0x00	; 0
    5134:	62 e0       	ldi	r22, 0x02	; 2
    5136:	0e 94 32 21 	call	0x4264	; 0x4264 <DIO_Clear_Pin>
	DIO_Set_Pin(LCD_CTRL_PORT , LCD_RS_PIN );
    513a:	80 e0       	ldi	r24, 0x00	; 0
    513c:	63 e0       	ldi	r22, 0x03	; 3
    513e:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_Set_Pin>
	write_port(data>>4);
    5142:	89 ad       	ldd	r24, Y+57	; 0x39
    5144:	82 95       	swap	r24
    5146:	8f 70       	andi	r24, 0x0F	; 15
    5148:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <write_port>
	DIO_Set_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	62 e0       	ldi	r22, 0x02	; 2
    5150:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_Set_Pin>
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	a0 e8       	ldi	r26, 0x80	; 128
    515a:	bf e3       	ldi	r27, 0x3F	; 63
    515c:	8d ab       	std	Y+53, r24	; 0x35
    515e:	9e ab       	std	Y+54, r25	; 0x36
    5160:	af ab       	std	Y+55, r26	; 0x37
    5162:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5164:	6d a9       	ldd	r22, Y+53	; 0x35
    5166:	7e a9       	ldd	r23, Y+54	; 0x36
    5168:	8f a9       	ldd	r24, Y+55	; 0x37
    516a:	98 ad       	ldd	r25, Y+56	; 0x38
    516c:	20 e0       	ldi	r18, 0x00	; 0
    516e:	30 e0       	ldi	r19, 0x00	; 0
    5170:	4a ef       	ldi	r20, 0xFA	; 250
    5172:	54 e4       	ldi	r21, 0x44	; 68
    5174:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5178:	dc 01       	movw	r26, r24
    517a:	cb 01       	movw	r24, r22
    517c:	89 ab       	std	Y+49, r24	; 0x31
    517e:	9a ab       	std	Y+50, r25	; 0x32
    5180:	ab ab       	std	Y+51, r26	; 0x33
    5182:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5184:	69 a9       	ldd	r22, Y+49	; 0x31
    5186:	7a a9       	ldd	r23, Y+50	; 0x32
    5188:	8b a9       	ldd	r24, Y+51	; 0x33
    518a:	9c a9       	ldd	r25, Y+52	; 0x34
    518c:	20 e0       	ldi	r18, 0x00	; 0
    518e:	30 e0       	ldi	r19, 0x00	; 0
    5190:	40 e8       	ldi	r20, 0x80	; 128
    5192:	5f e3       	ldi	r21, 0x3F	; 63
    5194:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5198:	88 23       	and	r24, r24
    519a:	2c f4       	brge	.+10     	; 0x51a6 <LCD_Write_Data+0x8a>
		__ticks = 1;
    519c:	81 e0       	ldi	r24, 0x01	; 1
    519e:	90 e0       	ldi	r25, 0x00	; 0
    51a0:	98 ab       	std	Y+48, r25	; 0x30
    51a2:	8f a7       	std	Y+47, r24	; 0x2f
    51a4:	3f c0       	rjmp	.+126    	; 0x5224 <LCD_Write_Data+0x108>
	else if (__tmp > 65535)
    51a6:	69 a9       	ldd	r22, Y+49	; 0x31
    51a8:	7a a9       	ldd	r23, Y+50	; 0x32
    51aa:	8b a9       	ldd	r24, Y+51	; 0x33
    51ac:	9c a9       	ldd	r25, Y+52	; 0x34
    51ae:	20 e0       	ldi	r18, 0x00	; 0
    51b0:	3f ef       	ldi	r19, 0xFF	; 255
    51b2:	4f e7       	ldi	r20, 0x7F	; 127
    51b4:	57 e4       	ldi	r21, 0x47	; 71
    51b6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    51ba:	18 16       	cp	r1, r24
    51bc:	4c f5       	brge	.+82     	; 0x5210 <LCD_Write_Data+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51be:	6d a9       	ldd	r22, Y+53	; 0x35
    51c0:	7e a9       	ldd	r23, Y+54	; 0x36
    51c2:	8f a9       	ldd	r24, Y+55	; 0x37
    51c4:	98 ad       	ldd	r25, Y+56	; 0x38
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	40 e2       	ldi	r20, 0x20	; 32
    51cc:	51 e4       	ldi	r21, 0x41	; 65
    51ce:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    51d2:	dc 01       	movw	r26, r24
    51d4:	cb 01       	movw	r24, r22
    51d6:	bc 01       	movw	r22, r24
    51d8:	cd 01       	movw	r24, r26
    51da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51de:	dc 01       	movw	r26, r24
    51e0:	cb 01       	movw	r24, r22
    51e2:	98 ab       	std	Y+48, r25	; 0x30
    51e4:	8f a7       	std	Y+47, r24	; 0x2f
    51e6:	0f c0       	rjmp	.+30     	; 0x5206 <LCD_Write_Data+0xea>
    51e8:	88 ec       	ldi	r24, 0xC8	; 200
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	9e a7       	std	Y+46, r25	; 0x2e
    51ee:	8d a7       	std	Y+45, r24	; 0x2d
    51f0:	8d a5       	ldd	r24, Y+45	; 0x2d
    51f2:	9e a5       	ldd	r25, Y+46	; 0x2e
    51f4:	01 97       	sbiw	r24, 0x01	; 1
    51f6:	f1 f7       	brne	.-4      	; 0x51f4 <LCD_Write_Data+0xd8>
    51f8:	9e a7       	std	Y+46, r25	; 0x2e
    51fa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    51fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5200:	01 97       	sbiw	r24, 0x01	; 1
    5202:	98 ab       	std	Y+48, r25	; 0x30
    5204:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5206:	8f a5       	ldd	r24, Y+47	; 0x2f
    5208:	98 a9       	ldd	r25, Y+48	; 0x30
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	69 f7       	brne	.-38     	; 0x51e8 <LCD_Write_Data+0xcc>
    520e:	14 c0       	rjmp	.+40     	; 0x5238 <LCD_Write_Data+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5210:	69 a9       	ldd	r22, Y+49	; 0x31
    5212:	7a a9       	ldd	r23, Y+50	; 0x32
    5214:	8b a9       	ldd	r24, Y+51	; 0x33
    5216:	9c a9       	ldd	r25, Y+52	; 0x34
    5218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    521c:	dc 01       	movw	r26, r24
    521e:	cb 01       	movw	r24, r22
    5220:	98 ab       	std	Y+48, r25	; 0x30
    5222:	8f a7       	std	Y+47, r24	; 0x2f
    5224:	8f a5       	ldd	r24, Y+47	; 0x2f
    5226:	98 a9       	ldd	r25, Y+48	; 0x30
    5228:	9c a7       	std	Y+44, r25	; 0x2c
    522a:	8b a7       	std	Y+43, r24	; 0x2b
    522c:	8b a5       	ldd	r24, Y+43	; 0x2b
    522e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	f1 f7       	brne	.-4      	; 0x5230 <LCD_Write_Data+0x114>
    5234:	9c a7       	std	Y+44, r25	; 0x2c
    5236:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_Clear_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	62 e0       	ldi	r22, 0x02	; 2
    523c:	0e 94 32 21 	call	0x4264	; 0x4264 <DIO_Clear_Pin>
    5240:	80 e0       	ldi	r24, 0x00	; 0
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	a0 e8       	ldi	r26, 0x80	; 128
    5246:	bf e3       	ldi	r27, 0x3F	; 63
    5248:	8f a3       	std	Y+39, r24	; 0x27
    524a:	98 a7       	std	Y+40, r25	; 0x28
    524c:	a9 a7       	std	Y+41, r26	; 0x29
    524e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5250:	6f a1       	ldd	r22, Y+39	; 0x27
    5252:	78 a5       	ldd	r23, Y+40	; 0x28
    5254:	89 a5       	ldd	r24, Y+41	; 0x29
    5256:	9a a5       	ldd	r25, Y+42	; 0x2a
    5258:	20 e0       	ldi	r18, 0x00	; 0
    525a:	30 e0       	ldi	r19, 0x00	; 0
    525c:	4a ef       	ldi	r20, 0xFA	; 250
    525e:	54 e4       	ldi	r21, 0x44	; 68
    5260:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5264:	dc 01       	movw	r26, r24
    5266:	cb 01       	movw	r24, r22
    5268:	8b a3       	std	Y+35, r24	; 0x23
    526a:	9c a3       	std	Y+36, r25	; 0x24
    526c:	ad a3       	std	Y+37, r26	; 0x25
    526e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5270:	6b a1       	ldd	r22, Y+35	; 0x23
    5272:	7c a1       	ldd	r23, Y+36	; 0x24
    5274:	8d a1       	ldd	r24, Y+37	; 0x25
    5276:	9e a1       	ldd	r25, Y+38	; 0x26
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	40 e8       	ldi	r20, 0x80	; 128
    527e:	5f e3       	ldi	r21, 0x3F	; 63
    5280:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5284:	88 23       	and	r24, r24
    5286:	2c f4       	brge	.+10     	; 0x5292 <LCD_Write_Data+0x176>
		__ticks = 1;
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	9a a3       	std	Y+34, r25	; 0x22
    528e:	89 a3       	std	Y+33, r24	; 0x21
    5290:	3f c0       	rjmp	.+126    	; 0x5310 <LCD_Write_Data+0x1f4>
	else if (__tmp > 65535)
    5292:	6b a1       	ldd	r22, Y+35	; 0x23
    5294:	7c a1       	ldd	r23, Y+36	; 0x24
    5296:	8d a1       	ldd	r24, Y+37	; 0x25
    5298:	9e a1       	ldd	r25, Y+38	; 0x26
    529a:	20 e0       	ldi	r18, 0x00	; 0
    529c:	3f ef       	ldi	r19, 0xFF	; 255
    529e:	4f e7       	ldi	r20, 0x7F	; 127
    52a0:	57 e4       	ldi	r21, 0x47	; 71
    52a2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    52a6:	18 16       	cp	r1, r24
    52a8:	4c f5       	brge	.+82     	; 0x52fc <LCD_Write_Data+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52aa:	6f a1       	ldd	r22, Y+39	; 0x27
    52ac:	78 a5       	ldd	r23, Y+40	; 0x28
    52ae:	89 a5       	ldd	r24, Y+41	; 0x29
    52b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e2       	ldi	r20, 0x20	; 32
    52b8:	51 e4       	ldi	r21, 0x41	; 65
    52ba:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    52be:	dc 01       	movw	r26, r24
    52c0:	cb 01       	movw	r24, r22
    52c2:	bc 01       	movw	r22, r24
    52c4:	cd 01       	movw	r24, r26
    52c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ca:	dc 01       	movw	r26, r24
    52cc:	cb 01       	movw	r24, r22
    52ce:	9a a3       	std	Y+34, r25	; 0x22
    52d0:	89 a3       	std	Y+33, r24	; 0x21
    52d2:	0f c0       	rjmp	.+30     	; 0x52f2 <LCD_Write_Data+0x1d6>
    52d4:	88 ec       	ldi	r24, 0xC8	; 200
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	98 a3       	std	Y+32, r25	; 0x20
    52da:	8f 8f       	std	Y+31, r24	; 0x1f
    52dc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52de:	98 a1       	ldd	r25, Y+32	; 0x20
    52e0:	01 97       	sbiw	r24, 0x01	; 1
    52e2:	f1 f7       	brne	.-4      	; 0x52e0 <LCD_Write_Data+0x1c4>
    52e4:	98 a3       	std	Y+32, r25	; 0x20
    52e6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52e8:	89 a1       	ldd	r24, Y+33	; 0x21
    52ea:	9a a1       	ldd	r25, Y+34	; 0x22
    52ec:	01 97       	sbiw	r24, 0x01	; 1
    52ee:	9a a3       	std	Y+34, r25	; 0x22
    52f0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52f2:	89 a1       	ldd	r24, Y+33	; 0x21
    52f4:	9a a1       	ldd	r25, Y+34	; 0x22
    52f6:	00 97       	sbiw	r24, 0x00	; 0
    52f8:	69 f7       	brne	.-38     	; 0x52d4 <LCD_Write_Data+0x1b8>
    52fa:	14 c0       	rjmp	.+40     	; 0x5324 <LCD_Write_Data+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52fc:	6b a1       	ldd	r22, Y+35	; 0x23
    52fe:	7c a1       	ldd	r23, Y+36	; 0x24
    5300:	8d a1       	ldd	r24, Y+37	; 0x25
    5302:	9e a1       	ldd	r25, Y+38	; 0x26
    5304:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5308:	dc 01       	movw	r26, r24
    530a:	cb 01       	movw	r24, r22
    530c:	9a a3       	std	Y+34, r25	; 0x22
    530e:	89 a3       	std	Y+33, r24	; 0x21
    5310:	89 a1       	ldd	r24, Y+33	; 0x21
    5312:	9a a1       	ldd	r25, Y+34	; 0x22
    5314:	9e 8f       	std	Y+30, r25	; 0x1e
    5316:	8d 8f       	std	Y+29, r24	; 0x1d
    5318:	8d 8d       	ldd	r24, Y+29	; 0x1d
    531a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    531c:	01 97       	sbiw	r24, 0x01	; 1
    531e:	f1 f7       	brne	.-4      	; 0x531c <LCD_Write_Data+0x200>
    5320:	9e 8f       	std	Y+30, r25	; 0x1e
    5322:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	write_port(data);
    5324:	89 ad       	ldd	r24, Y+57	; 0x39
    5326:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <write_port>
	DIO_Set_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    532a:	80 e0       	ldi	r24, 0x00	; 0
    532c:	62 e0       	ldi	r22, 0x02	; 2
    532e:	0e 94 21 21 	call	0x4242	; 0x4242 <DIO_Set_Pin>
    5332:	80 e0       	ldi	r24, 0x00	; 0
    5334:	90 e0       	ldi	r25, 0x00	; 0
    5336:	a0 e8       	ldi	r26, 0x80	; 128
    5338:	bf e3       	ldi	r27, 0x3F	; 63
    533a:	89 8f       	std	Y+25, r24	; 0x19
    533c:	9a 8f       	std	Y+26, r25	; 0x1a
    533e:	ab 8f       	std	Y+27, r26	; 0x1b
    5340:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5342:	69 8d       	ldd	r22, Y+25	; 0x19
    5344:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5346:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5348:	9c 8d       	ldd	r25, Y+28	; 0x1c
    534a:	20 e0       	ldi	r18, 0x00	; 0
    534c:	30 e0       	ldi	r19, 0x00	; 0
    534e:	4a ef       	ldi	r20, 0xFA	; 250
    5350:	54 e4       	ldi	r21, 0x44	; 68
    5352:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5356:	dc 01       	movw	r26, r24
    5358:	cb 01       	movw	r24, r22
    535a:	8d 8b       	std	Y+21, r24	; 0x15
    535c:	9e 8b       	std	Y+22, r25	; 0x16
    535e:	af 8b       	std	Y+23, r26	; 0x17
    5360:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5362:	6d 89       	ldd	r22, Y+21	; 0x15
    5364:	7e 89       	ldd	r23, Y+22	; 0x16
    5366:	8f 89       	ldd	r24, Y+23	; 0x17
    5368:	98 8d       	ldd	r25, Y+24	; 0x18
    536a:	20 e0       	ldi	r18, 0x00	; 0
    536c:	30 e0       	ldi	r19, 0x00	; 0
    536e:	40 e8       	ldi	r20, 0x80	; 128
    5370:	5f e3       	ldi	r21, 0x3F	; 63
    5372:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5376:	88 23       	and	r24, r24
    5378:	2c f4       	brge	.+10     	; 0x5384 <LCD_Write_Data+0x268>
		__ticks = 1;
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	90 e0       	ldi	r25, 0x00	; 0
    537e:	9c 8b       	std	Y+20, r25	; 0x14
    5380:	8b 8b       	std	Y+19, r24	; 0x13
    5382:	3f c0       	rjmp	.+126    	; 0x5402 <LCD_Write_Data+0x2e6>
	else if (__tmp > 65535)
    5384:	6d 89       	ldd	r22, Y+21	; 0x15
    5386:	7e 89       	ldd	r23, Y+22	; 0x16
    5388:	8f 89       	ldd	r24, Y+23	; 0x17
    538a:	98 8d       	ldd	r25, Y+24	; 0x18
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	3f ef       	ldi	r19, 0xFF	; 255
    5390:	4f e7       	ldi	r20, 0x7F	; 127
    5392:	57 e4       	ldi	r21, 0x47	; 71
    5394:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5398:	18 16       	cp	r1, r24
    539a:	4c f5       	brge	.+82     	; 0x53ee <LCD_Write_Data+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    539c:	69 8d       	ldd	r22, Y+25	; 0x19
    539e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53a4:	20 e0       	ldi	r18, 0x00	; 0
    53a6:	30 e0       	ldi	r19, 0x00	; 0
    53a8:	40 e2       	ldi	r20, 0x20	; 32
    53aa:	51 e4       	ldi	r21, 0x41	; 65
    53ac:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    53b0:	dc 01       	movw	r26, r24
    53b2:	cb 01       	movw	r24, r22
    53b4:	bc 01       	movw	r22, r24
    53b6:	cd 01       	movw	r24, r26
    53b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53bc:	dc 01       	movw	r26, r24
    53be:	cb 01       	movw	r24, r22
    53c0:	9c 8b       	std	Y+20, r25	; 0x14
    53c2:	8b 8b       	std	Y+19, r24	; 0x13
    53c4:	0f c0       	rjmp	.+30     	; 0x53e4 <LCD_Write_Data+0x2c8>
    53c6:	88 ec       	ldi	r24, 0xC8	; 200
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	9a 8b       	std	Y+18, r25	; 0x12
    53cc:	89 8b       	std	Y+17, r24	; 0x11
    53ce:	89 89       	ldd	r24, Y+17	; 0x11
    53d0:	9a 89       	ldd	r25, Y+18	; 0x12
    53d2:	01 97       	sbiw	r24, 0x01	; 1
    53d4:	f1 f7       	brne	.-4      	; 0x53d2 <LCD_Write_Data+0x2b6>
    53d6:	9a 8b       	std	Y+18, r25	; 0x12
    53d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53da:	8b 89       	ldd	r24, Y+19	; 0x13
    53dc:	9c 89       	ldd	r25, Y+20	; 0x14
    53de:	01 97       	sbiw	r24, 0x01	; 1
    53e0:	9c 8b       	std	Y+20, r25	; 0x14
    53e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53e4:	8b 89       	ldd	r24, Y+19	; 0x13
    53e6:	9c 89       	ldd	r25, Y+20	; 0x14
    53e8:	00 97       	sbiw	r24, 0x00	; 0
    53ea:	69 f7       	brne	.-38     	; 0x53c6 <LCD_Write_Data+0x2aa>
    53ec:	14 c0       	rjmp	.+40     	; 0x5416 <LCD_Write_Data+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53ee:	6d 89       	ldd	r22, Y+21	; 0x15
    53f0:	7e 89       	ldd	r23, Y+22	; 0x16
    53f2:	8f 89       	ldd	r24, Y+23	; 0x17
    53f4:	98 8d       	ldd	r25, Y+24	; 0x18
    53f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fa:	dc 01       	movw	r26, r24
    53fc:	cb 01       	movw	r24, r22
    53fe:	9c 8b       	std	Y+20, r25	; 0x14
    5400:	8b 8b       	std	Y+19, r24	; 0x13
    5402:	8b 89       	ldd	r24, Y+19	; 0x13
    5404:	9c 89       	ldd	r25, Y+20	; 0x14
    5406:	98 8b       	std	Y+16, r25	; 0x10
    5408:	8f 87       	std	Y+15, r24	; 0x0f
    540a:	8f 85       	ldd	r24, Y+15	; 0x0f
    540c:	98 89       	ldd	r25, Y+16	; 0x10
    540e:	01 97       	sbiw	r24, 0x01	; 1
    5410:	f1 f7       	brne	.-4      	; 0x540e <LCD_Write_Data+0x2f2>
    5412:	98 8b       	std	Y+16, r25	; 0x10
    5414:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_Clear_Pin(LCD_CTRL_PORT , LCD_EN_PIN );
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	62 e0       	ldi	r22, 0x02	; 2
    541a:	0e 94 32 21 	call	0x4264	; 0x4264 <DIO_Clear_Pin>
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	a0 e8       	ldi	r26, 0x80	; 128
    5424:	bf e3       	ldi	r27, 0x3F	; 63
    5426:	8b 87       	std	Y+11, r24	; 0x0b
    5428:	9c 87       	std	Y+12, r25	; 0x0c
    542a:	ad 87       	std	Y+13, r26	; 0x0d
    542c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    542e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5430:	7c 85       	ldd	r23, Y+12	; 0x0c
    5432:	8d 85       	ldd	r24, Y+13	; 0x0d
    5434:	9e 85       	ldd	r25, Y+14	; 0x0e
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	30 e0       	ldi	r19, 0x00	; 0
    543a:	4a ef       	ldi	r20, 0xFA	; 250
    543c:	54 e4       	ldi	r21, 0x44	; 68
    543e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	8f 83       	std	Y+7, r24	; 0x07
    5448:	98 87       	std	Y+8, r25	; 0x08
    544a:	a9 87       	std	Y+9, r26	; 0x09
    544c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    544e:	6f 81       	ldd	r22, Y+7	; 0x07
    5450:	78 85       	ldd	r23, Y+8	; 0x08
    5452:	89 85       	ldd	r24, Y+9	; 0x09
    5454:	9a 85       	ldd	r25, Y+10	; 0x0a
    5456:	20 e0       	ldi	r18, 0x00	; 0
    5458:	30 e0       	ldi	r19, 0x00	; 0
    545a:	40 e8       	ldi	r20, 0x80	; 128
    545c:	5f e3       	ldi	r21, 0x3F	; 63
    545e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5462:	88 23       	and	r24, r24
    5464:	2c f4       	brge	.+10     	; 0x5470 <LCD_Write_Data+0x354>
		__ticks = 1;
    5466:	81 e0       	ldi	r24, 0x01	; 1
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	9e 83       	std	Y+6, r25	; 0x06
    546c:	8d 83       	std	Y+5, r24	; 0x05
    546e:	3f c0       	rjmp	.+126    	; 0x54ee <LCD_Write_Data+0x3d2>
	else if (__tmp > 65535)
    5470:	6f 81       	ldd	r22, Y+7	; 0x07
    5472:	78 85       	ldd	r23, Y+8	; 0x08
    5474:	89 85       	ldd	r24, Y+9	; 0x09
    5476:	9a 85       	ldd	r25, Y+10	; 0x0a
    5478:	20 e0       	ldi	r18, 0x00	; 0
    547a:	3f ef       	ldi	r19, 0xFF	; 255
    547c:	4f e7       	ldi	r20, 0x7F	; 127
    547e:	57 e4       	ldi	r21, 0x47	; 71
    5480:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5484:	18 16       	cp	r1, r24
    5486:	4c f5       	brge	.+82     	; 0x54da <LCD_Write_Data+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5488:	6b 85       	ldd	r22, Y+11	; 0x0b
    548a:	7c 85       	ldd	r23, Y+12	; 0x0c
    548c:	8d 85       	ldd	r24, Y+13	; 0x0d
    548e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5490:	20 e0       	ldi	r18, 0x00	; 0
    5492:	30 e0       	ldi	r19, 0x00	; 0
    5494:	40 e2       	ldi	r20, 0x20	; 32
    5496:	51 e4       	ldi	r21, 0x41	; 65
    5498:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    549c:	dc 01       	movw	r26, r24
    549e:	cb 01       	movw	r24, r22
    54a0:	bc 01       	movw	r22, r24
    54a2:	cd 01       	movw	r24, r26
    54a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a8:	dc 01       	movw	r26, r24
    54aa:	cb 01       	movw	r24, r22
    54ac:	9e 83       	std	Y+6, r25	; 0x06
    54ae:	8d 83       	std	Y+5, r24	; 0x05
    54b0:	0f c0       	rjmp	.+30     	; 0x54d0 <LCD_Write_Data+0x3b4>
    54b2:	88 ec       	ldi	r24, 0xC8	; 200
    54b4:	90 e0       	ldi	r25, 0x00	; 0
    54b6:	9c 83       	std	Y+4, r25	; 0x04
    54b8:	8b 83       	std	Y+3, r24	; 0x03
    54ba:	8b 81       	ldd	r24, Y+3	; 0x03
    54bc:	9c 81       	ldd	r25, Y+4	; 0x04
    54be:	01 97       	sbiw	r24, 0x01	; 1
    54c0:	f1 f7       	brne	.-4      	; 0x54be <LCD_Write_Data+0x3a2>
    54c2:	9c 83       	std	Y+4, r25	; 0x04
    54c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    54c6:	8d 81       	ldd	r24, Y+5	; 0x05
    54c8:	9e 81       	ldd	r25, Y+6	; 0x06
    54ca:	01 97       	sbiw	r24, 0x01	; 1
    54cc:	9e 83       	std	Y+6, r25	; 0x06
    54ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54d0:	8d 81       	ldd	r24, Y+5	; 0x05
    54d2:	9e 81       	ldd	r25, Y+6	; 0x06
    54d4:	00 97       	sbiw	r24, 0x00	; 0
    54d6:	69 f7       	brne	.-38     	; 0x54b2 <LCD_Write_Data+0x396>
    54d8:	14 c0       	rjmp	.+40     	; 0x5502 <LCD_Write_Data+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54da:	6f 81       	ldd	r22, Y+7	; 0x07
    54dc:	78 85       	ldd	r23, Y+8	; 0x08
    54de:	89 85       	ldd	r24, Y+9	; 0x09
    54e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    54e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54e6:	dc 01       	movw	r26, r24
    54e8:	cb 01       	movw	r24, r22
    54ea:	9e 83       	std	Y+6, r25	; 0x06
    54ec:	8d 83       	std	Y+5, r24	; 0x05
    54ee:	8d 81       	ldd	r24, Y+5	; 0x05
    54f0:	9e 81       	ldd	r25, Y+6	; 0x06
    54f2:	9a 83       	std	Y+2, r25	; 0x02
    54f4:	89 83       	std	Y+1, r24	; 0x01
    54f6:	89 81       	ldd	r24, Y+1	; 0x01
    54f8:	9a 81       	ldd	r25, Y+2	; 0x02
    54fa:	01 97       	sbiw	r24, 0x01	; 1
    54fc:	f1 f7       	brne	.-4      	; 0x54fa <LCD_Write_Data+0x3de>
    54fe:	9a 83       	std	Y+2, r25	; 0x02
    5500:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	
}
    5502:	e9 96       	adiw	r28, 0x39	; 57
    5504:	0f b6       	in	r0, 0x3f	; 63
    5506:	f8 94       	cli
    5508:	de bf       	out	0x3e, r29	; 62
    550a:	0f be       	out	0x3f, r0	; 63
    550c:	cd bf       	out	0x3d, r28	; 61
    550e:	cf 91       	pop	r28
    5510:	df 91       	pop	r29
    5512:	08 95       	ret

00005514 <LCD_Init>:

void LCD_Init()
{
    5514:	0f 93       	push	r16
    5516:	1f 93       	push	r17
    5518:	df 93       	push	r29
    551a:	cf 93       	push	r28
    551c:	cd b7       	in	r28, 0x3d	; 61
    551e:	de b7       	in	r29, 0x3e	; 62
    5520:	c6 54       	subi	r28, 0x46	; 70
    5522:	d0 40       	sbci	r29, 0x00	; 0
    5524:	0f b6       	in	r0, 0x3f	; 63
    5526:	f8 94       	cli
    5528:	de bf       	out	0x3e, r29	; 62
    552a:	0f be       	out	0x3f, r0	; 63
    552c:	cd bf       	out	0x3d, r28	; 61
	DIO_Set_Pin_Direction(LCD_DATA_PORT , LCD_DATA_PIN0 , OUTPUT);
    552e:	81 e0       	ldi	r24, 0x01	; 1
    5530:	60 e0       	ldi	r22, 0x00	; 0
    5532:	40 e0       	ldi	r20, 0x00	; 0
    5534:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_DATA_PORT , LCD_DATA_PIN1 , OUTPUT);
    5538:	81 e0       	ldi	r24, 0x01	; 1
    553a:	61 e0       	ldi	r22, 0x01	; 1
    553c:	40 e0       	ldi	r20, 0x00	; 0
    553e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_DATA_PORT , LCD_DATA_PIN2 , OUTPUT);
    5542:	81 e0       	ldi	r24, 0x01	; 1
    5544:	62 e0       	ldi	r22, 0x02	; 2
    5546:	40 e0       	ldi	r20, 0x00	; 0
    5548:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_DATA_PORT , LCD_DATA_PIN3 , OUTPUT);
    554c:	81 e0       	ldi	r24, 0x01	; 1
    554e:	64 e0       	ldi	r22, 0x04	; 4
    5550:	40 e0       	ldi	r20, 0x00	; 0
    5552:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	
	DIO_Set_Pin_Direction(LCD_CTRL_PORT , LCD_RS_PIN , OUTPUT);
    5556:	80 e0       	ldi	r24, 0x00	; 0
    5558:	63 e0       	ldi	r22, 0x03	; 3
    555a:	40 e0       	ldi	r20, 0x00	; 0
    555c:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(LCD_CTRL_PORT , LCD_EN_PIN , OUTPUT);
    5560:	80 e0       	ldi	r24, 0x00	; 0
    5562:	62 e0       	ldi	r22, 0x02	; 2
    5564:	40 e0       	ldi	r20, 0x00	; 0
    5566:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
    556a:	fe 01       	movw	r30, r28
    556c:	ed 5b       	subi	r30, 0xBD	; 189
    556e:	ff 4f       	sbci	r31, 0xFF	; 255
    5570:	80 e0       	ldi	r24, 0x00	; 0
    5572:	90 e0       	ldi	r25, 0x00	; 0
    5574:	a8 e4       	ldi	r26, 0x48	; 72
    5576:	b2 e4       	ldi	r27, 0x42	; 66
    5578:	80 83       	st	Z, r24
    557a:	91 83       	std	Z+1, r25	; 0x01
    557c:	a2 83       	std	Z+2, r26	; 0x02
    557e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5580:	8e 01       	movw	r16, r28
    5582:	01 5c       	subi	r16, 0xC1	; 193
    5584:	1f 4f       	sbci	r17, 0xFF	; 255
    5586:	fe 01       	movw	r30, r28
    5588:	ed 5b       	subi	r30, 0xBD	; 189
    558a:	ff 4f       	sbci	r31, 0xFF	; 255
    558c:	60 81       	ld	r22, Z
    558e:	71 81       	ldd	r23, Z+1	; 0x01
    5590:	82 81       	ldd	r24, Z+2	; 0x02
    5592:	93 81       	ldd	r25, Z+3	; 0x03
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	30 e0       	ldi	r19, 0x00	; 0
    5598:	4a ef       	ldi	r20, 0xFA	; 250
    559a:	54 e4       	ldi	r21, 0x44	; 68
    559c:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    55a0:	dc 01       	movw	r26, r24
    55a2:	cb 01       	movw	r24, r22
    55a4:	f8 01       	movw	r30, r16
    55a6:	80 83       	st	Z, r24
    55a8:	91 83       	std	Z+1, r25	; 0x01
    55aa:	a2 83       	std	Z+2, r26	; 0x02
    55ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55ae:	fe 01       	movw	r30, r28
    55b0:	ff 96       	adiw	r30, 0x3f	; 63
    55b2:	60 81       	ld	r22, Z
    55b4:	71 81       	ldd	r23, Z+1	; 0x01
    55b6:	82 81       	ldd	r24, Z+2	; 0x02
    55b8:	93 81       	ldd	r25, Z+3	; 0x03
    55ba:	20 e0       	ldi	r18, 0x00	; 0
    55bc:	30 e0       	ldi	r19, 0x00	; 0
    55be:	40 e8       	ldi	r20, 0x80	; 128
    55c0:	5f e3       	ldi	r21, 0x3F	; 63
    55c2:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    55c6:	88 23       	and	r24, r24
    55c8:	2c f4       	brge	.+10     	; 0x55d4 <LCD_Init+0xc0>
		__ticks = 1;
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	9e af       	std	Y+62, r25	; 0x3e
    55d0:	8d af       	std	Y+61, r24	; 0x3d
    55d2:	46 c0       	rjmp	.+140    	; 0x5660 <LCD_Init+0x14c>
	else if (__tmp > 65535)
    55d4:	fe 01       	movw	r30, r28
    55d6:	ff 96       	adiw	r30, 0x3f	; 63
    55d8:	60 81       	ld	r22, Z
    55da:	71 81       	ldd	r23, Z+1	; 0x01
    55dc:	82 81       	ldd	r24, Z+2	; 0x02
    55de:	93 81       	ldd	r25, Z+3	; 0x03
    55e0:	20 e0       	ldi	r18, 0x00	; 0
    55e2:	3f ef       	ldi	r19, 0xFF	; 255
    55e4:	4f e7       	ldi	r20, 0x7F	; 127
    55e6:	57 e4       	ldi	r21, 0x47	; 71
    55e8:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    55ec:	18 16       	cp	r1, r24
    55ee:	64 f5       	brge	.+88     	; 0x5648 <LCD_Init+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f0:	fe 01       	movw	r30, r28
    55f2:	ed 5b       	subi	r30, 0xBD	; 189
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	60 81       	ld	r22, Z
    55f8:	71 81       	ldd	r23, Z+1	; 0x01
    55fa:	82 81       	ldd	r24, Z+2	; 0x02
    55fc:	93 81       	ldd	r25, Z+3	; 0x03
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	30 e0       	ldi	r19, 0x00	; 0
    5602:	40 e2       	ldi	r20, 0x20	; 32
    5604:	51 e4       	ldi	r21, 0x41	; 65
    5606:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    560a:	dc 01       	movw	r26, r24
    560c:	cb 01       	movw	r24, r22
    560e:	bc 01       	movw	r22, r24
    5610:	cd 01       	movw	r24, r26
    5612:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5616:	dc 01       	movw	r26, r24
    5618:	cb 01       	movw	r24, r22
    561a:	9e af       	std	Y+62, r25	; 0x3e
    561c:	8d af       	std	Y+61, r24	; 0x3d
    561e:	0f c0       	rjmp	.+30     	; 0x563e <LCD_Init+0x12a>
    5620:	88 ec       	ldi	r24, 0xC8	; 200
    5622:	90 e0       	ldi	r25, 0x00	; 0
    5624:	9c af       	std	Y+60, r25	; 0x3c
    5626:	8b af       	std	Y+59, r24	; 0x3b
    5628:	8b ad       	ldd	r24, Y+59	; 0x3b
    562a:	9c ad       	ldd	r25, Y+60	; 0x3c
    562c:	01 97       	sbiw	r24, 0x01	; 1
    562e:	f1 f7       	brne	.-4      	; 0x562c <LCD_Init+0x118>
    5630:	9c af       	std	Y+60, r25	; 0x3c
    5632:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5634:	8d ad       	ldd	r24, Y+61	; 0x3d
    5636:	9e ad       	ldd	r25, Y+62	; 0x3e
    5638:	01 97       	sbiw	r24, 0x01	; 1
    563a:	9e af       	std	Y+62, r25	; 0x3e
    563c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    563e:	8d ad       	ldd	r24, Y+61	; 0x3d
    5640:	9e ad       	ldd	r25, Y+62	; 0x3e
    5642:	00 97       	sbiw	r24, 0x00	; 0
    5644:	69 f7       	brne	.-38     	; 0x5620 <LCD_Init+0x10c>
    5646:	16 c0       	rjmp	.+44     	; 0x5674 <LCD_Init+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5648:	fe 01       	movw	r30, r28
    564a:	ff 96       	adiw	r30, 0x3f	; 63
    564c:	60 81       	ld	r22, Z
    564e:	71 81       	ldd	r23, Z+1	; 0x01
    5650:	82 81       	ldd	r24, Z+2	; 0x02
    5652:	93 81       	ldd	r25, Z+3	; 0x03
    5654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5658:	dc 01       	movw	r26, r24
    565a:	cb 01       	movw	r24, r22
    565c:	9e af       	std	Y+62, r25	; 0x3e
    565e:	8d af       	std	Y+61, r24	; 0x3d
    5660:	8d ad       	ldd	r24, Y+61	; 0x3d
    5662:	9e ad       	ldd	r25, Y+62	; 0x3e
    5664:	9a af       	std	Y+58, r25	; 0x3a
    5666:	89 af       	std	Y+57, r24	; 0x39
    5668:	89 ad       	ldd	r24, Y+57	; 0x39
    566a:	9a ad       	ldd	r25, Y+58	; 0x3a
    566c:	01 97       	sbiw	r24, 0x01	; 1
    566e:	f1 f7       	brne	.-4      	; 0x566c <LCD_Init+0x158>
    5670:	9a af       	std	Y+58, r25	; 0x3a
    5672:	89 af       	std	Y+57, r24	; 0x39
	
	
	_delay_ms(50);
	LCD_Write_Command(0x02);
    5674:	82 e0       	ldi	r24, 0x02	; 2
    5676:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
	LCD_Write_Command(0x28); 
    567a:	88 e2       	ldi	r24, 0x28	; 40
    567c:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    5680:	80 e0       	ldi	r24, 0x00	; 0
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	a0 e8       	ldi	r26, 0x80	; 128
    5686:	bf e3       	ldi	r27, 0x3F	; 63
    5688:	8d ab       	std	Y+53, r24	; 0x35
    568a:	9e ab       	std	Y+54, r25	; 0x36
    568c:	af ab       	std	Y+55, r26	; 0x37
    568e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5690:	6d a9       	ldd	r22, Y+53	; 0x35
    5692:	7e a9       	ldd	r23, Y+54	; 0x36
    5694:	8f a9       	ldd	r24, Y+55	; 0x37
    5696:	98 ad       	ldd	r25, Y+56	; 0x38
    5698:	20 e0       	ldi	r18, 0x00	; 0
    569a:	30 e0       	ldi	r19, 0x00	; 0
    569c:	4a ef       	ldi	r20, 0xFA	; 250
    569e:	54 e4       	ldi	r21, 0x44	; 68
    56a0:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    56a4:	dc 01       	movw	r26, r24
    56a6:	cb 01       	movw	r24, r22
    56a8:	89 ab       	std	Y+49, r24	; 0x31
    56aa:	9a ab       	std	Y+50, r25	; 0x32
    56ac:	ab ab       	std	Y+51, r26	; 0x33
    56ae:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    56b0:	69 a9       	ldd	r22, Y+49	; 0x31
    56b2:	7a a9       	ldd	r23, Y+50	; 0x32
    56b4:	8b a9       	ldd	r24, Y+51	; 0x33
    56b6:	9c a9       	ldd	r25, Y+52	; 0x34
    56b8:	20 e0       	ldi	r18, 0x00	; 0
    56ba:	30 e0       	ldi	r19, 0x00	; 0
    56bc:	40 e8       	ldi	r20, 0x80	; 128
    56be:	5f e3       	ldi	r21, 0x3F	; 63
    56c0:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    56c4:	88 23       	and	r24, r24
    56c6:	2c f4       	brge	.+10     	; 0x56d2 <LCD_Init+0x1be>
		__ticks = 1;
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	90 e0       	ldi	r25, 0x00	; 0
    56cc:	98 ab       	std	Y+48, r25	; 0x30
    56ce:	8f a7       	std	Y+47, r24	; 0x2f
    56d0:	3f c0       	rjmp	.+126    	; 0x5750 <LCD_Init+0x23c>
	else if (__tmp > 65535)
    56d2:	69 a9       	ldd	r22, Y+49	; 0x31
    56d4:	7a a9       	ldd	r23, Y+50	; 0x32
    56d6:	8b a9       	ldd	r24, Y+51	; 0x33
    56d8:	9c a9       	ldd	r25, Y+52	; 0x34
    56da:	20 e0       	ldi	r18, 0x00	; 0
    56dc:	3f ef       	ldi	r19, 0xFF	; 255
    56de:	4f e7       	ldi	r20, 0x7F	; 127
    56e0:	57 e4       	ldi	r21, 0x47	; 71
    56e2:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    56e6:	18 16       	cp	r1, r24
    56e8:	4c f5       	brge	.+82     	; 0x573c <LCD_Init+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ea:	6d a9       	ldd	r22, Y+53	; 0x35
    56ec:	7e a9       	ldd	r23, Y+54	; 0x36
    56ee:	8f a9       	ldd	r24, Y+55	; 0x37
    56f0:	98 ad       	ldd	r25, Y+56	; 0x38
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	30 e0       	ldi	r19, 0x00	; 0
    56f6:	40 e2       	ldi	r20, 0x20	; 32
    56f8:	51 e4       	ldi	r21, 0x41	; 65
    56fa:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    56fe:	dc 01       	movw	r26, r24
    5700:	cb 01       	movw	r24, r22
    5702:	bc 01       	movw	r22, r24
    5704:	cd 01       	movw	r24, r26
    5706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    570a:	dc 01       	movw	r26, r24
    570c:	cb 01       	movw	r24, r22
    570e:	98 ab       	std	Y+48, r25	; 0x30
    5710:	8f a7       	std	Y+47, r24	; 0x2f
    5712:	0f c0       	rjmp	.+30     	; 0x5732 <LCD_Init+0x21e>
    5714:	88 ec       	ldi	r24, 0xC8	; 200
    5716:	90 e0       	ldi	r25, 0x00	; 0
    5718:	9e a7       	std	Y+46, r25	; 0x2e
    571a:	8d a7       	std	Y+45, r24	; 0x2d
    571c:	8d a5       	ldd	r24, Y+45	; 0x2d
    571e:	9e a5       	ldd	r25, Y+46	; 0x2e
    5720:	01 97       	sbiw	r24, 0x01	; 1
    5722:	f1 f7       	brne	.-4      	; 0x5720 <LCD_Init+0x20c>
    5724:	9e a7       	std	Y+46, r25	; 0x2e
    5726:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5728:	8f a5       	ldd	r24, Y+47	; 0x2f
    572a:	98 a9       	ldd	r25, Y+48	; 0x30
    572c:	01 97       	sbiw	r24, 0x01	; 1
    572e:	98 ab       	std	Y+48, r25	; 0x30
    5730:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5732:	8f a5       	ldd	r24, Y+47	; 0x2f
    5734:	98 a9       	ldd	r25, Y+48	; 0x30
    5736:	00 97       	sbiw	r24, 0x00	; 0
    5738:	69 f7       	brne	.-38     	; 0x5714 <LCD_Init+0x200>
    573a:	14 c0       	rjmp	.+40     	; 0x5764 <LCD_Init+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    573c:	69 a9       	ldd	r22, Y+49	; 0x31
    573e:	7a a9       	ldd	r23, Y+50	; 0x32
    5740:	8b a9       	ldd	r24, Y+51	; 0x33
    5742:	9c a9       	ldd	r25, Y+52	; 0x34
    5744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5748:	dc 01       	movw	r26, r24
    574a:	cb 01       	movw	r24, r22
    574c:	98 ab       	std	Y+48, r25	; 0x30
    574e:	8f a7       	std	Y+47, r24	; 0x2f
    5750:	8f a5       	ldd	r24, Y+47	; 0x2f
    5752:	98 a9       	ldd	r25, Y+48	; 0x30
    5754:	9c a7       	std	Y+44, r25	; 0x2c
    5756:	8b a7       	std	Y+43, r24	; 0x2b
    5758:	8b a5       	ldd	r24, Y+43	; 0x2b
    575a:	9c a5       	ldd	r25, Y+44	; 0x2c
    575c:	01 97       	sbiw	r24, 0x01	; 1
    575e:	f1 f7       	brne	.-4      	; 0x575c <LCD_Init+0x248>
    5760:	9c a7       	std	Y+44, r25	; 0x2c
    5762:	8b a7       	std	Y+43, r24	; 0x2b
	
	
	
	_delay_ms(1);
	LCD_Write_Command(0x0c); 
    5764:	8c e0       	ldi	r24, 0x0C	; 12
    5766:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	a0 e8       	ldi	r26, 0x80	; 128
    5770:	bf e3       	ldi	r27, 0x3F	; 63
    5772:	8f a3       	std	Y+39, r24	; 0x27
    5774:	98 a7       	std	Y+40, r25	; 0x28
    5776:	a9 a7       	std	Y+41, r26	; 0x29
    5778:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    577a:	6f a1       	ldd	r22, Y+39	; 0x27
    577c:	78 a5       	ldd	r23, Y+40	; 0x28
    577e:	89 a5       	ldd	r24, Y+41	; 0x29
    5780:	9a a5       	ldd	r25, Y+42	; 0x2a
    5782:	20 e0       	ldi	r18, 0x00	; 0
    5784:	30 e0       	ldi	r19, 0x00	; 0
    5786:	4a ef       	ldi	r20, 0xFA	; 250
    5788:	54 e4       	ldi	r21, 0x44	; 68
    578a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    578e:	dc 01       	movw	r26, r24
    5790:	cb 01       	movw	r24, r22
    5792:	8b a3       	std	Y+35, r24	; 0x23
    5794:	9c a3       	std	Y+36, r25	; 0x24
    5796:	ad a3       	std	Y+37, r26	; 0x25
    5798:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    579a:	6b a1       	ldd	r22, Y+35	; 0x23
    579c:	7c a1       	ldd	r23, Y+36	; 0x24
    579e:	8d a1       	ldd	r24, Y+37	; 0x25
    57a0:	9e a1       	ldd	r25, Y+38	; 0x26
    57a2:	20 e0       	ldi	r18, 0x00	; 0
    57a4:	30 e0       	ldi	r19, 0x00	; 0
    57a6:	40 e8       	ldi	r20, 0x80	; 128
    57a8:	5f e3       	ldi	r21, 0x3F	; 63
    57aa:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    57ae:	88 23       	and	r24, r24
    57b0:	2c f4       	brge	.+10     	; 0x57bc <LCD_Init+0x2a8>
		__ticks = 1;
    57b2:	81 e0       	ldi	r24, 0x01	; 1
    57b4:	90 e0       	ldi	r25, 0x00	; 0
    57b6:	9a a3       	std	Y+34, r25	; 0x22
    57b8:	89 a3       	std	Y+33, r24	; 0x21
    57ba:	3f c0       	rjmp	.+126    	; 0x583a <LCD_Init+0x326>
	else if (__tmp > 65535)
    57bc:	6b a1       	ldd	r22, Y+35	; 0x23
    57be:	7c a1       	ldd	r23, Y+36	; 0x24
    57c0:	8d a1       	ldd	r24, Y+37	; 0x25
    57c2:	9e a1       	ldd	r25, Y+38	; 0x26
    57c4:	20 e0       	ldi	r18, 0x00	; 0
    57c6:	3f ef       	ldi	r19, 0xFF	; 255
    57c8:	4f e7       	ldi	r20, 0x7F	; 127
    57ca:	57 e4       	ldi	r21, 0x47	; 71
    57cc:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    57d0:	18 16       	cp	r1, r24
    57d2:	4c f5       	brge	.+82     	; 0x5826 <LCD_Init+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57d4:	6f a1       	ldd	r22, Y+39	; 0x27
    57d6:	78 a5       	ldd	r23, Y+40	; 0x28
    57d8:	89 a5       	ldd	r24, Y+41	; 0x29
    57da:	9a a5       	ldd	r25, Y+42	; 0x2a
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	40 e2       	ldi	r20, 0x20	; 32
    57e2:	51 e4       	ldi	r21, 0x41	; 65
    57e4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	bc 01       	movw	r22, r24
    57ee:	cd 01       	movw	r24, r26
    57f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57f4:	dc 01       	movw	r26, r24
    57f6:	cb 01       	movw	r24, r22
    57f8:	9a a3       	std	Y+34, r25	; 0x22
    57fa:	89 a3       	std	Y+33, r24	; 0x21
    57fc:	0f c0       	rjmp	.+30     	; 0x581c <LCD_Init+0x308>
    57fe:	88 ec       	ldi	r24, 0xC8	; 200
    5800:	90 e0       	ldi	r25, 0x00	; 0
    5802:	98 a3       	std	Y+32, r25	; 0x20
    5804:	8f 8f       	std	Y+31, r24	; 0x1f
    5806:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5808:	98 a1       	ldd	r25, Y+32	; 0x20
    580a:	01 97       	sbiw	r24, 0x01	; 1
    580c:	f1 f7       	brne	.-4      	; 0x580a <LCD_Init+0x2f6>
    580e:	98 a3       	std	Y+32, r25	; 0x20
    5810:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5812:	89 a1       	ldd	r24, Y+33	; 0x21
    5814:	9a a1       	ldd	r25, Y+34	; 0x22
    5816:	01 97       	sbiw	r24, 0x01	; 1
    5818:	9a a3       	std	Y+34, r25	; 0x22
    581a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    581c:	89 a1       	ldd	r24, Y+33	; 0x21
    581e:	9a a1       	ldd	r25, Y+34	; 0x22
    5820:	00 97       	sbiw	r24, 0x00	; 0
    5822:	69 f7       	brne	.-38     	; 0x57fe <LCD_Init+0x2ea>
    5824:	14 c0       	rjmp	.+40     	; 0x584e <LCD_Init+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5826:	6b a1       	ldd	r22, Y+35	; 0x23
    5828:	7c a1       	ldd	r23, Y+36	; 0x24
    582a:	8d a1       	ldd	r24, Y+37	; 0x25
    582c:	9e a1       	ldd	r25, Y+38	; 0x26
    582e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5832:	dc 01       	movw	r26, r24
    5834:	cb 01       	movw	r24, r22
    5836:	9a a3       	std	Y+34, r25	; 0x22
    5838:	89 a3       	std	Y+33, r24	; 0x21
    583a:	89 a1       	ldd	r24, Y+33	; 0x21
    583c:	9a a1       	ldd	r25, Y+34	; 0x22
    583e:	9e 8f       	std	Y+30, r25	; 0x1e
    5840:	8d 8f       	std	Y+29, r24	; 0x1d
    5842:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5844:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5846:	01 97       	sbiw	r24, 0x01	; 1
    5848:	f1 f7       	brne	.-4      	; 0x5846 <LCD_Init+0x332>
    584a:	9e 8f       	std	Y+30, r25	; 0x1e
    584c:	8d 8f       	std	Y+29, r24	; 0x1d
	
	_delay_ms(1);
	
	LCD_Write_Command(0x01);
    584e:	81 e0       	ldi	r24, 0x01	; 1
    5850:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    5854:	80 e0       	ldi	r24, 0x00	; 0
    5856:	90 e0       	ldi	r25, 0x00	; 0
    5858:	a0 e0       	ldi	r26, 0x00	; 0
    585a:	b0 e4       	ldi	r27, 0x40	; 64
    585c:	89 8f       	std	Y+25, r24	; 0x19
    585e:	9a 8f       	std	Y+26, r25	; 0x1a
    5860:	ab 8f       	std	Y+27, r26	; 0x1b
    5862:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5864:	69 8d       	ldd	r22, Y+25	; 0x19
    5866:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5868:	8b 8d       	ldd	r24, Y+27	; 0x1b
    586a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    586c:	20 e0       	ldi	r18, 0x00	; 0
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	4a ef       	ldi	r20, 0xFA	; 250
    5872:	54 e4       	ldi	r21, 0x44	; 68
    5874:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5878:	dc 01       	movw	r26, r24
    587a:	cb 01       	movw	r24, r22
    587c:	8d 8b       	std	Y+21, r24	; 0x15
    587e:	9e 8b       	std	Y+22, r25	; 0x16
    5880:	af 8b       	std	Y+23, r26	; 0x17
    5882:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5884:	6d 89       	ldd	r22, Y+21	; 0x15
    5886:	7e 89       	ldd	r23, Y+22	; 0x16
    5888:	8f 89       	ldd	r24, Y+23	; 0x17
    588a:	98 8d       	ldd	r25, Y+24	; 0x18
    588c:	20 e0       	ldi	r18, 0x00	; 0
    588e:	30 e0       	ldi	r19, 0x00	; 0
    5890:	40 e8       	ldi	r20, 0x80	; 128
    5892:	5f e3       	ldi	r21, 0x3F	; 63
    5894:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5898:	88 23       	and	r24, r24
    589a:	2c f4       	brge	.+10     	; 0x58a6 <LCD_Init+0x392>
		__ticks = 1;
    589c:	81 e0       	ldi	r24, 0x01	; 1
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	9c 8b       	std	Y+20, r25	; 0x14
    58a2:	8b 8b       	std	Y+19, r24	; 0x13
    58a4:	3f c0       	rjmp	.+126    	; 0x5924 <LCD_Init+0x410>
	else if (__tmp > 65535)
    58a6:	6d 89       	ldd	r22, Y+21	; 0x15
    58a8:	7e 89       	ldd	r23, Y+22	; 0x16
    58aa:	8f 89       	ldd	r24, Y+23	; 0x17
    58ac:	98 8d       	ldd	r25, Y+24	; 0x18
    58ae:	20 e0       	ldi	r18, 0x00	; 0
    58b0:	3f ef       	ldi	r19, 0xFF	; 255
    58b2:	4f e7       	ldi	r20, 0x7F	; 127
    58b4:	57 e4       	ldi	r21, 0x47	; 71
    58b6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    58ba:	18 16       	cp	r1, r24
    58bc:	4c f5       	brge	.+82     	; 0x5910 <LCD_Init+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58be:	69 8d       	ldd	r22, Y+25	; 0x19
    58c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    58c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58c6:	20 e0       	ldi	r18, 0x00	; 0
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	40 e2       	ldi	r20, 0x20	; 32
    58cc:	51 e4       	ldi	r21, 0x41	; 65
    58ce:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    58d2:	dc 01       	movw	r26, r24
    58d4:	cb 01       	movw	r24, r22
    58d6:	bc 01       	movw	r22, r24
    58d8:	cd 01       	movw	r24, r26
    58da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58de:	dc 01       	movw	r26, r24
    58e0:	cb 01       	movw	r24, r22
    58e2:	9c 8b       	std	Y+20, r25	; 0x14
    58e4:	8b 8b       	std	Y+19, r24	; 0x13
    58e6:	0f c0       	rjmp	.+30     	; 0x5906 <LCD_Init+0x3f2>
    58e8:	88 ec       	ldi	r24, 0xC8	; 200
    58ea:	90 e0       	ldi	r25, 0x00	; 0
    58ec:	9a 8b       	std	Y+18, r25	; 0x12
    58ee:	89 8b       	std	Y+17, r24	; 0x11
    58f0:	89 89       	ldd	r24, Y+17	; 0x11
    58f2:	9a 89       	ldd	r25, Y+18	; 0x12
    58f4:	01 97       	sbiw	r24, 0x01	; 1
    58f6:	f1 f7       	brne	.-4      	; 0x58f4 <LCD_Init+0x3e0>
    58f8:	9a 8b       	std	Y+18, r25	; 0x12
    58fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58fc:	8b 89       	ldd	r24, Y+19	; 0x13
    58fe:	9c 89       	ldd	r25, Y+20	; 0x14
    5900:	01 97       	sbiw	r24, 0x01	; 1
    5902:	9c 8b       	std	Y+20, r25	; 0x14
    5904:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5906:	8b 89       	ldd	r24, Y+19	; 0x13
    5908:	9c 89       	ldd	r25, Y+20	; 0x14
    590a:	00 97       	sbiw	r24, 0x00	; 0
    590c:	69 f7       	brne	.-38     	; 0x58e8 <LCD_Init+0x3d4>
    590e:	14 c0       	rjmp	.+40     	; 0x5938 <LCD_Init+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5910:	6d 89       	ldd	r22, Y+21	; 0x15
    5912:	7e 89       	ldd	r23, Y+22	; 0x16
    5914:	8f 89       	ldd	r24, Y+23	; 0x17
    5916:	98 8d       	ldd	r25, Y+24	; 0x18
    5918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    591c:	dc 01       	movw	r26, r24
    591e:	cb 01       	movw	r24, r22
    5920:	9c 8b       	std	Y+20, r25	; 0x14
    5922:	8b 8b       	std	Y+19, r24	; 0x13
    5924:	8b 89       	ldd	r24, Y+19	; 0x13
    5926:	9c 89       	ldd	r25, Y+20	; 0x14
    5928:	98 8b       	std	Y+16, r25	; 0x10
    592a:	8f 87       	std	Y+15, r24	; 0x0f
    592c:	8f 85       	ldd	r24, Y+15	; 0x0f
    592e:	98 89       	ldd	r25, Y+16	; 0x10
    5930:	01 97       	sbiw	r24, 0x01	; 1
    5932:	f1 f7       	brne	.-4      	; 0x5930 <LCD_Init+0x41c>
    5934:	98 8b       	std	Y+16, r25	; 0x10
    5936:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	
	LCD_Write_Command(0x06);
    5938:	86 e0       	ldi	r24, 0x06	; 6
    593a:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    593e:	80 e0       	ldi	r24, 0x00	; 0
    5940:	90 e0       	ldi	r25, 0x00	; 0
    5942:	a0 e8       	ldi	r26, 0x80	; 128
    5944:	bf e3       	ldi	r27, 0x3F	; 63
    5946:	8b 87       	std	Y+11, r24	; 0x0b
    5948:	9c 87       	std	Y+12, r25	; 0x0c
    594a:	ad 87       	std	Y+13, r26	; 0x0d
    594c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    594e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5950:	7c 85       	ldd	r23, Y+12	; 0x0c
    5952:	8d 85       	ldd	r24, Y+13	; 0x0d
    5954:	9e 85       	ldd	r25, Y+14	; 0x0e
    5956:	20 e0       	ldi	r18, 0x00	; 0
    5958:	30 e0       	ldi	r19, 0x00	; 0
    595a:	4a ef       	ldi	r20, 0xFA	; 250
    595c:	54 e4       	ldi	r21, 0x44	; 68
    595e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5962:	dc 01       	movw	r26, r24
    5964:	cb 01       	movw	r24, r22
    5966:	8f 83       	std	Y+7, r24	; 0x07
    5968:	98 87       	std	Y+8, r25	; 0x08
    596a:	a9 87       	std	Y+9, r26	; 0x09
    596c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    596e:	6f 81       	ldd	r22, Y+7	; 0x07
    5970:	78 85       	ldd	r23, Y+8	; 0x08
    5972:	89 85       	ldd	r24, Y+9	; 0x09
    5974:	9a 85       	ldd	r25, Y+10	; 0x0a
    5976:	20 e0       	ldi	r18, 0x00	; 0
    5978:	30 e0       	ldi	r19, 0x00	; 0
    597a:	40 e8       	ldi	r20, 0x80	; 128
    597c:	5f e3       	ldi	r21, 0x3F	; 63
    597e:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5982:	88 23       	and	r24, r24
    5984:	2c f4       	brge	.+10     	; 0x5990 <LCD_Init+0x47c>
		__ticks = 1;
    5986:	81 e0       	ldi	r24, 0x01	; 1
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	9e 83       	std	Y+6, r25	; 0x06
    598c:	8d 83       	std	Y+5, r24	; 0x05
    598e:	3f c0       	rjmp	.+126    	; 0x5a0e <LCD_Init+0x4fa>
	else if (__tmp > 65535)
    5990:	6f 81       	ldd	r22, Y+7	; 0x07
    5992:	78 85       	ldd	r23, Y+8	; 0x08
    5994:	89 85       	ldd	r24, Y+9	; 0x09
    5996:	9a 85       	ldd	r25, Y+10	; 0x0a
    5998:	20 e0       	ldi	r18, 0x00	; 0
    599a:	3f ef       	ldi	r19, 0xFF	; 255
    599c:	4f e7       	ldi	r20, 0x7F	; 127
    599e:	57 e4       	ldi	r21, 0x47	; 71
    59a0:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    59a4:	18 16       	cp	r1, r24
    59a6:	4c f5       	brge	.+82     	; 0x59fa <LCD_Init+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    59aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    59ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    59ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    59b0:	20 e0       	ldi	r18, 0x00	; 0
    59b2:	30 e0       	ldi	r19, 0x00	; 0
    59b4:	40 e2       	ldi	r20, 0x20	; 32
    59b6:	51 e4       	ldi	r21, 0x41	; 65
    59b8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    59bc:	dc 01       	movw	r26, r24
    59be:	cb 01       	movw	r24, r22
    59c0:	bc 01       	movw	r22, r24
    59c2:	cd 01       	movw	r24, r26
    59c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c8:	dc 01       	movw	r26, r24
    59ca:	cb 01       	movw	r24, r22
    59cc:	9e 83       	std	Y+6, r25	; 0x06
    59ce:	8d 83       	std	Y+5, r24	; 0x05
    59d0:	0f c0       	rjmp	.+30     	; 0x59f0 <LCD_Init+0x4dc>
    59d2:	88 ec       	ldi	r24, 0xC8	; 200
    59d4:	90 e0       	ldi	r25, 0x00	; 0
    59d6:	9c 83       	std	Y+4, r25	; 0x04
    59d8:	8b 83       	std	Y+3, r24	; 0x03
    59da:	8b 81       	ldd	r24, Y+3	; 0x03
    59dc:	9c 81       	ldd	r25, Y+4	; 0x04
    59de:	01 97       	sbiw	r24, 0x01	; 1
    59e0:	f1 f7       	brne	.-4      	; 0x59de <LCD_Init+0x4ca>
    59e2:	9c 83       	std	Y+4, r25	; 0x04
    59e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59e6:	8d 81       	ldd	r24, Y+5	; 0x05
    59e8:	9e 81       	ldd	r25, Y+6	; 0x06
    59ea:	01 97       	sbiw	r24, 0x01	; 1
    59ec:	9e 83       	std	Y+6, r25	; 0x06
    59ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59f0:	8d 81       	ldd	r24, Y+5	; 0x05
    59f2:	9e 81       	ldd	r25, Y+6	; 0x06
    59f4:	00 97       	sbiw	r24, 0x00	; 0
    59f6:	69 f7       	brne	.-38     	; 0x59d2 <LCD_Init+0x4be>
    59f8:	14 c0       	rjmp	.+40     	; 0x5a22 <LCD_Init+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59fa:	6f 81       	ldd	r22, Y+7	; 0x07
    59fc:	78 85       	ldd	r23, Y+8	; 0x08
    59fe:	89 85       	ldd	r24, Y+9	; 0x09
    5a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a06:	dc 01       	movw	r26, r24
    5a08:	cb 01       	movw	r24, r22
    5a0a:	9e 83       	std	Y+6, r25	; 0x06
    5a0c:	8d 83       	std	Y+5, r24	; 0x05
    5a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    5a10:	9e 81       	ldd	r25, Y+6	; 0x06
    5a12:	9a 83       	std	Y+2, r25	; 0x02
    5a14:	89 83       	std	Y+1, r24	; 0x01
    5a16:	89 81       	ldd	r24, Y+1	; 0x01
    5a18:	9a 81       	ldd	r25, Y+2	; 0x02
    5a1a:	01 97       	sbiw	r24, 0x01	; 1
    5a1c:	f1 f7       	brne	.-4      	; 0x5a1a <LCD_Init+0x506>
    5a1e:	9a 83       	std	Y+2, r25	; 0x02
    5a20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
		
}
    5a22:	ca 5b       	subi	r28, 0xBA	; 186
    5a24:	df 4f       	sbci	r29, 0xFF	; 255
    5a26:	0f b6       	in	r0, 0x3f	; 63
    5a28:	f8 94       	cli
    5a2a:	de bf       	out	0x3e, r29	; 62
    5a2c:	0f be       	out	0x3f, r0	; 63
    5a2e:	cd bf       	out	0x3d, r28	; 61
    5a30:	cf 91       	pop	r28
    5a32:	df 91       	pop	r29
    5a34:	1f 91       	pop	r17
    5a36:	0f 91       	pop	r16
    5a38:	08 95       	ret

00005a3a <LCD_Clear>:

void LCD_Clear ( void )
{
    5a3a:	df 93       	push	r29
    5a3c:	cf 93       	push	r28
    5a3e:	cd b7       	in	r28, 0x3d	; 61
    5a40:	de b7       	in	r29, 0x3e	; 62
    5a42:	2e 97       	sbiw	r28, 0x0e	; 14
    5a44:	0f b6       	in	r0, 0x3f	; 63
    5a46:	f8 94       	cli
    5a48:	de bf       	out	0x3e, r29	; 62
    5a4a:	0f be       	out	0x3f, r0	; 63
    5a4c:	cd bf       	out	0x3d, r28	; 61
	LCD_Write_Command(0x01);
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    5a54:	80 e0       	ldi	r24, 0x00	; 0
    5a56:	90 e0       	ldi	r25, 0x00	; 0
    5a58:	a0 e0       	ldi	r26, 0x00	; 0
    5a5a:	b0 e4       	ldi	r27, 0x40	; 64
    5a5c:	8b 87       	std	Y+11, r24	; 0x0b
    5a5e:	9c 87       	std	Y+12, r25	; 0x0c
    5a60:	ad 87       	std	Y+13, r26	; 0x0d
    5a62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a64:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a66:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a68:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a6c:	20 e0       	ldi	r18, 0x00	; 0
    5a6e:	30 e0       	ldi	r19, 0x00	; 0
    5a70:	4a ef       	ldi	r20, 0xFA	; 250
    5a72:	54 e4       	ldi	r21, 0x44	; 68
    5a74:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5a78:	dc 01       	movw	r26, r24
    5a7a:	cb 01       	movw	r24, r22
    5a7c:	8f 83       	std	Y+7, r24	; 0x07
    5a7e:	98 87       	std	Y+8, r25	; 0x08
    5a80:	a9 87       	std	Y+9, r26	; 0x09
    5a82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a84:	6f 81       	ldd	r22, Y+7	; 0x07
    5a86:	78 85       	ldd	r23, Y+8	; 0x08
    5a88:	89 85       	ldd	r24, Y+9	; 0x09
    5a8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a8c:	20 e0       	ldi	r18, 0x00	; 0
    5a8e:	30 e0       	ldi	r19, 0x00	; 0
    5a90:	40 e8       	ldi	r20, 0x80	; 128
    5a92:	5f e3       	ldi	r21, 0x3F	; 63
    5a94:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    5a98:	88 23       	and	r24, r24
    5a9a:	2c f4       	brge	.+10     	; 0x5aa6 <LCD_Clear+0x6c>
		__ticks = 1;
    5a9c:	81 e0       	ldi	r24, 0x01	; 1
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	9e 83       	std	Y+6, r25	; 0x06
    5aa2:	8d 83       	std	Y+5, r24	; 0x05
    5aa4:	3f c0       	rjmp	.+126    	; 0x5b24 <LCD_Clear+0xea>
	else if (__tmp > 65535)
    5aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    5aa8:	78 85       	ldd	r23, Y+8	; 0x08
    5aaa:	89 85       	ldd	r24, Y+9	; 0x09
    5aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5aae:	20 e0       	ldi	r18, 0x00	; 0
    5ab0:	3f ef       	ldi	r19, 0xFF	; 255
    5ab2:	4f e7       	ldi	r20, 0x7F	; 127
    5ab4:	57 e4       	ldi	r21, 0x47	; 71
    5ab6:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    5aba:	18 16       	cp	r1, r24
    5abc:	4c f5       	brge	.+82     	; 0x5b10 <LCD_Clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5abe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ac0:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ac2:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ac4:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	40 e2       	ldi	r20, 0x20	; 32
    5acc:	51 e4       	ldi	r21, 0x41	; 65
    5ace:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    5ad2:	dc 01       	movw	r26, r24
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	bc 01       	movw	r22, r24
    5ad8:	cd 01       	movw	r24, r26
    5ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ade:	dc 01       	movw	r26, r24
    5ae0:	cb 01       	movw	r24, r22
    5ae2:	9e 83       	std	Y+6, r25	; 0x06
    5ae4:	8d 83       	std	Y+5, r24	; 0x05
    5ae6:	0f c0       	rjmp	.+30     	; 0x5b06 <LCD_Clear+0xcc>
    5ae8:	88 ec       	ldi	r24, 0xC8	; 200
    5aea:	90 e0       	ldi	r25, 0x00	; 0
    5aec:	9c 83       	std	Y+4, r25	; 0x04
    5aee:	8b 83       	std	Y+3, r24	; 0x03
    5af0:	8b 81       	ldd	r24, Y+3	; 0x03
    5af2:	9c 81       	ldd	r25, Y+4	; 0x04
    5af4:	01 97       	sbiw	r24, 0x01	; 1
    5af6:	f1 f7       	brne	.-4      	; 0x5af4 <LCD_Clear+0xba>
    5af8:	9c 83       	std	Y+4, r25	; 0x04
    5afa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5afc:	8d 81       	ldd	r24, Y+5	; 0x05
    5afe:	9e 81       	ldd	r25, Y+6	; 0x06
    5b00:	01 97       	sbiw	r24, 0x01	; 1
    5b02:	9e 83       	std	Y+6, r25	; 0x06
    5b04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b06:	8d 81       	ldd	r24, Y+5	; 0x05
    5b08:	9e 81       	ldd	r25, Y+6	; 0x06
    5b0a:	00 97       	sbiw	r24, 0x00	; 0
    5b0c:	69 f7       	brne	.-38     	; 0x5ae8 <LCD_Clear+0xae>
    5b0e:	14 c0       	rjmp	.+40     	; 0x5b38 <LCD_Clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b10:	6f 81       	ldd	r22, Y+7	; 0x07
    5b12:	78 85       	ldd	r23, Y+8	; 0x08
    5b14:	89 85       	ldd	r24, Y+9	; 0x09
    5b16:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b1c:	dc 01       	movw	r26, r24
    5b1e:	cb 01       	movw	r24, r22
    5b20:	9e 83       	std	Y+6, r25	; 0x06
    5b22:	8d 83       	std	Y+5, r24	; 0x05
    5b24:	8d 81       	ldd	r24, Y+5	; 0x05
    5b26:	9e 81       	ldd	r25, Y+6	; 0x06
    5b28:	9a 83       	std	Y+2, r25	; 0x02
    5b2a:	89 83       	std	Y+1, r24	; 0x01
    5b2c:	89 81       	ldd	r24, Y+1	; 0x01
    5b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b30:	01 97       	sbiw	r24, 0x01	; 1
    5b32:	f1 f7       	brne	.-4      	; 0x5b30 <LCD_Clear+0xf6>
    5b34:	9a 83       	std	Y+2, r25	; 0x02
    5b36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    5b38:	2e 96       	adiw	r28, 0x0e	; 14
    5b3a:	0f b6       	in	r0, 0x3f	; 63
    5b3c:	f8 94       	cli
    5b3e:	de bf       	out	0x3e, r29	; 62
    5b40:	0f be       	out	0x3f, r0	; 63
    5b42:	cd bf       	out	0x3d, r28	; 61
    5b44:	cf 91       	pop	r28
    5b46:	df 91       	pop	r29
    5b48:	08 95       	ret

00005b4a <LCD_Goto>:
}*/

static u8 counter = 0 ;

void LCD_Goto ( u8 row , u8 index )
{
    5b4a:	df 93       	push	r29
    5b4c:	cf 93       	push	r28
    5b4e:	00 d0       	rcall	.+0      	; 0x5b50 <LCD_Goto+0x6>
    5b50:	00 d0       	rcall	.+0      	; 0x5b52 <LCD_Goto+0x8>
    5b52:	cd b7       	in	r28, 0x3d	; 61
    5b54:	de b7       	in	r29, 0x3e	; 62
    5b56:	89 83       	std	Y+1, r24	; 0x01
    5b58:	6a 83       	std	Y+2, r22	; 0x02
	switch ( row )
    5b5a:	89 81       	ldd	r24, Y+1	; 0x01
    5b5c:	28 2f       	mov	r18, r24
    5b5e:	30 e0       	ldi	r19, 0x00	; 0
    5b60:	3c 83       	std	Y+4, r19	; 0x04
    5b62:	2b 83       	std	Y+3, r18	; 0x03
    5b64:	8b 81       	ldd	r24, Y+3	; 0x03
    5b66:	9c 81       	ldd	r25, Y+4	; 0x04
    5b68:	81 30       	cpi	r24, 0x01	; 1
    5b6a:	91 05       	cpc	r25, r1
    5b6c:	d1 f0       	breq	.+52     	; 0x5ba2 <LCD_Goto+0x58>
    5b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    5b70:	3c 81       	ldd	r19, Y+4	; 0x04
    5b72:	22 30       	cpi	r18, 0x02	; 2
    5b74:	31 05       	cpc	r19, r1
    5b76:	2c f4       	brge	.+10     	; 0x5b82 <LCD_Goto+0x38>
    5b78:	8b 81       	ldd	r24, Y+3	; 0x03
    5b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    5b7c:	00 97       	sbiw	r24, 0x00	; 0
    5b7e:	61 f0       	breq	.+24     	; 0x5b98 <LCD_Goto+0x4e>
    5b80:	1e c0       	rjmp	.+60     	; 0x5bbe <LCD_Goto+0x74>
    5b82:	2b 81       	ldd	r18, Y+3	; 0x03
    5b84:	3c 81       	ldd	r19, Y+4	; 0x04
    5b86:	22 30       	cpi	r18, 0x02	; 2
    5b88:	31 05       	cpc	r19, r1
    5b8a:	81 f0       	breq	.+32     	; 0x5bac <LCD_Goto+0x62>
    5b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    5b90:	83 30       	cpi	r24, 0x03	; 3
    5b92:	91 05       	cpc	r25, r1
    5b94:	81 f0       	breq	.+32     	; 0x5bb6 <LCD_Goto+0x6c>
    5b96:	13 c0       	rjmp	.+38     	; 0x5bbe <LCD_Goto+0x74>
	{
		case 0 :
		LCD_Write_Command(0x80+0x00+ index);
    5b98:	8a 81       	ldd	r24, Y+2	; 0x02
    5b9a:	80 58       	subi	r24, 0x80	; 128
    5b9c:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    5ba0:	0e c0       	rjmp	.+28     	; 0x5bbe <LCD_Goto+0x74>
		break ;
		case 1 :
		LCD_Write_Command(0x80+0x40+ index);
    5ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba4:	80 54       	subi	r24, 0x40	; 64
    5ba6:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    5baa:	09 c0       	rjmp	.+18     	; 0x5bbe <LCD_Goto+0x74>
		break ;
		case 2 :
		LCD_Write_Command(0x80+0x14+ index);
    5bac:	8a 81       	ldd	r24, Y+2	; 0x02
    5bae:	8c 56       	subi	r24, 0x6C	; 108
    5bb0:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
    5bb4:	04 c0       	rjmp	.+8      	; 0x5bbe <LCD_Goto+0x74>
		break ;
		case 3 :
		LCD_Write_Command(0x80+0x54+ index);
    5bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    5bb8:	8c 52       	subi	r24, 0x2C	; 44
    5bba:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
		break ;
	}
	counter = row*20 + index ;
    5bbe:	89 81       	ldd	r24, Y+1	; 0x01
    5bc0:	88 2f       	mov	r24, r24
    5bc2:	90 e0       	ldi	r25, 0x00	; 0
    5bc4:	9c 01       	movw	r18, r24
    5bc6:	22 0f       	add	r18, r18
    5bc8:	33 1f       	adc	r19, r19
    5bca:	22 0f       	add	r18, r18
    5bcc:	33 1f       	adc	r19, r19
    5bce:	c9 01       	movw	r24, r18
    5bd0:	88 0f       	add	r24, r24
    5bd2:	99 1f       	adc	r25, r25
    5bd4:	88 0f       	add	r24, r24
    5bd6:	99 1f       	adc	r25, r25
    5bd8:	82 0f       	add	r24, r18
    5bda:	93 1f       	adc	r25, r19
    5bdc:	98 2f       	mov	r25, r24
    5bde:	8a 81       	ldd	r24, Y+2	; 0x02
    5be0:	89 0f       	add	r24, r25
    5be2:	80 93 6b 02 	sts	0x026B, r24
}
    5be6:	0f 90       	pop	r0
    5be8:	0f 90       	pop	r0
    5bea:	0f 90       	pop	r0
    5bec:	0f 90       	pop	r0
    5bee:	cf 91       	pop	r28
    5bf0:	df 91       	pop	r29
    5bf2:	08 95       	ret

00005bf4 <LCD_Write_string>:



void LCD_Write_string(char*str)
{
    5bf4:	df 93       	push	r29
    5bf6:	cf 93       	push	r28
    5bf8:	00 d0       	rcall	.+0      	; 0x5bfa <LCD_Write_string+0x6>
    5bfa:	00 d0       	rcall	.+0      	; 0x5bfc <LCD_Write_string+0x8>
    5bfc:	cd b7       	in	r28, 0x3d	; 61
    5bfe:	de b7       	in	r29, 0x3e	; 62
    5c00:	9c 83       	std	Y+4, r25	; 0x04
    5c02:	8b 83       	std	Y+3, r24	; 0x03
	//static u8 counter = 0;
	
	for(int i=0 ; str[i] ; i++)
    5c04:	1a 82       	std	Y+2, r1	; 0x02
    5c06:	19 82       	std	Y+1, r1	; 0x01
    5c08:	0f c0       	rjmp	.+30     	; 0x5c28 <LCD_Write_string+0x34>
	{
		
		LCD_Write_Char(str[i]);
    5c0a:	29 81       	ldd	r18, Y+1	; 0x01
    5c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    5c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    5c10:	9c 81       	ldd	r25, Y+4	; 0x04
    5c12:	fc 01       	movw	r30, r24
    5c14:	e2 0f       	add	r30, r18
    5c16:	f3 1f       	adc	r31, r19
    5c18:	80 81       	ld	r24, Z
    5c1a:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>

void LCD_Write_string(char*str)
{
	//static u8 counter = 0;
	
	for(int i=0 ; str[i] ; i++)
    5c1e:	89 81       	ldd	r24, Y+1	; 0x01
    5c20:	9a 81       	ldd	r25, Y+2	; 0x02
    5c22:	01 96       	adiw	r24, 0x01	; 1
    5c24:	9a 83       	std	Y+2, r25	; 0x02
    5c26:	89 83       	std	Y+1, r24	; 0x01
    5c28:	29 81       	ldd	r18, Y+1	; 0x01
    5c2a:	3a 81       	ldd	r19, Y+2	; 0x02
    5c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c30:	fc 01       	movw	r30, r24
    5c32:	e2 0f       	add	r30, r18
    5c34:	f3 1f       	adc	r31, r19
    5c36:	80 81       	ld	r24, Z
    5c38:	88 23       	and	r24, r24
    5c3a:	39 f7       	brne	.-50     	; 0x5c0a <LCD_Write_string+0x16>
	{
		
		LCD_Write_Char(str[i]);
	}
	
}
    5c3c:	0f 90       	pop	r0
    5c3e:	0f 90       	pop	r0
    5c40:	0f 90       	pop	r0
    5c42:	0f 90       	pop	r0
    5c44:	cf 91       	pop	r28
    5c46:	df 91       	pop	r29
    5c48:	08 95       	ret

00005c4a <LCD_Write_Num>:

void LCD_Write_Num(s64 num)
{
    5c4a:	8f 92       	push	r8
    5c4c:	9f 92       	push	r9
    5c4e:	af 92       	push	r10
    5c50:	bf 92       	push	r11
    5c52:	cf 92       	push	r12
    5c54:	df 92       	push	r13
    5c56:	ef 92       	push	r14
    5c58:	ff 92       	push	r15
    5c5a:	0f 93       	push	r16
    5c5c:	1f 93       	push	r17
    5c5e:	df 93       	push	r29
    5c60:	cf 93       	push	r28
    5c62:	cd b7       	in	r28, 0x3d	; 61
    5c64:	de b7       	in	r29, 0x3e	; 62
    5c66:	c3 54       	subi	r28, 0x43	; 67
    5c68:	d0 40       	sbci	r29, 0x00	; 0
    5c6a:	0f b6       	in	r0, 0x3f	; 63
    5c6c:	f8 94       	cli
    5c6e:	de bf       	out	0x3e, r29	; 62
    5c70:	0f be       	out	0x3f, r0	; 63
    5c72:	cd bf       	out	0x3d, r28	; 61
    5c74:	28 8b       	std	Y+16, r18	; 0x10
    5c76:	39 8b       	std	Y+17, r19	; 0x11
    5c78:	4a 8b       	std	Y+18, r20	; 0x12
    5c7a:	5b 8b       	std	Y+19, r21	; 0x13
    5c7c:	6c 8b       	std	Y+20, r22	; 0x14
    5c7e:	7d 8b       	std	Y+21, r23	; 0x15
    5c80:	8e 8b       	std	Y+22, r24	; 0x16
    5c82:	9f 8b       	std	Y+23, r25	; 0x17
	char str[12] = {0};
    5c84:	8c e0       	ldi	r24, 0x0C	; 12
    5c86:	fe 01       	movw	r30, r28
    5c88:	34 96       	adiw	r30, 0x04	; 4
    5c8a:	df 01       	movw	r26, r30
    5c8c:	98 2f       	mov	r25, r24
    5c8e:	1d 92       	st	X+, r1
    5c90:	9a 95       	dec	r25
    5c92:	e9 f7       	brne	.-6      	; 0x5c8e <LCD_Write_Num+0x44>
	u8 i = 0;
    5c94:	1b 82       	std	Y+3, r1	; 0x03
	if ( num < 0 )
    5c96:	8f 89       	ldd	r24, Y+23	; 0x17
    5c98:	88 23       	and	r24, r24
    5c9a:	d4 f0       	brlt	.+52     	; 0x5cd0 <LCD_Write_Num+0x86>
    5c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    5c9e:	88 23       	and	r24, r24
    5ca0:	09 f0       	breq	.+2      	; 0x5ca4 <LCD_Write_Num+0x5a>
    5ca2:	18 c1       	rjmp	.+560    	; 0x5ed4 <LCD_Write_Num+0x28a>
    5ca4:	8e 89       	ldd	r24, Y+22	; 0x16
    5ca6:	88 23       	and	r24, r24
    5ca8:	09 f0       	breq	.+2      	; 0x5cac <LCD_Write_Num+0x62>
    5caa:	14 c1       	rjmp	.+552    	; 0x5ed4 <LCD_Write_Num+0x28a>
    5cac:	8d 89       	ldd	r24, Y+21	; 0x15
    5cae:	88 23       	and	r24, r24
    5cb0:	09 f0       	breq	.+2      	; 0x5cb4 <LCD_Write_Num+0x6a>
    5cb2:	10 c1       	rjmp	.+544    	; 0x5ed4 <LCD_Write_Num+0x28a>
    5cb4:	8c 89       	ldd	r24, Y+20	; 0x14
    5cb6:	88 23       	and	r24, r24
    5cb8:	09 f0       	breq	.+2      	; 0x5cbc <LCD_Write_Num+0x72>
    5cba:	0c c1       	rjmp	.+536    	; 0x5ed4 <LCD_Write_Num+0x28a>
    5cbc:	8b 89       	ldd	r24, Y+19	; 0x13
    5cbe:	88 23       	and	r24, r24
    5cc0:	09 f0       	breq	.+2      	; 0x5cc4 <LCD_Write_Num+0x7a>
    5cc2:	08 c1       	rjmp	.+528    	; 0x5ed4 <LCD_Write_Num+0x28a>
    5cc4:	8a 89       	ldd	r24, Y+18	; 0x12
    5cc6:	88 23       	and	r24, r24
    5cc8:	09 f0       	breq	.+2      	; 0x5ccc <LCD_Write_Num+0x82>
    5cca:	04 c1       	rjmp	.+520    	; 0x5ed4 <LCD_Write_Num+0x28a>
    5ccc:	a9 89       	ldd	r26, Y+17	; 0x11
    5cce:	02 c1       	rjmp	.+516    	; 0x5ed4 <LCD_Write_Num+0x28a>
	{
		LCD_Write_Data('-');
    5cd0:	8d e2       	ldi	r24, 0x2D	; 45
    5cd2:	0e 94 8e 28 	call	0x511c	; 0x511c <LCD_Write_Data>
		num = num * -1 ;
    5cd6:	19 8e       	std	Y+25, r1	; 0x19
    5cd8:	1a 8e       	std	Y+26, r1	; 0x1a
    5cda:	1b 8e       	std	Y+27, r1	; 0x1b
    5cdc:	1c 8e       	std	Y+28, r1	; 0x1c
    5cde:	1d 8e       	std	Y+29, r1	; 0x1d
    5ce0:	1e 8e       	std	Y+30, r1	; 0x1e
    5ce2:	1f 8e       	std	Y+31, r1	; 0x1f
    5ce4:	18 a2       	std	Y+32, r1	; 0x20
    5ce6:	b8 89       	ldd	r27, Y+16	; 0x10
    5ce8:	b9 a3       	std	Y+33, r27	; 0x21
    5cea:	89 89       	ldd	r24, Y+17	; 0x11
    5cec:	8a a3       	std	Y+34, r24	; 0x22
    5cee:	9a 89       	ldd	r25, Y+18	; 0x12
    5cf0:	9b a3       	std	Y+35, r25	; 0x23
    5cf2:	ab 89       	ldd	r26, Y+19	; 0x13
    5cf4:	ac a3       	std	Y+36, r26	; 0x24
    5cf6:	bc 89       	ldd	r27, Y+20	; 0x14
    5cf8:	bd a3       	std	Y+37, r27	; 0x25
    5cfa:	8d 89       	ldd	r24, Y+21	; 0x15
    5cfc:	8e a3       	std	Y+38, r24	; 0x26
    5cfe:	9e 89       	ldd	r25, Y+22	; 0x16
    5d00:	9f a3       	std	Y+39, r25	; 0x27
    5d02:	af 89       	ldd	r26, Y+23	; 0x17
    5d04:	a8 a7       	std	Y+40, r26	; 0x28
    5d06:	b9 8d       	ldd	r27, Y+25	; 0x19
    5d08:	89 a1       	ldd	r24, Y+33	; 0x21
    5d0a:	b8 1b       	sub	r27, r24
    5d0c:	b9 a7       	std	Y+41, r27	; 0x29
    5d0e:	91 e0       	ldi	r25, 0x01	; 1
    5d10:	99 ab       	std	Y+49, r25	; 0x31
    5d12:	a9 a5       	ldd	r26, Y+41	; 0x29
    5d14:	b9 8d       	ldd	r27, Y+25	; 0x19
    5d16:	ba 17       	cp	r27, r26
    5d18:	08 f0       	brcs	.+2      	; 0x5d1c <LCD_Write_Num+0xd2>
    5d1a:	19 aa       	std	Y+49, r1	; 0x31
    5d1c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5d1e:	9a a1       	ldd	r25, Y+34	; 0x22
    5d20:	89 1b       	sub	r24, r25
    5d22:	8a a7       	std	Y+42, r24	; 0x2a
    5d24:	a1 e0       	ldi	r26, 0x01	; 1
    5d26:	aa ab       	std	Y+50, r26	; 0x32
    5d28:	ba a5       	ldd	r27, Y+42	; 0x2a
    5d2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5d2c:	8b 17       	cp	r24, r27
    5d2e:	08 f0       	brcs	.+2      	; 0x5d32 <LCD_Write_Num+0xe8>
    5d30:	1a aa       	std	Y+50, r1	; 0x32
    5d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d34:	a9 a9       	ldd	r26, Y+49	; 0x31
    5d36:	9a 1b       	sub	r25, r26
    5d38:	9b ab       	std	Y+51, r25	; 0x33
    5d3a:	b1 e0       	ldi	r27, 0x01	; 1
    5d3c:	bc ab       	std	Y+52, r27	; 0x34
    5d3e:	8b a9       	ldd	r24, Y+51	; 0x33
    5d40:	9a a5       	ldd	r25, Y+42	; 0x2a
    5d42:	98 17       	cp	r25, r24
    5d44:	08 f0       	brcs	.+2      	; 0x5d48 <LCD_Write_Num+0xfe>
    5d46:	1c aa       	std	Y+52, r1	; 0x34
    5d48:	aa a9       	ldd	r26, Y+50	; 0x32
    5d4a:	bc a9       	ldd	r27, Y+52	; 0x34
    5d4c:	ab 2b       	or	r26, r27
    5d4e:	aa ab       	std	Y+50, r26	; 0x32
    5d50:	8b a9       	ldd	r24, Y+51	; 0x33
    5d52:	8a a7       	std	Y+42, r24	; 0x2a
    5d54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5d56:	ab a1       	ldd	r26, Y+35	; 0x23
    5d58:	9a 1b       	sub	r25, r26
    5d5a:	9b a7       	std	Y+43, r25	; 0x2b
    5d5c:	b1 e0       	ldi	r27, 0x01	; 1
    5d5e:	bd ab       	std	Y+53, r27	; 0x35
    5d60:	8b a5       	ldd	r24, Y+43	; 0x2b
    5d62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5d64:	98 17       	cp	r25, r24
    5d66:	08 f0       	brcs	.+2      	; 0x5d6a <LCD_Write_Num+0x120>
    5d68:	1d aa       	std	Y+53, r1	; 0x35
    5d6a:	ab a5       	ldd	r26, Y+43	; 0x2b
    5d6c:	ba a9       	ldd	r27, Y+50	; 0x32
    5d6e:	ab 1b       	sub	r26, r27
    5d70:	ae ab       	std	Y+54, r26	; 0x36
    5d72:	81 e0       	ldi	r24, 0x01	; 1
    5d74:	8f ab       	std	Y+55, r24	; 0x37
    5d76:	9e a9       	ldd	r25, Y+54	; 0x36
    5d78:	ab a5       	ldd	r26, Y+43	; 0x2b
    5d7a:	a9 17       	cp	r26, r25
    5d7c:	08 f0       	brcs	.+2      	; 0x5d80 <LCD_Write_Num+0x136>
    5d7e:	1f aa       	std	Y+55, r1	; 0x37
    5d80:	bd a9       	ldd	r27, Y+53	; 0x35
    5d82:	8f a9       	ldd	r24, Y+55	; 0x37
    5d84:	b8 2b       	or	r27, r24
    5d86:	bd ab       	std	Y+53, r27	; 0x35
    5d88:	9e a9       	ldd	r25, Y+54	; 0x36
    5d8a:	9b a7       	std	Y+43, r25	; 0x2b
    5d8c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5d8e:	bc a1       	ldd	r27, Y+36	; 0x24
    5d90:	ab 1b       	sub	r26, r27
    5d92:	ac a7       	std	Y+44, r26	; 0x2c
    5d94:	81 e0       	ldi	r24, 0x01	; 1
    5d96:	88 af       	std	Y+56, r24	; 0x38
    5d98:	9c a5       	ldd	r25, Y+44	; 0x2c
    5d9a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    5d9c:	a9 17       	cp	r26, r25
    5d9e:	08 f0       	brcs	.+2      	; 0x5da2 <LCD_Write_Num+0x158>
    5da0:	18 ae       	std	Y+56, r1	; 0x38
    5da2:	bc a5       	ldd	r27, Y+44	; 0x2c
    5da4:	8d a9       	ldd	r24, Y+53	; 0x35
    5da6:	b8 1b       	sub	r27, r24
    5da8:	b9 af       	std	Y+57, r27	; 0x39
    5daa:	91 e0       	ldi	r25, 0x01	; 1
    5dac:	9a af       	std	Y+58, r25	; 0x3a
    5dae:	a9 ad       	ldd	r26, Y+57	; 0x39
    5db0:	bc a5       	ldd	r27, Y+44	; 0x2c
    5db2:	ba 17       	cp	r27, r26
    5db4:	08 f0       	brcs	.+2      	; 0x5db8 <LCD_Write_Num+0x16e>
    5db6:	1a ae       	std	Y+58, r1	; 0x3a
    5db8:	88 ad       	ldd	r24, Y+56	; 0x38
    5dba:	9a ad       	ldd	r25, Y+58	; 0x3a
    5dbc:	89 2b       	or	r24, r25
    5dbe:	88 af       	std	Y+56, r24	; 0x38
    5dc0:	a9 ad       	ldd	r26, Y+57	; 0x39
    5dc2:	ac a7       	std	Y+44, r26	; 0x2c
    5dc4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    5dc6:	8d a1       	ldd	r24, Y+37	; 0x25
    5dc8:	b8 1b       	sub	r27, r24
    5dca:	bd a7       	std	Y+45, r27	; 0x2d
    5dcc:	91 e0       	ldi	r25, 0x01	; 1
    5dce:	9b af       	std	Y+59, r25	; 0x3b
    5dd0:	ad a5       	ldd	r26, Y+45	; 0x2d
    5dd2:	bd 8d       	ldd	r27, Y+29	; 0x1d
    5dd4:	ba 17       	cp	r27, r26
    5dd6:	08 f0       	brcs	.+2      	; 0x5dda <LCD_Write_Num+0x190>
    5dd8:	1b ae       	std	Y+59, r1	; 0x3b
    5dda:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ddc:	98 ad       	ldd	r25, Y+56	; 0x38
    5dde:	89 1b       	sub	r24, r25
    5de0:	8c af       	std	Y+60, r24	; 0x3c
    5de2:	a1 e0       	ldi	r26, 0x01	; 1
    5de4:	ad af       	std	Y+61, r26	; 0x3d
    5de6:	bc ad       	ldd	r27, Y+60	; 0x3c
    5de8:	8d a5       	ldd	r24, Y+45	; 0x2d
    5dea:	8b 17       	cp	r24, r27
    5dec:	08 f0       	brcs	.+2      	; 0x5df0 <LCD_Write_Num+0x1a6>
    5dee:	1d ae       	std	Y+61, r1	; 0x3d
    5df0:	9b ad       	ldd	r25, Y+59	; 0x3b
    5df2:	ad ad       	ldd	r26, Y+61	; 0x3d
    5df4:	9a 2b       	or	r25, r26
    5df6:	9b af       	std	Y+59, r25	; 0x3b
    5df8:	bc ad       	ldd	r27, Y+60	; 0x3c
    5dfa:	bd a7       	std	Y+45, r27	; 0x2d
    5dfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5dfe:	9e a1       	ldd	r25, Y+38	; 0x26
    5e00:	89 1b       	sub	r24, r25
    5e02:	8e a7       	std	Y+46, r24	; 0x2e
    5e04:	a1 e0       	ldi	r26, 0x01	; 1
    5e06:	ae af       	std	Y+62, r26	; 0x3e
    5e08:	be a5       	ldd	r27, Y+46	; 0x2e
    5e0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5e0c:	8b 17       	cp	r24, r27
    5e0e:	08 f0       	brcs	.+2      	; 0x5e12 <LCD_Write_Num+0x1c8>
    5e10:	1e ae       	std	Y+62, r1	; 0x3e
    5e12:	9e a5       	ldd	r25, Y+46	; 0x2e
    5e14:	ab ad       	ldd	r26, Y+59	; 0x3b
    5e16:	9a 1b       	sub	r25, r26
    5e18:	9f af       	std	Y+63, r25	; 0x3f
    5e1a:	b1 e0       	ldi	r27, 0x01	; 1
    5e1c:	21 96       	adiw	r28, 0x01	; 1
    5e1e:	bf af       	std	Y+63, r27	; 0x3f
    5e20:	21 97       	sbiw	r28, 0x01	; 1
    5e22:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e24:	9e a5       	ldd	r25, Y+46	; 0x2e
    5e26:	98 17       	cp	r25, r24
    5e28:	18 f0       	brcs	.+6      	; 0x5e30 <LCD_Write_Num+0x1e6>
    5e2a:	21 96       	adiw	r28, 0x01	; 1
    5e2c:	1f ae       	std	Y+63, r1	; 0x3f
    5e2e:	21 97       	sbiw	r28, 0x01	; 1
    5e30:	ae ad       	ldd	r26, Y+62	; 0x3e
    5e32:	21 96       	adiw	r28, 0x01	; 1
    5e34:	bf ad       	ldd	r27, Y+63	; 0x3f
    5e36:	21 97       	sbiw	r28, 0x01	; 1
    5e38:	ab 2b       	or	r26, r27
    5e3a:	ae af       	std	Y+62, r26	; 0x3e
    5e3c:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e3e:	8e a7       	std	Y+46, r24	; 0x2e
    5e40:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5e42:	af a1       	ldd	r26, Y+39	; 0x27
    5e44:	9a 1b       	sub	r25, r26
    5e46:	9f a7       	std	Y+47, r25	; 0x2f
    5e48:	b1 e0       	ldi	r27, 0x01	; 1
    5e4a:	22 96       	adiw	r28, 0x02	; 2
    5e4c:	bf af       	std	Y+63, r27	; 0x3f
    5e4e:	22 97       	sbiw	r28, 0x02	; 2
    5e50:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e52:	9f 8d       	ldd	r25, Y+31	; 0x1f
    5e54:	98 17       	cp	r25, r24
    5e56:	18 f0       	brcs	.+6      	; 0x5e5e <LCD_Write_Num+0x214>
    5e58:	22 96       	adiw	r28, 0x02	; 2
    5e5a:	1f ae       	std	Y+63, r1	; 0x3f
    5e5c:	22 97       	sbiw	r28, 0x02	; 2
    5e5e:	af a5       	ldd	r26, Y+47	; 0x2f
    5e60:	be ad       	ldd	r27, Y+62	; 0x3e
    5e62:	ab 1b       	sub	r26, r27
    5e64:	23 96       	adiw	r28, 0x03	; 3
    5e66:	af af       	std	Y+63, r26	; 0x3f
    5e68:	23 97       	sbiw	r28, 0x03	; 3
    5e6a:	81 e0       	ldi	r24, 0x01	; 1
    5e6c:	24 96       	adiw	r28, 0x04	; 4
    5e6e:	8f af       	std	Y+63, r24	; 0x3f
    5e70:	24 97       	sbiw	r28, 0x04	; 4
    5e72:	23 96       	adiw	r28, 0x03	; 3
    5e74:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e76:	23 97       	sbiw	r28, 0x03	; 3
    5e78:	af a5       	ldd	r26, Y+47	; 0x2f
    5e7a:	a9 17       	cp	r26, r25
    5e7c:	18 f0       	brcs	.+6      	; 0x5e84 <LCD_Write_Num+0x23a>
    5e7e:	24 96       	adiw	r28, 0x04	; 4
    5e80:	1f ae       	std	Y+63, r1	; 0x3f
    5e82:	24 97       	sbiw	r28, 0x04	; 4
    5e84:	22 96       	adiw	r28, 0x02	; 2
    5e86:	bf ad       	ldd	r27, Y+63	; 0x3f
    5e88:	22 97       	sbiw	r28, 0x02	; 2
    5e8a:	24 96       	adiw	r28, 0x04	; 4
    5e8c:	8f ad       	ldd	r24, Y+63	; 0x3f
    5e8e:	24 97       	sbiw	r28, 0x04	; 4
    5e90:	b8 2b       	or	r27, r24
    5e92:	22 96       	adiw	r28, 0x02	; 2
    5e94:	bf af       	std	Y+63, r27	; 0x3f
    5e96:	22 97       	sbiw	r28, 0x02	; 2
    5e98:	23 96       	adiw	r28, 0x03	; 3
    5e9a:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e9c:	23 97       	sbiw	r28, 0x03	; 3
    5e9e:	9f a7       	std	Y+47, r25	; 0x2f
    5ea0:	a8 a1       	ldd	r26, Y+32	; 0x20
    5ea2:	b8 a5       	ldd	r27, Y+40	; 0x28
    5ea4:	ab 1b       	sub	r26, r27
    5ea6:	a8 ab       	std	Y+48, r26	; 0x30
    5ea8:	88 a9       	ldd	r24, Y+48	; 0x30
    5eaa:	22 96       	adiw	r28, 0x02	; 2
    5eac:	9f ad       	ldd	r25, Y+63	; 0x3f
    5eae:	22 97       	sbiw	r28, 0x02	; 2
    5eb0:	89 1b       	sub	r24, r25
    5eb2:	88 ab       	std	Y+48, r24	; 0x30
    5eb4:	a9 a5       	ldd	r26, Y+41	; 0x29
    5eb6:	a8 8b       	std	Y+16, r26	; 0x10
    5eb8:	ba a5       	ldd	r27, Y+42	; 0x2a
    5eba:	b9 8b       	std	Y+17, r27	; 0x11
    5ebc:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ebe:	8a 8b       	std	Y+18, r24	; 0x12
    5ec0:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ec2:	9b 8b       	std	Y+19, r25	; 0x13
    5ec4:	ad a5       	ldd	r26, Y+45	; 0x2d
    5ec6:	ac 8b       	std	Y+20, r26	; 0x14
    5ec8:	be a5       	ldd	r27, Y+46	; 0x2e
    5eca:	bd 8b       	std	Y+21, r27	; 0x15
    5ecc:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ece:	8e 8b       	std	Y+22, r24	; 0x16
    5ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    5ed2:	9f 8b       	std	Y+23, r25	; 0x17
	}
	if(num ==0 )
    5ed4:	88 89       	ldd	r24, Y+16	; 0x10
    5ed6:	99 89       	ldd	r25, Y+17	; 0x11
    5ed8:	89 2b       	or	r24, r25
    5eda:	9a 89       	ldd	r25, Y+18	; 0x12
    5edc:	89 2b       	or	r24, r25
    5ede:	9b 89       	ldd	r25, Y+19	; 0x13
    5ee0:	89 2b       	or	r24, r25
    5ee2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ee4:	89 2b       	or	r24, r25
    5ee6:	9d 89       	ldd	r25, Y+21	; 0x15
    5ee8:	89 2b       	or	r24, r25
    5eea:	9e 89       	ldd	r25, Y+22	; 0x16
    5eec:	89 2b       	or	r24, r25
    5eee:	9f 89       	ldd	r25, Y+23	; 0x17
    5ef0:	89 2b       	or	r24, r25
    5ef2:	88 23       	and	r24, r24
    5ef4:	09 f0       	breq	.+2      	; 0x5ef8 <LCD_Write_Num+0x2ae>
    5ef6:	6d c0       	rjmp	.+218    	; 0x5fd2 <LCD_Write_Num+0x388>
	{
		LCD_Write_Data('0');
    5ef8:	80 e3       	ldi	r24, 0x30	; 48
    5efa:	0e 94 8e 28 	call	0x511c	; 0x511c <LCD_Write_Data>
    5efe:	b5 c0       	rjmp	.+362    	; 0x606a <LCD_Write_Num+0x420>
		return;
	}
	while(num)
	{
		str[i] = num % 10 +'0' ;
    5f00:	8b 81       	ldd	r24, Y+3	; 0x03
    5f02:	88 2e       	mov	r8, r24
    5f04:	99 24       	eor	r9, r9
    5f06:	a8 88       	ldd	r10, Y+16	; 0x10
    5f08:	b9 88       	ldd	r11, Y+17	; 0x11
    5f0a:	ca 88       	ldd	r12, Y+18	; 0x12
    5f0c:	db 88       	ldd	r13, Y+19	; 0x13
    5f0e:	ec 88       	ldd	r14, Y+20	; 0x14
    5f10:	fd 88       	ldd	r15, Y+21	; 0x15
    5f12:	0e 89       	ldd	r16, Y+22	; 0x16
    5f14:	1f 89       	ldd	r17, Y+23	; 0x17
    5f16:	2a 2d       	mov	r18, r10
    5f18:	3b 2d       	mov	r19, r11
    5f1a:	4c 2d       	mov	r20, r12
    5f1c:	5d 2d       	mov	r21, r13
    5f1e:	6e 2d       	mov	r22, r14
    5f20:	7f 2d       	mov	r23, r15
    5f22:	80 2f       	mov	r24, r16
    5f24:	91 2f       	mov	r25, r17
    5f26:	0f 2e       	mov	r0, r31
    5f28:	fa e0       	ldi	r31, 0x0A	; 10
    5f2a:	af 2e       	mov	r10, r31
    5f2c:	f0 2d       	mov	r31, r0
    5f2e:	bb 24       	eor	r11, r11
    5f30:	cc 24       	eor	r12, r12
    5f32:	dd 24       	eor	r13, r13
    5f34:	ee 24       	eor	r14, r14
    5f36:	ff 24       	eor	r15, r15
    5f38:	00 e0       	ldi	r16, 0x00	; 0
    5f3a:	10 e0       	ldi	r17, 0x00	; 0
    5f3c:	0e 94 9d 08 	call	0x113a	; 0x113a <__moddi3>
    5f40:	a2 2e       	mov	r10, r18
    5f42:	b3 2e       	mov	r11, r19
    5f44:	c4 2e       	mov	r12, r20
    5f46:	d5 2e       	mov	r13, r21
    5f48:	e6 2e       	mov	r14, r22
    5f4a:	f7 2e       	mov	r15, r23
    5f4c:	08 2f       	mov	r16, r24
    5f4e:	19 2f       	mov	r17, r25
    5f50:	2a 2d       	mov	r18, r10
    5f52:	3b 2d       	mov	r19, r11
    5f54:	4c 2d       	mov	r20, r12
    5f56:	5d 2d       	mov	r21, r13
    5f58:	6e 2d       	mov	r22, r14
    5f5a:	7f 2d       	mov	r23, r15
    5f5c:	80 2f       	mov	r24, r16
    5f5e:	91 2f       	mov	r25, r17
    5f60:	82 2f       	mov	r24, r18
    5f62:	28 2f       	mov	r18, r24
    5f64:	20 5d       	subi	r18, 0xD0	; 208
    5f66:	ce 01       	movw	r24, r28
    5f68:	04 96       	adiw	r24, 0x04	; 4
    5f6a:	fc 01       	movw	r30, r24
    5f6c:	e8 0d       	add	r30, r8
    5f6e:	f9 1d       	adc	r31, r9
    5f70:	20 83       	st	Z, r18
		num = num / 10 ;
    5f72:	a8 88       	ldd	r10, Y+16	; 0x10
    5f74:	b9 88       	ldd	r11, Y+17	; 0x11
    5f76:	ca 88       	ldd	r12, Y+18	; 0x12
    5f78:	db 88       	ldd	r13, Y+19	; 0x13
    5f7a:	ec 88       	ldd	r14, Y+20	; 0x14
    5f7c:	fd 88       	ldd	r15, Y+21	; 0x15
    5f7e:	0e 89       	ldd	r16, Y+22	; 0x16
    5f80:	1f 89       	ldd	r17, Y+23	; 0x17
    5f82:	2a 2d       	mov	r18, r10
    5f84:	3b 2d       	mov	r19, r11
    5f86:	4c 2d       	mov	r20, r12
    5f88:	5d 2d       	mov	r21, r13
    5f8a:	6e 2d       	mov	r22, r14
    5f8c:	7f 2d       	mov	r23, r15
    5f8e:	80 2f       	mov	r24, r16
    5f90:	91 2f       	mov	r25, r17
    5f92:	0f 2e       	mov	r0, r31
    5f94:	fa e0       	ldi	r31, 0x0A	; 10
    5f96:	af 2e       	mov	r10, r31
    5f98:	f0 2d       	mov	r31, r0
    5f9a:	bb 24       	eor	r11, r11
    5f9c:	cc 24       	eor	r12, r12
    5f9e:	dd 24       	eor	r13, r13
    5fa0:	ee 24       	eor	r14, r14
    5fa2:	ff 24       	eor	r15, r15
    5fa4:	00 e0       	ldi	r16, 0x00	; 0
    5fa6:	10 e0       	ldi	r17, 0x00	; 0
    5fa8:	0e 94 75 00 	call	0xea	; 0xea <__divdi3>
    5fac:	a2 2e       	mov	r10, r18
    5fae:	b3 2e       	mov	r11, r19
    5fb0:	c4 2e       	mov	r12, r20
    5fb2:	d5 2e       	mov	r13, r21
    5fb4:	e6 2e       	mov	r14, r22
    5fb6:	f7 2e       	mov	r15, r23
    5fb8:	08 2f       	mov	r16, r24
    5fba:	19 2f       	mov	r17, r25
    5fbc:	a8 8a       	std	Y+16, r10	; 0x10
    5fbe:	b9 8a       	std	Y+17, r11	; 0x11
    5fc0:	ca 8a       	std	Y+18, r12	; 0x12
    5fc2:	db 8a       	std	Y+19, r13	; 0x13
    5fc4:	ec 8a       	std	Y+20, r14	; 0x14
    5fc6:	fd 8a       	std	Y+21, r15	; 0x15
    5fc8:	0e 8b       	std	Y+22, r16	; 0x16
    5fca:	1f 8b       	std	Y+23, r17	; 0x17
		i++;
    5fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    5fce:	8f 5f       	subi	r24, 0xFF	; 255
    5fd0:	8b 83       	std	Y+3, r24	; 0x03
	if(num ==0 )
	{
		LCD_Write_Data('0');
		return;
	}
	while(num)
    5fd2:	88 89       	ldd	r24, Y+16	; 0x10
    5fd4:	99 89       	ldd	r25, Y+17	; 0x11
    5fd6:	89 2b       	or	r24, r25
    5fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    5fda:	89 2b       	or	r24, r25
    5fdc:	9b 89       	ldd	r25, Y+19	; 0x13
    5fde:	89 2b       	or	r24, r25
    5fe0:	9c 89       	ldd	r25, Y+20	; 0x14
    5fe2:	89 2b       	or	r24, r25
    5fe4:	9d 89       	ldd	r25, Y+21	; 0x15
    5fe6:	89 2b       	or	r24, r25
    5fe8:	9e 89       	ldd	r25, Y+22	; 0x16
    5fea:	89 2b       	or	r24, r25
    5fec:	9f 89       	ldd	r25, Y+23	; 0x17
    5fee:	89 2b       	or	r24, r25
    5ff0:	88 23       	and	r24, r24
    5ff2:	09 f0       	breq	.+2      	; 0x5ff6 <LCD_Write_Num+0x3ac>
    5ff4:	85 cf       	rjmp	.-246    	; 0x5f00 <LCD_Write_Num+0x2b6>
	{
		str[i] = num % 10 +'0' ;
		num = num / 10 ;
		i++;
	}
	str[i] = 0;
    5ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    5ff8:	28 2f       	mov	r18, r24
    5ffa:	30 e0       	ldi	r19, 0x00	; 0
    5ffc:	ce 01       	movw	r24, r28
    5ffe:	04 96       	adiw	r24, 0x04	; 4
    6000:	fc 01       	movw	r30, r24
    6002:	e2 0f       	add	r30, r18
    6004:	f3 1f       	adc	r31, r19
    6006:	10 82       	st	Z, r1
	for (int j=i-1 ; j>=0 ; j--)
    6008:	8b 81       	ldd	r24, Y+3	; 0x03
    600a:	88 2f       	mov	r24, r24
    600c:	90 e0       	ldi	r25, 0x00	; 0
    600e:	01 97       	sbiw	r24, 0x01	; 1
    6010:	9a 83       	std	Y+2, r25	; 0x02
    6012:	89 83       	std	Y+1, r24	; 0x01
    6014:	26 c0       	rjmp	.+76     	; 0x6062 <LCD_Write_Num+0x418>
	{
		LCD_Write_Data(str[j]);
    6016:	29 81       	ldd	r18, Y+1	; 0x01
    6018:	3a 81       	ldd	r19, Y+2	; 0x02
    601a:	ce 01       	movw	r24, r28
    601c:	04 96       	adiw	r24, 0x04	; 4
    601e:	fc 01       	movw	r30, r24
    6020:	e2 0f       	add	r30, r18
    6022:	f3 1f       	adc	r31, r19
    6024:	80 81       	ld	r24, Z
    6026:	0e 94 8e 28 	call	0x511c	; 0x511c <LCD_Write_Data>
		counter++ ;
    602a:	80 91 6b 02 	lds	r24, 0x026B
    602e:	8f 5f       	subi	r24, 0xFF	; 255
    6030:	80 93 6b 02 	sts	0x026B, r24
		if(counter%20 == 0 )
    6034:	80 91 6b 02 	lds	r24, 0x026B
    6038:	94 e1       	ldi	r25, 0x14	; 20
    603a:	69 2f       	mov	r22, r25
    603c:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    6040:	89 2f       	mov	r24, r25
    6042:	88 23       	and	r24, r24
    6044:	49 f4       	brne	.+18     	; 0x6058 <LCD_Write_Num+0x40e>
		{
			LCD_Goto(counter/20 , 0);
    6046:	80 91 6b 02 	lds	r24, 0x026B
    604a:	94 e1       	ldi	r25, 0x14	; 20
    604c:	69 2f       	mov	r22, r25
    604e:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    6052:	60 e0       	ldi	r22, 0x00	; 0
    6054:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		str[i] = num % 10 +'0' ;
		num = num / 10 ;
		i++;
	}
	str[i] = 0;
	for (int j=i-1 ; j>=0 ; j--)
    6058:	89 81       	ldd	r24, Y+1	; 0x01
    605a:	9a 81       	ldd	r25, Y+2	; 0x02
    605c:	01 97       	sbiw	r24, 0x01	; 1
    605e:	9a 83       	std	Y+2, r25	; 0x02
    6060:	89 83       	std	Y+1, r24	; 0x01
    6062:	89 81       	ldd	r24, Y+1	; 0x01
    6064:	9a 81       	ldd	r25, Y+2	; 0x02
    6066:	99 23       	and	r25, r25
    6068:	b4 f6       	brge	.-84     	; 0x6016 <LCD_Write_Num+0x3cc>
		if(counter%20 == 0 )
		{
			LCD_Goto(counter/20 , 0);
		}
	}
}
    606a:	cd 5b       	subi	r28, 0xBD	; 189
    606c:	df 4f       	sbci	r29, 0xFF	; 255
    606e:	0f b6       	in	r0, 0x3f	; 63
    6070:	f8 94       	cli
    6072:	de bf       	out	0x3e, r29	; 62
    6074:	0f be       	out	0x3f, r0	; 63
    6076:	cd bf       	out	0x3d, r28	; 61
    6078:	cf 91       	pop	r28
    607a:	df 91       	pop	r29
    607c:	1f 91       	pop	r17
    607e:	0f 91       	pop	r16
    6080:	ff 90       	pop	r15
    6082:	ef 90       	pop	r14
    6084:	df 90       	pop	r13
    6086:	cf 90       	pop	r12
    6088:	bf 90       	pop	r11
    608a:	af 90       	pop	r10
    608c:	9f 90       	pop	r9
    608e:	8f 90       	pop	r8
    6090:	08 95       	ret

00006092 <LCD_Generate_Char>:



void LCD_Generate_Char ( u8 * pattern , u8 address)
{
    6092:	df 93       	push	r29
    6094:	cf 93       	push	r28
    6096:	00 d0       	rcall	.+0      	; 0x6098 <LCD_Generate_Char+0x6>
    6098:	00 d0       	rcall	.+0      	; 0x609a <LCD_Generate_Char+0x8>
    609a:	0f 92       	push	r0
    609c:	cd b7       	in	r28, 0x3d	; 61
    609e:	de b7       	in	r29, 0x3e	; 62
    60a0:	9c 83       	std	Y+4, r25	; 0x04
    60a2:	8b 83       	std	Y+3, r24	; 0x03
    60a4:	6d 83       	std	Y+5, r22	; 0x05
	LCD_Write_Command(0x40 + address*8) ;
    60a6:	8d 81       	ldd	r24, Y+5	; 0x05
    60a8:	88 2f       	mov	r24, r24
    60aa:	90 e0       	ldi	r25, 0x00	; 0
    60ac:	08 96       	adiw	r24, 0x08	; 8
    60ae:	88 0f       	add	r24, r24
    60b0:	99 1f       	adc	r25, r25
    60b2:	88 0f       	add	r24, r24
    60b4:	99 1f       	adc	r25, r25
    60b6:	88 0f       	add	r24, r24
    60b8:	99 1f       	adc	r25, r25
    60ba:	0e 94 92 26 	call	0x4d24	; 0x4d24 <LCD_Write_Command>
	for ( int i =0 ; i<8 ; i++)
    60be:	1a 82       	std	Y+2, r1	; 0x02
    60c0:	19 82       	std	Y+1, r1	; 0x01
    60c2:	0f c0       	rjmp	.+30     	; 0x60e2 <LCD_Generate_Char+0x50>
	{
		LCD_Write_Data(pattern[i]);
    60c4:	29 81       	ldd	r18, Y+1	; 0x01
    60c6:	3a 81       	ldd	r19, Y+2	; 0x02
    60c8:	8b 81       	ldd	r24, Y+3	; 0x03
    60ca:	9c 81       	ldd	r25, Y+4	; 0x04
    60cc:	fc 01       	movw	r30, r24
    60ce:	e2 0f       	add	r30, r18
    60d0:	f3 1f       	adc	r31, r19
    60d2:	80 81       	ld	r24, Z
    60d4:	0e 94 8e 28 	call	0x511c	; 0x511c <LCD_Write_Data>


void LCD_Generate_Char ( u8 * pattern , u8 address)
{
	LCD_Write_Command(0x40 + address*8) ;
	for ( int i =0 ; i<8 ; i++)
    60d8:	89 81       	ldd	r24, Y+1	; 0x01
    60da:	9a 81       	ldd	r25, Y+2	; 0x02
    60dc:	01 96       	adiw	r24, 0x01	; 1
    60de:	9a 83       	std	Y+2, r25	; 0x02
    60e0:	89 83       	std	Y+1, r24	; 0x01
    60e2:	89 81       	ldd	r24, Y+1	; 0x01
    60e4:	9a 81       	ldd	r25, Y+2	; 0x02
    60e6:	88 30       	cpi	r24, 0x08	; 8
    60e8:	91 05       	cpc	r25, r1
    60ea:	64 f3       	brlt	.-40     	; 0x60c4 <LCD_Generate_Char+0x32>
	{
		LCD_Write_Data(pattern[i]);
	}
	LCD_Goto(counter/20 , counter%20);
    60ec:	80 91 6b 02 	lds	r24, 0x026B
    60f0:	94 e1       	ldi	r25, 0x14	; 20
    60f2:	69 2f       	mov	r22, r25
    60f4:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    60f8:	28 2f       	mov	r18, r24
    60fa:	80 91 6b 02 	lds	r24, 0x026B
    60fe:	94 e1       	ldi	r25, 0x14	; 20
    6100:	69 2f       	mov	r22, r25
    6102:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    6106:	89 2f       	mov	r24, r25
    6108:	98 2f       	mov	r25, r24
    610a:	82 2f       	mov	r24, r18
    610c:	69 2f       	mov	r22, r25
    610e:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_Data(address);
    6112:	8d 81       	ldd	r24, Y+5	; 0x05
    6114:	0e 94 8e 28 	call	0x511c	; 0x511c <LCD_Write_Data>
	counter++;
    6118:	80 91 6b 02 	lds	r24, 0x026B
    611c:	8f 5f       	subi	r24, 0xFF	; 255
    611e:	80 93 6b 02 	sts	0x026B, r24
}
    6122:	0f 90       	pop	r0
    6124:	0f 90       	pop	r0
    6126:	0f 90       	pop	r0
    6128:	0f 90       	pop	r0
    612a:	0f 90       	pop	r0
    612c:	cf 91       	pop	r28
    612e:	df 91       	pop	r29
    6130:	08 95       	ret

00006132 <LCD_Write_Char>:

void LCD_Write_Char(u8 data)
{
    6132:	df 93       	push	r29
    6134:	cf 93       	push	r28
    6136:	0f 92       	push	r0
    6138:	cd b7       	in	r28, 0x3d	; 61
    613a:	de b7       	in	r29, 0x3e	; 62
    613c:	89 83       	std	Y+1, r24	; 0x01
	LCD_Write_Data(data);
    613e:	89 81       	ldd	r24, Y+1	; 0x01
    6140:	0e 94 8e 28 	call	0x511c	; 0x511c <LCD_Write_Data>
	counter++ ;
    6144:	80 91 6b 02 	lds	r24, 0x026B
    6148:	8f 5f       	subi	r24, 0xFF	; 255
    614a:	80 93 6b 02 	sts	0x026B, r24
	if(counter%20 == 0 )
    614e:	80 91 6b 02 	lds	r24, 0x026B
    6152:	94 e1       	ldi	r25, 0x14	; 20
    6154:	69 2f       	mov	r22, r25
    6156:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    615a:	89 2f       	mov	r24, r25
    615c:	88 23       	and	r24, r24
    615e:	49 f4       	brne	.+18     	; 0x6172 <LCD_Write_Char+0x40>
	{
		LCD_Goto(counter/20 , 0);
    6160:	80 91 6b 02 	lds	r24, 0x026B
    6164:	94 e1       	ldi	r25, 0x14	; 20
    6166:	69 2f       	mov	r22, r25
    6168:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    616c:	60 e0       	ldi	r22, 0x00	; 0
    616e:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	}
}
    6172:	0f 90       	pop	r0
    6174:	cf 91       	pop	r28
    6176:	df 91       	pop	r29
    6178:	08 95       	ret

0000617a <LCD_Write_Num_in3Dig>:

void LCD_Write_Num_in3Dig (u16 num)
{
    617a:	df 93       	push	r29
    617c:	cf 93       	push	r28
    617e:	00 d0       	rcall	.+0      	; 0x6180 <LCD_Write_Num_in3Dig+0x6>
    6180:	cd b7       	in	r28, 0x3d	; 61
    6182:	de b7       	in	r29, 0x3e	; 62
    6184:	9a 83       	std	Y+2, r25	; 0x02
    6186:	89 83       	std	Y+1, r24	; 0x01
	LCD_Write_Char(((num%1000)/100)+'0');
    6188:	89 81       	ldd	r24, Y+1	; 0x01
    618a:	9a 81       	ldd	r25, Y+2	; 0x02
    618c:	28 ee       	ldi	r18, 0xE8	; 232
    618e:	33 e0       	ldi	r19, 0x03	; 3
    6190:	b9 01       	movw	r22, r18
    6192:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    6196:	24 e6       	ldi	r18, 0x64	; 100
    6198:	30 e0       	ldi	r19, 0x00	; 0
    619a:	b9 01       	movw	r22, r18
    619c:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    61a0:	cb 01       	movw	r24, r22
    61a2:	80 5d       	subi	r24, 0xD0	; 208
    61a4:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Char(((num%100)/10)+'0');
    61a8:	89 81       	ldd	r24, Y+1	; 0x01
    61aa:	9a 81       	ldd	r25, Y+2	; 0x02
    61ac:	24 e6       	ldi	r18, 0x64	; 100
    61ae:	30 e0       	ldi	r19, 0x00	; 0
    61b0:	b9 01       	movw	r22, r18
    61b2:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    61b6:	2a e0       	ldi	r18, 0x0A	; 10
    61b8:	30 e0       	ldi	r19, 0x00	; 0
    61ba:	b9 01       	movw	r22, r18
    61bc:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    61c0:	cb 01       	movw	r24, r22
    61c2:	80 5d       	subi	r24, 0xD0	; 208
    61c4:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Char(((num%10)/1)+'0');
    61c8:	89 81       	ldd	r24, Y+1	; 0x01
    61ca:	9a 81       	ldd	r25, Y+2	; 0x02
    61cc:	2a e0       	ldi	r18, 0x0A	; 10
    61ce:	30 e0       	ldi	r19, 0x00	; 0
    61d0:	b9 01       	movw	r22, r18
    61d2:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    61d6:	80 5d       	subi	r24, 0xD0	; 208
    61d8:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	
}
    61dc:	0f 90       	pop	r0
    61de:	0f 90       	pop	r0
    61e0:	cf 91       	pop	r28
    61e2:	df 91       	pop	r29
    61e4:	08 95       	ret

000061e6 <LCD_Write_Num_in2Dig>:

void LCD_Write_Num_in2Dig (u16 num)
{
    61e6:	df 93       	push	r29
    61e8:	cf 93       	push	r28
    61ea:	00 d0       	rcall	.+0      	; 0x61ec <LCD_Write_Num_in2Dig+0x6>
    61ec:	cd b7       	in	r28, 0x3d	; 61
    61ee:	de b7       	in	r29, 0x3e	; 62
    61f0:	9a 83       	std	Y+2, r25	; 0x02
    61f2:	89 83       	std	Y+1, r24	; 0x01
	LCD_Write_Char(((num%100)/10)+'0');
    61f4:	89 81       	ldd	r24, Y+1	; 0x01
    61f6:	9a 81       	ldd	r25, Y+2	; 0x02
    61f8:	24 e6       	ldi	r18, 0x64	; 100
    61fa:	30 e0       	ldi	r19, 0x00	; 0
    61fc:	b9 01       	movw	r22, r18
    61fe:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    6202:	2a e0       	ldi	r18, 0x0A	; 10
    6204:	30 e0       	ldi	r19, 0x00	; 0
    6206:	b9 01       	movw	r22, r18
    6208:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    620c:	cb 01       	movw	r24, r22
    620e:	80 5d       	subi	r24, 0xD0	; 208
    6210:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Char(((num%10)/1)+'0');	
    6214:	89 81       	ldd	r24, Y+1	; 0x01
    6216:	9a 81       	ldd	r25, Y+2	; 0x02
    6218:	2a e0       	ldi	r18, 0x0A	; 10
    621a:	30 e0       	ldi	r19, 0x00	; 0
    621c:	b9 01       	movw	r22, r18
    621e:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    6222:	80 5d       	subi	r24, 0xD0	; 208
    6224:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
}
    6228:	0f 90       	pop	r0
    622a:	0f 90       	pop	r0
    622c:	cf 91       	pop	r28
    622e:	df 91       	pop	r29
    6230:	08 95       	ret

00006232 <LCD_Write_Num_in4Dig>:


void LCD_Write_Num_in4Dig (u16 num)
{
    6232:	df 93       	push	r29
    6234:	cf 93       	push	r28
    6236:	00 d0       	rcall	.+0      	; 0x6238 <LCD_Write_Num_in4Dig+0x6>
    6238:	cd b7       	in	r28, 0x3d	; 61
    623a:	de b7       	in	r29, 0x3e	; 62
    623c:	9a 83       	std	Y+2, r25	; 0x02
    623e:	89 83       	std	Y+1, r24	; 0x01
	LCD_Write_Char(((num%10000)/1000)+'0');
    6240:	89 81       	ldd	r24, Y+1	; 0x01
    6242:	9a 81       	ldd	r25, Y+2	; 0x02
    6244:	20 e1       	ldi	r18, 0x10	; 16
    6246:	37 e2       	ldi	r19, 0x27	; 39
    6248:	b9 01       	movw	r22, r18
    624a:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    624e:	28 ee       	ldi	r18, 0xE8	; 232
    6250:	33 e0       	ldi	r19, 0x03	; 3
    6252:	b9 01       	movw	r22, r18
    6254:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    6258:	cb 01       	movw	r24, r22
    625a:	80 5d       	subi	r24, 0xD0	; 208
    625c:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Char(((num%1000)/100)+'0');
    6260:	89 81       	ldd	r24, Y+1	; 0x01
    6262:	9a 81       	ldd	r25, Y+2	; 0x02
    6264:	28 ee       	ldi	r18, 0xE8	; 232
    6266:	33 e0       	ldi	r19, 0x03	; 3
    6268:	b9 01       	movw	r22, r18
    626a:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    626e:	24 e6       	ldi	r18, 0x64	; 100
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	b9 01       	movw	r22, r18
    6274:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    6278:	cb 01       	movw	r24, r22
    627a:	80 5d       	subi	r24, 0xD0	; 208
    627c:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Char(((num%100)/10)+'0');
    6280:	89 81       	ldd	r24, Y+1	; 0x01
    6282:	9a 81       	ldd	r25, Y+2	; 0x02
    6284:	24 e6       	ldi	r18, 0x64	; 100
    6286:	30 e0       	ldi	r19, 0x00	; 0
    6288:	b9 01       	movw	r22, r18
    628a:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    628e:	2a e0       	ldi	r18, 0x0A	; 10
    6290:	30 e0       	ldi	r19, 0x00	; 0
    6292:	b9 01       	movw	r22, r18
    6294:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    6298:	cb 01       	movw	r24, r22
    629a:	80 5d       	subi	r24, 0xD0	; 208
    629c:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Char(((num%10)/1)+'0');
    62a0:	89 81       	ldd	r24, Y+1	; 0x01
    62a2:	9a 81       	ldd	r25, Y+2	; 0x02
    62a4:	2a e0       	ldi	r18, 0x0A	; 10
    62a6:	30 e0       	ldi	r19, 0x00	; 0
    62a8:	b9 01       	movw	r22, r18
    62aa:	0e 94 5d 3a 	call	0x74ba	; 0x74ba <__udivmodhi4>
    62ae:	80 5d       	subi	r24, 0xD0	; 208
    62b0:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	
    62b4:	0f 90       	pop	r0
    62b6:	0f 90       	pop	r0
    62b8:	cf 91       	pop	r28
    62ba:	df 91       	pop	r29
    62bc:	08 95       	ret

000062be <KeyPad_Init>:
							   {'M' , 'N' , 'O'}};


*/		
void KeyPad_Init(void)
{
    62be:	df 93       	push	r29
    62c0:	cf 93       	push	r28
    62c2:	cd b7       	in	r28, 0x3d	; 61
    62c4:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(ROW1_PORT , ROW1_PIN , OUTPUT);
    62c6:	82 e0       	ldi	r24, 0x02	; 2
    62c8:	65 e0       	ldi	r22, 0x05	; 5
    62ca:	40 e0       	ldi	r20, 0x00	; 0
    62cc:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW2_PORT , ROW2_PIN , OUTPUT);
    62d0:	82 e0       	ldi	r24, 0x02	; 2
    62d2:	64 e0       	ldi	r22, 0x04	; 4
    62d4:	40 e0       	ldi	r20, 0x00	; 0
    62d6:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW3_PORT , ROW3_PIN , OUTPUT);
    62da:	82 e0       	ldi	r24, 0x02	; 2
    62dc:	63 e0       	ldi	r22, 0x03	; 3
    62de:	40 e0       	ldi	r20, 0x00	; 0
    62e0:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(ROW4_PORT , ROW4_PIN , OUTPUT);
    62e4:	82 e0       	ldi	r24, 0x02	; 2
    62e6:	62 e0       	ldi	r22, 0x02	; 2
    62e8:	40 e0       	ldi	r20, 0x00	; 0
    62ea:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	
	DIO_Set_Pin_Direction(COL1_PORT , COL1_PIN , INPULLUP);
    62ee:	83 e0       	ldi	r24, 0x03	; 3
    62f0:	67 e0       	ldi	r22, 0x07	; 7
    62f2:	42 e0       	ldi	r20, 0x02	; 2
    62f4:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(COL2_PORT , COL2_PIN , INPULLUP);
    62f8:	83 e0       	ldi	r24, 0x03	; 3
    62fa:	66 e0       	ldi	r22, 0x06	; 6
    62fc:	42 e0       	ldi	r20, 0x02	; 2
    62fe:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(COL3_PORT , COL3_PIN , INPULLUP);
    6302:	83 e0       	ldi	r24, 0x03	; 3
    6304:	65 e0       	ldi	r22, 0x05	; 5
    6306:	42 e0       	ldi	r20, 0x02	; 2
    6308:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
	DIO_Set_Pin_Direction(COL4_PORT , COL4_PIN , INPULLUP);
    630c:	83 e0       	ldi	r24, 0x03	; 3
    630e:	63 e0       	ldi	r22, 0x03	; 3
    6310:	42 e0       	ldi	r20, 0x02	; 2
    6312:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
}
    6316:	cf 91       	pop	r28
    6318:	df 91       	pop	r29
    631a:	08 95       	ret

0000631c <KEYPAD_GetInput>:
							 
u8 KEYPAD_GetInput(void)
{
    631c:	df 93       	push	r29
    631e:	cf 93       	push	r28
    6320:	00 d0       	rcall	.+0      	; 0x6322 <KEYPAD_GetInput+0x6>
    6322:	0f 92       	push	r0
    6324:	cd b7       	in	r28, 0x3d	; 61
    6326:	de b7       	in	r29, 0x3e	; 62
	u8 key ;
	key = DEFAULT_KEY ;
    6328:	8e e2       	ldi	r24, 0x2E	; 46
    632a:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_Write_Pin(ROW1_PORT , ROW1_PIN , HIGH);
    632c:	82 e0       	ldi	r24, 0x02	; 2
    632e:	65 e0       	ldi	r22, 0x05	; 5
    6330:	41 e0       	ldi	r20, 0x01	; 1
    6332:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(ROW2_PORT , ROW2_PIN , HIGH);
    6336:	82 e0       	ldi	r24, 0x02	; 2
    6338:	64 e0       	ldi	r22, 0x04	; 4
    633a:	41 e0       	ldi	r20, 0x01	; 1
    633c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(ROW3_PORT , ROW3_PIN , HIGH);
    6340:	82 e0       	ldi	r24, 0x02	; 2
    6342:	63 e0       	ldi	r22, 0x03	; 3
    6344:	41 e0       	ldi	r20, 0x01	; 1
    6346:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(ROW4_PORT , ROW4_PIN , HIGH);
    634a:	82 e0       	ldi	r24, 0x02	; 2
    634c:	62 e0       	ldi	r22, 0x02	; 2
    634e:	41 e0       	ldi	r20, 0x01	; 1
    6350:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	
	for (u8 r=0 ; r<ROWS ; r++)
    6354:	1a 82       	std	Y+2, r1	; 0x02
    6356:	57 c0       	rjmp	.+174    	; 0x6406 <KEYPAD_GetInput+0xea>
	{
		DIO_Write_Pin(rows_port_arr[r] , rows_pin_arr[r] , LOW);
    6358:	8a 81       	ldd	r24, Y+2	; 0x02
    635a:	88 2f       	mov	r24, r24
    635c:	90 e0       	ldi	r25, 0x00	; 0
    635e:	fc 01       	movw	r30, r24
    6360:	e3 5f       	subi	r30, 0xF3	; 243
    6362:	fd 4f       	sbci	r31, 0xFD	; 253
    6364:	20 81       	ld	r18, Z
    6366:	8a 81       	ldd	r24, Y+2	; 0x02
    6368:	88 2f       	mov	r24, r24
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	fc 01       	movw	r30, r24
    636e:	eb 5e       	subi	r30, 0xEB	; 235
    6370:	fd 4f       	sbci	r31, 0xFD	; 253
    6372:	90 81       	ld	r25, Z
    6374:	82 2f       	mov	r24, r18
    6376:	69 2f       	mov	r22, r25
    6378:	40 e0       	ldi	r20, 0x00	; 0
    637a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
		for (u8 c=0 ; c<COLS ; c++)
    637e:	19 82       	std	Y+1, r1	; 0x01
    6380:	29 c0       	rjmp	.+82     	; 0x63d4 <KEYPAD_GetInput+0xb8>
		{
			if (!DIO_Read_Pin(cols_port_arr[c] , cols_pin_arr[c]))
    6382:	89 81       	ldd	r24, Y+1	; 0x01
    6384:	88 2f       	mov	r24, r24
    6386:	90 e0       	ldi	r25, 0x00	; 0
    6388:	fc 01       	movw	r30, r24
    638a:	ef 5e       	subi	r30, 0xEF	; 239
    638c:	fd 4f       	sbci	r31, 0xFD	; 253
    638e:	20 81       	ld	r18, Z
    6390:	89 81       	ldd	r24, Y+1	; 0x01
    6392:	88 2f       	mov	r24, r24
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	fc 01       	movw	r30, r24
    6398:	e7 5e       	subi	r30, 0xE7	; 231
    639a:	fd 4f       	sbci	r31, 0xFD	; 253
    639c:	90 81       	ld	r25, Z
    639e:	82 2f       	mov	r24, r18
    63a0:	69 2f       	mov	r22, r25
    63a2:	0e 94 a7 20 	call	0x414e	; 0x414e <DIO_Read_Pin>
    63a6:	88 23       	and	r24, r24
    63a8:	91 f4       	brne	.+36     	; 0x63ce <KEYPAD_GetInput+0xb2>
			{
				key = keys_array[r][c];
    63aa:	8a 81       	ldd	r24, Y+2	; 0x02
    63ac:	48 2f       	mov	r20, r24
    63ae:	50 e0       	ldi	r21, 0x00	; 0
    63b0:	89 81       	ldd	r24, Y+1	; 0x01
    63b2:	28 2f       	mov	r18, r24
    63b4:	30 e0       	ldi	r19, 0x00	; 0
    63b6:	ca 01       	movw	r24, r20
    63b8:	88 0f       	add	r24, r24
    63ba:	99 1f       	adc	r25, r25
    63bc:	88 0f       	add	r24, r24
    63be:	99 1f       	adc	r25, r25
    63c0:	82 0f       	add	r24, r18
    63c2:	93 1f       	adc	r25, r19
    63c4:	fc 01       	movw	r30, r24
    63c6:	e3 5e       	subi	r30, 0xE3	; 227
    63c8:	fd 4f       	sbci	r31, 0xFD	; 253
    63ca:	80 81       	ld	r24, Z
    63cc:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Write_Pin(ROW4_PORT , ROW4_PIN , HIGH);
	
	for (u8 r=0 ; r<ROWS ; r++)
	{
		DIO_Write_Pin(rows_port_arr[r] , rows_pin_arr[r] , LOW);
		for (u8 c=0 ; c<COLS ; c++)
    63ce:	89 81       	ldd	r24, Y+1	; 0x01
    63d0:	8f 5f       	subi	r24, 0xFF	; 255
    63d2:	89 83       	std	Y+1, r24	; 0x01
    63d4:	89 81       	ldd	r24, Y+1	; 0x01
    63d6:	84 30       	cpi	r24, 0x04	; 4
    63d8:	a0 f2       	brcs	.-88     	; 0x6382 <KEYPAD_GetInput+0x66>
				/*_delay_ms(5);
				while (!DIO_Read_Pin(cols_port_arr[c] , cols_pin_arr[c])) ;
				_delay_ms(5);*/
			}
		}
		DIO_Write_Pin(rows_port_arr[r] , rows_pin_arr[r] , HIGH);
    63da:	8a 81       	ldd	r24, Y+2	; 0x02
    63dc:	88 2f       	mov	r24, r24
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	fc 01       	movw	r30, r24
    63e2:	e3 5f       	subi	r30, 0xF3	; 243
    63e4:	fd 4f       	sbci	r31, 0xFD	; 253
    63e6:	20 81       	ld	r18, Z
    63e8:	8a 81       	ldd	r24, Y+2	; 0x02
    63ea:	88 2f       	mov	r24, r24
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	fc 01       	movw	r30, r24
    63f0:	eb 5e       	subi	r30, 0xEB	; 235
    63f2:	fd 4f       	sbci	r31, 0xFD	; 253
    63f4:	90 81       	ld	r25, Z
    63f6:	82 2f       	mov	r24, r18
    63f8:	69 2f       	mov	r22, r25
    63fa:	41 e0       	ldi	r20, 0x01	; 1
    63fc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
	DIO_Write_Pin(ROW1_PORT , ROW1_PIN , HIGH);
	DIO_Write_Pin(ROW2_PORT , ROW2_PIN , HIGH);
	DIO_Write_Pin(ROW3_PORT , ROW3_PIN , HIGH);
	DIO_Write_Pin(ROW4_PORT , ROW4_PIN , HIGH);
	
	for (u8 r=0 ; r<ROWS ; r++)
    6400:	8a 81       	ldd	r24, Y+2	; 0x02
    6402:	8f 5f       	subi	r24, 0xFF	; 255
    6404:	8a 83       	std	Y+2, r24	; 0x02
    6406:	8a 81       	ldd	r24, Y+2	; 0x02
    6408:	84 30       	cpi	r24, 0x04	; 4
    640a:	08 f4       	brcc	.+2      	; 0x640e <KEYPAD_GetInput+0xf2>
    640c:	a5 cf       	rjmp	.-182    	; 0x6358 <KEYPAD_GetInput+0x3c>
			}
		}
		DIO_Write_Pin(rows_port_arr[r] , rows_pin_arr[r] , HIGH);
		
	}
	return key ;
    640e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    6410:	0f 90       	pop	r0
    6412:	0f 90       	pop	r0
    6414:	0f 90       	pop	r0
    6416:	cf 91       	pop	r28
    6418:	df 91       	pop	r29
    641a:	08 95       	ret

0000641c <ALARM_ON>:
 * Parameters (in)  : None
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/
void ALARM_ON (void)
{
    641c:	df 93       	push	r29
    641e:	cf 93       	push	r28
    6420:	cd b7       	in	r28, 0x3d	; 61
    6422:	de b7       	in	r29, 0x3e	; 62
    LED_ON(LED_YELLOW); // Turn on the alarm LED (yellow)
    6424:	83 e0       	ldi	r24, 0x03	; 3
    6426:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <LED_ON>
}
    642a:	cf 91       	pop	r28
    642c:	df 91       	pop	r29
    642e:	08 95       	ret

00006430 <ALARM_OFF>:
 * Parameters (in)  : None
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/
void ALARM_OFF (void)
{
    6430:	df 93       	push	r29
    6432:	cf 93       	push	r28
    6434:	cd b7       	in	r28, 0x3d	; 61
    6436:	de b7       	in	r29, 0x3e	; 62
    LED_OFF(LED_YELLOW); // Turn off the alarm LED (yellow)
    6438:	83 e0       	ldi	r24, 0x03	; 3
    643a:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <LED_OFF>
}
    643e:	cf 91       	pop	r28
    6440:	df 91       	pop	r29
    6442:	08 95       	ret

00006444 <set_speed>:
 * Parameters (in)  : None
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/
void set_speed (void)
{
    6444:	df 93       	push	r29
    6446:	cf 93       	push	r28
    6448:	cd b7       	in	r28, 0x3d	; 61
    644a:	de b7       	in	r29, 0x3e	; 62
	if (ADC_reading <= 300)
    644c:	80 91 76 02 	lds	r24, 0x0276
    6450:	90 91 77 02 	lds	r25, 0x0277
    6454:	21 e0       	ldi	r18, 0x01	; 1
    6456:	8d 32       	cpi	r24, 0x2D	; 45
    6458:	92 07       	cpc	r25, r18
    645a:	f0 f4       	brcc	.+60     	; 0x6498 <set_speed+0x54>
	{
		 // Calculate speed proportionally based on ADC reading
		speed = ((u32)ADC_reading*200) / 300 ;
    645c:	80 91 76 02 	lds	r24, 0x0276
    6460:	90 91 77 02 	lds	r25, 0x0277
    6464:	cc 01       	movw	r24, r24
    6466:	a0 e0       	ldi	r26, 0x00	; 0
    6468:	b0 e0       	ldi	r27, 0x00	; 0
    646a:	28 ec       	ldi	r18, 0xC8	; 200
    646c:	30 e0       	ldi	r19, 0x00	; 0
    646e:	40 e0       	ldi	r20, 0x00	; 0
    6470:	50 e0       	ldi	r21, 0x00	; 0
    6472:	bc 01       	movw	r22, r24
    6474:	cd 01       	movw	r24, r26
    6476:	0e 94 32 3a 	call	0x7464	; 0x7464 <__mulsi3>
    647a:	dc 01       	movw	r26, r24
    647c:	cb 01       	movw	r24, r22
    647e:	2c e2       	ldi	r18, 0x2C	; 44
    6480:	31 e0       	ldi	r19, 0x01	; 1
    6482:	40 e0       	ldi	r20, 0x00	; 0
    6484:	50 e0       	ldi	r21, 0x00	; 0
    6486:	bc 01       	movw	r22, r24
    6488:	cd 01       	movw	r24, r26
    648a:	0e 94 84 3a 	call	0x7508	; 0x7508 <__udivmodsi4>
    648e:	da 01       	movw	r26, r20
    6490:	c9 01       	movw	r24, r18
    6492:	80 93 a8 02 	sts	0x02A8, r24
    6496:	03 c0       	rjmp	.+6      	; 0x649e <set_speed+0x5a>
	}
	else
	{
		 // Set speed to maximum value if ADC reading exceeds threshold
		speed = 200 ;
    6498:	88 ec       	ldi	r24, 0xC8	; 200
    649a:	80 93 a8 02 	sts	0x02A8, r24
	}
}
    649e:	cf 91       	pop	r28
    64a0:	df 91       	pop	r29
    64a2:	08 95       	ret

000064a4 <Gas_Padel>:
 * Parameters (in)  : None
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/
void Gas_Padel()
{
    64a4:	df 93       	push	r29
    64a6:	cf 93       	push	r28
    64a8:	cd b7       	in	r28, 0x3d	; 61
    64aa:	de b7       	in	r29, 0x3e	; 62
	static u8 speed_before = 0 ;
	static u8 speed_after = 0 ;
	static u8 local_flag = 0;
	
	// Start asynchronous ADC conversion
	ADC_u8StartConversionAsynch(0,&ADC_reading ,  set_speed);
    64ac:	26 e7       	ldi	r18, 0x76	; 118
    64ae:	32 e0       	ldi	r19, 0x02	; 2
    64b0:	42 e2       	ldi	r20, 0x22	; 34
    64b2:	52 e3       	ldi	r21, 0x32	; 50
    64b4:	80 e0       	ldi	r24, 0x00	; 0
    64b6:	b9 01       	movw	r22, r18
    64b8:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <ADC_u8StartConversionAsynch>
	
	// Check if CCS start flag is set 
	if(ccs_start_once == 1 )
    64bc:	80 91 79 02 	lds	r24, 0x0279
    64c0:	81 30       	cpi	r24, 0x01	; 1
    64c2:	09 f0       	breq	.+2      	; 0x64c6 <Gas_Padel+0x22>
    64c4:	49 c0       	rjmp	.+146    	; 0x6558 <Gas_Padel+0xb4>
	{
		if(speed > speed_temp)
    64c6:	90 91 a8 02 	lds	r25, 0x02A8
    64ca:	80 91 a5 02 	lds	r24, 0x02A5
    64ce:	89 17       	cp	r24, r25
    64d0:	f8 f4       	brcc	.+62     	; 0x6510 <Gas_Padel+0x6c>
		{
			if((speed-speed_temp)>5)
    64d2:	80 91 a8 02 	lds	r24, 0x02A8
    64d6:	28 2f       	mov	r18, r24
    64d8:	30 e0       	ldi	r19, 0x00	; 0
    64da:	80 91 a5 02 	lds	r24, 0x02A5
    64de:	88 2f       	mov	r24, r24
    64e0:	90 e0       	ldi	r25, 0x00	; 0
    64e2:	a9 01       	movw	r20, r18
    64e4:	48 1b       	sub	r20, r24
    64e6:	59 0b       	sbc	r21, r25
    64e8:	ca 01       	movw	r24, r20
    64ea:	86 30       	cpi	r24, 0x06	; 6
    64ec:	91 05       	cpc	r25, r1
    64ee:	a4 f1       	brlt	.+104    	; 0x6558 <Gas_Padel+0xb4>
			{
				if(CCS_Current)
    64f0:	80 91 a7 02 	lds	r24, 0x02A7
    64f4:	88 23       	and	r24, r24
    64f6:	81 f1       	breq	.+96     	; 0x6558 <Gas_Padel+0xb4>
				{
					CCS_counter++;
    64f8:	80 91 a6 02 	lds	r24, 0x02A6
    64fc:	8f 5f       	subi	r24, 0xFF	; 255
    64fe:	80 93 a6 02 	sts	0x02A6, r24
					CCS_Current=0;
    6502:	10 92 a7 02 	sts	0x02A7, r1
					speed_temp = speed;
    6506:	80 91 a8 02 	lds	r24, 0x02A8
    650a:	80 93 a5 02 	sts	0x02A5, r24
    650e:	24 c0       	rjmp	.+72     	; 0x6558 <Gas_Padel+0xb4>
				}	
			}
		}
		else if (speed < speed_temp)
    6510:	90 91 a8 02 	lds	r25, 0x02A8
    6514:	80 91 a5 02 	lds	r24, 0x02A5
    6518:	98 17       	cp	r25, r24
    651a:	f0 f4       	brcc	.+60     	; 0x6558 <Gas_Padel+0xb4>
		{
			if((speed_temp-speed)>5)
    651c:	80 91 a5 02 	lds	r24, 0x02A5
    6520:	28 2f       	mov	r18, r24
    6522:	30 e0       	ldi	r19, 0x00	; 0
    6524:	80 91 a8 02 	lds	r24, 0x02A8
    6528:	88 2f       	mov	r24, r24
    652a:	90 e0       	ldi	r25, 0x00	; 0
    652c:	a9 01       	movw	r20, r18
    652e:	48 1b       	sub	r20, r24
    6530:	59 0b       	sbc	r21, r25
    6532:	ca 01       	movw	r24, r20
    6534:	86 30       	cpi	r24, 0x06	; 6
    6536:	91 05       	cpc	r25, r1
    6538:	7c f0       	brlt	.+30     	; 0x6558 <Gas_Padel+0xb4>
			{
				if(CCS_Current)
    653a:	80 91 a7 02 	lds	r24, 0x02A7
    653e:	88 23       	and	r24, r24
    6540:	59 f0       	breq	.+22     	; 0x6558 <Gas_Padel+0xb4>
				{
					CCS_counter++;
    6542:	80 91 a6 02 	lds	r24, 0x02A6
    6546:	8f 5f       	subi	r24, 0xFF	; 255
    6548:	80 93 a6 02 	sts	0x02A6, r24
					CCS_Current=0;
    654c:	10 92 a7 02 	sts	0x02A7, r1
					speed_temp = speed;
    6550:	80 91 a8 02 	lds	r24, 0x02A8
    6554:	80 93 a5 02 	sts	0x02A5, r24
				}	
			}
		}
	}
	// Check for initial flag assignment
	if(local_flag == 0 )
    6558:	80 91 7a 02 	lds	r24, 0x027A
    655c:	88 23       	and	r24, r24
    655e:	39 f4       	brne	.+14     	; 0x656e <Gas_Padel+0xca>
	{
		speed_before = speed ;
    6560:	80 91 a8 02 	lds	r24, 0x02A8
    6564:	80 93 7c 02 	sts	0x027C, r24
		local_flag = 1 ;
    6568:	81 e0       	ldi	r24, 0x01	; 1
    656a:	80 93 7a 02 	sts	0x027A, r24
	}
	
	// Check for significant speed changes
	if ( checkspeedchange==1 && seconds !=  0)
    656e:	80 91 75 02 	lds	r24, 0x0275
    6572:	81 30       	cpi	r24, 0x01	; 1
    6574:	09 f0       	breq	.+2      	; 0x6578 <Gas_Padel+0xd4>
    6576:	5c c0       	rjmp	.+184    	; 0x6630 <Gas_Padel+0x18c>
    6578:	80 91 89 02 	lds	r24, 0x0289
    657c:	88 23       	and	r24, r24
    657e:	09 f4       	brne	.+2      	; 0x6582 <Gas_Padel+0xde>
    6580:	57 c0       	rjmp	.+174    	; 0x6630 <Gas_Padel+0x18c>
	{
		speed_after = speed ;
    6582:	80 91 a8 02 	lds	r24, 0x02A8
    6586:	80 93 7b 02 	sts	0x027B, r24
		
		if(speed_after > speed_before)
    658a:	90 91 7b 02 	lds	r25, 0x027B
    658e:	80 91 7c 02 	lds	r24, 0x027C
    6592:	89 17       	cp	r24, r25
    6594:	18 f5       	brcc	.+70     	; 0x65dc <Gas_Padel+0x138>
		{
			if((speed_after - speed_before) > 5)
    6596:	80 91 7b 02 	lds	r24, 0x027B
    659a:	28 2f       	mov	r18, r24
    659c:	30 e0       	ldi	r19, 0x00	; 0
    659e:	80 91 7c 02 	lds	r24, 0x027C
    65a2:	88 2f       	mov	r24, r24
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	a9 01       	movw	r20, r18
    65a8:	48 1b       	sub	r20, r24
    65aa:	59 0b       	sbc	r21, r25
    65ac:	ca 01       	movw	r24, r20
    65ae:	86 30       	cpi	r24, 0x06	; 6
    65b0:	91 05       	cpc	r25, r1
    65b2:	e4 f1       	brlt	.+120    	; 0x662c <Gas_Padel+0x188>
			{
				checkflagcounter++ ;
    65b4:	80 91 7e 02 	lds	r24, 0x027E
    65b8:	90 91 7f 02 	lds	r25, 0x027F
    65bc:	a0 91 80 02 	lds	r26, 0x0280
    65c0:	b0 91 81 02 	lds	r27, 0x0281
    65c4:	01 96       	adiw	r24, 0x01	; 1
    65c6:	a1 1d       	adc	r26, r1
    65c8:	b1 1d       	adc	r27, r1
    65ca:	80 93 7e 02 	sts	0x027E, r24
    65ce:	90 93 7f 02 	sts	0x027F, r25
    65d2:	a0 93 80 02 	sts	0x0280, r26
    65d6:	b0 93 81 02 	sts	0x0281, r27
    65da:	28 c0       	rjmp	.+80     	; 0x662c <Gas_Padel+0x188>
			}
			
		}
		else if ( speed_after < speed_before)
    65dc:	90 91 7b 02 	lds	r25, 0x027B
    65e0:	80 91 7c 02 	lds	r24, 0x027C
    65e4:	98 17       	cp	r25, r24
    65e6:	10 f5       	brcc	.+68     	; 0x662c <Gas_Padel+0x188>
		{
			if((speed_before - speed_after) > 5)
    65e8:	80 91 7c 02 	lds	r24, 0x027C
    65ec:	28 2f       	mov	r18, r24
    65ee:	30 e0       	ldi	r19, 0x00	; 0
    65f0:	80 91 7b 02 	lds	r24, 0x027B
    65f4:	88 2f       	mov	r24, r24
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	a9 01       	movw	r20, r18
    65fa:	48 1b       	sub	r20, r24
    65fc:	59 0b       	sbc	r21, r25
    65fe:	ca 01       	movw	r24, r20
    6600:	86 30       	cpi	r24, 0x06	; 6
    6602:	91 05       	cpc	r25, r1
    6604:	9c f0       	brlt	.+38     	; 0x662c <Gas_Padel+0x188>
			{
				checkflagcounter ++ ;
    6606:	80 91 7e 02 	lds	r24, 0x027E
    660a:	90 91 7f 02 	lds	r25, 0x027F
    660e:	a0 91 80 02 	lds	r26, 0x0280
    6612:	b0 91 81 02 	lds	r27, 0x0281
    6616:	01 96       	adiw	r24, 0x01	; 1
    6618:	a1 1d       	adc	r26, r1
    661a:	b1 1d       	adc	r27, r1
    661c:	80 93 7e 02 	sts	0x027E, r24
    6620:	90 93 7f 02 	sts	0x027F, r25
    6624:	a0 93 80 02 	sts	0x0280, r26
    6628:	b0 93 81 02 	sts	0x0281, r27
			}
		}
		checkspeedchange = 0 ;	
    662c:	10 92 75 02 	sts	0x0275, r1
	}
	speed_before = speed_after ;
    6630:	80 91 7b 02 	lds	r24, 0x027B
    6634:	80 93 7c 02 	sts	0x027C, r24
		
		
}
    6638:	cf 91       	pop	r28
    663a:	df 91       	pop	r29
    663c:	08 95       	ret

0000663e <Brakes_Padel>:
 * Parameters (in)  : None
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void Brakes_Padel(){
    663e:	df 93       	push	r29
    6640:	cf 93       	push	r28
    6642:	cd b7       	in	r28, 0x3d	; 61
    6644:	de b7       	in	r29, 0x3e	; 62
	
	// Turn on the red LED and set brakes current state
	LED_ON(LED_RED);
    6646:	80 e0       	ldi	r24, 0x00	; 0
    6648:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <LED_ON>
	Brakes_Current = 1 ;
    664c:	81 e0       	ldi	r24, 0x01	; 1
    664e:	80 93 6c 02 	sts	0x026C, r24
	Brakes_counter ++ ;
    6652:	80 91 73 02 	lds	r24, 0x0273
    6656:	8f 5f       	subi	r24, 0xFF	; 255
    6658:	80 93 73 02 	sts	0x0273, r24
	
	
	// Check if brakes status flag is set
	if(brakes_status_flag == 1)
    665c:	80 91 88 02 	lds	r24, 0x0288
    6660:	81 30       	cpi	r24, 0x01	; 1
    6662:	29 f4       	brne	.+10     	; 0x666e <Brakes_Padel+0x30>
	{
		// Update brakes current state and turn off the LED
		Brakes_Current = 0 ;
    6664:	10 92 6c 02 	sts	0x026C, r1
		LED_OFF(LED_RED);
    6668:	80 e0       	ldi	r24, 0x00	; 0
    666a:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <LED_OFF>
	}
}
    666e:	cf 91       	pop	r28
    6670:	df 91       	pop	r29
    6672:	08 95       	ret

00006674 <CCS_Control>:
 * Parameters (in)  : None
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void CCS_Control(){
    6674:	df 93       	push	r29
    6676:	cf 93       	push	r28
    6678:	cd b7       	in	r28, 0x3d	; 61
    667a:	de b7       	in	r29, 0x3e	; 62
    667c:	6c 97       	sbiw	r28, 0x1c	; 28
    667e:	0f b6       	in	r0, 0x3f	; 63
    6680:	f8 94       	cli
    6682:	de bf       	out	0x3e, r29	; 62
    6684:	0f be       	out	0x3f, r0	; 63
    6686:	cd bf       	out	0x3d, r28	; 61
	// Static variable to track speed flag
	u8 static speed_flag =0 ;
	
	// Check if CCS ADAS control flag is set
	if(CCS_ADAS_Control_flag == 1)
    6688:	80 91 74 02 	lds	r24, 0x0274
    668c:	81 30       	cpi	r24, 0x01	; 1
    668e:	09 f0       	breq	.+2      	; 0x6692 <CCS_Control+0x1e>
    6690:	0f c1       	rjmp	.+542    	; 0x68b0 <CCS_Control+0x23c>
	{
		// Check if current gear is in drive (D) mode
		if(Gear_Current == 'D'  )
    6692:	80 91 30 02 	lds	r24, 0x0230
    6696:	84 34       	cpi	r24, 0x44	; 68
    6698:	09 f0       	breq	.+2      	; 0x669c <CCS_Control+0x28>
    669a:	8d c0       	rjmp	.+282    	; 0x67b6 <CCS_Control+0x142>
		{
			// Set CCS start once flag and update speed flag
				ccs_start_once = 1 ;
    669c:	81 e0       	ldi	r24, 0x01	; 1
    669e:	80 93 79 02 	sts	0x0279, r24
				if(speed_flag == 0)
    66a2:	80 91 7d 02 	lds	r24, 0x027D
    66a6:	88 23       	and	r24, r24
    66a8:	39 f4       	brne	.+14     	; 0x66b8 <CCS_Control+0x44>
				{
					speed_temp = speed ;
    66aa:	80 91 a8 02 	lds	r24, 0x02A8
    66ae:	80 93 a5 02 	sts	0x02A5, r24
					speed_flag = 1;
    66b2:	81 e0       	ldi	r24, 0x01	; 1
    66b4:	80 93 7d 02 	sts	0x027D, r24
				}
				// Increment CCS counter, activate buzzer, and set CCS current state
				CCS_counter++;
    66b8:	80 91 a6 02 	lds	r24, 0x02A6
    66bc:	8f 5f       	subi	r24, 0xFF	; 255
    66be:	80 93 a6 02 	sts	0x02A6, r24
				BUZZER_ON();
    66c2:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <BUZZER_ON>
    66c6:	80 e0       	ldi	r24, 0x00	; 0
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	a0 e2       	ldi	r26, 0x20	; 32
    66cc:	b1 e4       	ldi	r27, 0x41	; 65
    66ce:	89 8f       	std	Y+25, r24	; 0x19
    66d0:	9a 8f       	std	Y+26, r25	; 0x1a
    66d2:	ab 8f       	std	Y+27, r26	; 0x1b
    66d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66d6:	69 8d       	ldd	r22, Y+25	; 0x19
    66d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    66da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    66dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    66de:	20 e0       	ldi	r18, 0x00	; 0
    66e0:	30 e0       	ldi	r19, 0x00	; 0
    66e2:	4a e7       	ldi	r20, 0x7A	; 122
    66e4:	55 e4       	ldi	r21, 0x45	; 69
    66e6:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    66ea:	dc 01       	movw	r26, r24
    66ec:	cb 01       	movw	r24, r22
    66ee:	8d 8b       	std	Y+21, r24	; 0x15
    66f0:	9e 8b       	std	Y+22, r25	; 0x16
    66f2:	af 8b       	std	Y+23, r26	; 0x17
    66f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    66f6:	6d 89       	ldd	r22, Y+21	; 0x15
    66f8:	7e 89       	ldd	r23, Y+22	; 0x16
    66fa:	8f 89       	ldd	r24, Y+23	; 0x17
    66fc:	98 8d       	ldd	r25, Y+24	; 0x18
    66fe:	20 e0       	ldi	r18, 0x00	; 0
    6700:	30 e0       	ldi	r19, 0x00	; 0
    6702:	40 e8       	ldi	r20, 0x80	; 128
    6704:	5f e3       	ldi	r21, 0x3F	; 63
    6706:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    670a:	88 23       	and	r24, r24
    670c:	2c f4       	brge	.+10     	; 0x6718 <CCS_Control+0xa4>
		__ticks = 1;
    670e:	81 e0       	ldi	r24, 0x01	; 1
    6710:	90 e0       	ldi	r25, 0x00	; 0
    6712:	9c 8b       	std	Y+20, r25	; 0x14
    6714:	8b 8b       	std	Y+19, r24	; 0x13
    6716:	3f c0       	rjmp	.+126    	; 0x6796 <CCS_Control+0x122>
	else if (__tmp > 65535)
    6718:	6d 89       	ldd	r22, Y+21	; 0x15
    671a:	7e 89       	ldd	r23, Y+22	; 0x16
    671c:	8f 89       	ldd	r24, Y+23	; 0x17
    671e:	98 8d       	ldd	r25, Y+24	; 0x18
    6720:	20 e0       	ldi	r18, 0x00	; 0
    6722:	3f ef       	ldi	r19, 0xFF	; 255
    6724:	4f e7       	ldi	r20, 0x7F	; 127
    6726:	57 e4       	ldi	r21, 0x47	; 71
    6728:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    672c:	18 16       	cp	r1, r24
    672e:	4c f5       	brge	.+82     	; 0x6782 <CCS_Control+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6730:	69 8d       	ldd	r22, Y+25	; 0x19
    6732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6738:	20 e0       	ldi	r18, 0x00	; 0
    673a:	30 e0       	ldi	r19, 0x00	; 0
    673c:	40 e2       	ldi	r20, 0x20	; 32
    673e:	51 e4       	ldi	r21, 0x41	; 65
    6740:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    6744:	dc 01       	movw	r26, r24
    6746:	cb 01       	movw	r24, r22
    6748:	bc 01       	movw	r22, r24
    674a:	cd 01       	movw	r24, r26
    674c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6750:	dc 01       	movw	r26, r24
    6752:	cb 01       	movw	r24, r22
    6754:	9c 8b       	std	Y+20, r25	; 0x14
    6756:	8b 8b       	std	Y+19, r24	; 0x13
    6758:	0f c0       	rjmp	.+30     	; 0x6778 <CCS_Control+0x104>
    675a:	80 e9       	ldi	r24, 0x90	; 144
    675c:	91 e0       	ldi	r25, 0x01	; 1
    675e:	9a 8b       	std	Y+18, r25	; 0x12
    6760:	89 8b       	std	Y+17, r24	; 0x11
    6762:	89 89       	ldd	r24, Y+17	; 0x11
    6764:	9a 89       	ldd	r25, Y+18	; 0x12
    6766:	01 97       	sbiw	r24, 0x01	; 1
    6768:	f1 f7       	brne	.-4      	; 0x6766 <CCS_Control+0xf2>
    676a:	9a 8b       	std	Y+18, r25	; 0x12
    676c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    676e:	8b 89       	ldd	r24, Y+19	; 0x13
    6770:	9c 89       	ldd	r25, Y+20	; 0x14
    6772:	01 97       	sbiw	r24, 0x01	; 1
    6774:	9c 8b       	std	Y+20, r25	; 0x14
    6776:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6778:	8b 89       	ldd	r24, Y+19	; 0x13
    677a:	9c 89       	ldd	r25, Y+20	; 0x14
    677c:	00 97       	sbiw	r24, 0x00	; 0
    677e:	69 f7       	brne	.-38     	; 0x675a <CCS_Control+0xe6>
    6780:	14 c0       	rjmp	.+40     	; 0x67aa <CCS_Control+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6782:	6d 89       	ldd	r22, Y+21	; 0x15
    6784:	7e 89       	ldd	r23, Y+22	; 0x16
    6786:	8f 89       	ldd	r24, Y+23	; 0x17
    6788:	98 8d       	ldd	r25, Y+24	; 0x18
    678a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    678e:	dc 01       	movw	r26, r24
    6790:	cb 01       	movw	r24, r22
    6792:	9c 8b       	std	Y+20, r25	; 0x14
    6794:	8b 8b       	std	Y+19, r24	; 0x13
    6796:	8b 89       	ldd	r24, Y+19	; 0x13
    6798:	9c 89       	ldd	r25, Y+20	; 0x14
    679a:	98 8b       	std	Y+16, r25	; 0x10
    679c:	8f 87       	std	Y+15, r24	; 0x0f
    679e:	8f 85       	ldd	r24, Y+15	; 0x0f
    67a0:	98 89       	ldd	r25, Y+16	; 0x10
    67a2:	01 97       	sbiw	r24, 0x01	; 1
    67a4:	f1 f7       	brne	.-4      	; 0x67a2 <CCS_Control+0x12e>
    67a6:	98 8b       	std	Y+16, r25	; 0x10
    67a8:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(10);
				BUZZER_OFF();
    67aa:	0e 94 38 35 	call	0x6a70	; 0x6a70 <BUZZER_OFF>
				CCS_Current = 1;
    67ae:	81 e0       	ldi	r24, 0x01	; 1
    67b0:	80 93 a7 02 	sts	0x02A7, r24
    67b4:	7b c0       	rjmp	.+246    	; 0x68ac <CCS_Control+0x238>
		}
		else if(Gear_Current != 'D')
    67b6:	80 91 30 02 	lds	r24, 0x0230
    67ba:	84 34       	cpi	r24, 0x44	; 68
    67bc:	09 f4       	brne	.+2      	; 0x67c0 <CCS_Control+0x14c>
    67be:	76 c0       	rjmp	.+236    	; 0x68ac <CCS_Control+0x238>
		{
			// Trigger alarm if gear is not in drive (D) mode
			ALARM_ON();
    67c0:	0e 94 0e 32 	call	0x641c	; 0x641c <ALARM_ON>
    67c4:	80 e0       	ldi	r24, 0x00	; 0
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	a8 ec       	ldi	r26, 0xC8	; 200
    67ca:	b2 e4       	ldi	r27, 0x42	; 66
    67cc:	8b 87       	std	Y+11, r24	; 0x0b
    67ce:	9c 87       	std	Y+12, r25	; 0x0c
    67d0:	ad 87       	std	Y+13, r26	; 0x0d
    67d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    67d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    67d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    67da:	9e 85       	ldd	r25, Y+14	; 0x0e
    67dc:	20 e0       	ldi	r18, 0x00	; 0
    67de:	30 e0       	ldi	r19, 0x00	; 0
    67e0:	4a e7       	ldi	r20, 0x7A	; 122
    67e2:	55 e4       	ldi	r21, 0x45	; 69
    67e4:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    67e8:	dc 01       	movw	r26, r24
    67ea:	cb 01       	movw	r24, r22
    67ec:	8f 83       	std	Y+7, r24	; 0x07
    67ee:	98 87       	std	Y+8, r25	; 0x08
    67f0:	a9 87       	std	Y+9, r26	; 0x09
    67f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    67f4:	6f 81       	ldd	r22, Y+7	; 0x07
    67f6:	78 85       	ldd	r23, Y+8	; 0x08
    67f8:	89 85       	ldd	r24, Y+9	; 0x09
    67fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    67fc:	20 e0       	ldi	r18, 0x00	; 0
    67fe:	30 e0       	ldi	r19, 0x00	; 0
    6800:	40 e8       	ldi	r20, 0x80	; 128
    6802:	5f e3       	ldi	r21, 0x3F	; 63
    6804:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    6808:	88 23       	and	r24, r24
    680a:	2c f4       	brge	.+10     	; 0x6816 <CCS_Control+0x1a2>
		__ticks = 1;
    680c:	81 e0       	ldi	r24, 0x01	; 1
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	9e 83       	std	Y+6, r25	; 0x06
    6812:	8d 83       	std	Y+5, r24	; 0x05
    6814:	3f c0       	rjmp	.+126    	; 0x6894 <CCS_Control+0x220>
	else if (__tmp > 65535)
    6816:	6f 81       	ldd	r22, Y+7	; 0x07
    6818:	78 85       	ldd	r23, Y+8	; 0x08
    681a:	89 85       	ldd	r24, Y+9	; 0x09
    681c:	9a 85       	ldd	r25, Y+10	; 0x0a
    681e:	20 e0       	ldi	r18, 0x00	; 0
    6820:	3f ef       	ldi	r19, 0xFF	; 255
    6822:	4f e7       	ldi	r20, 0x7F	; 127
    6824:	57 e4       	ldi	r21, 0x47	; 71
    6826:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    682a:	18 16       	cp	r1, r24
    682c:	4c f5       	brge	.+82     	; 0x6880 <CCS_Control+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    682e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6830:	7c 85       	ldd	r23, Y+12	; 0x0c
    6832:	8d 85       	ldd	r24, Y+13	; 0x0d
    6834:	9e 85       	ldd	r25, Y+14	; 0x0e
    6836:	20 e0       	ldi	r18, 0x00	; 0
    6838:	30 e0       	ldi	r19, 0x00	; 0
    683a:	40 e2       	ldi	r20, 0x20	; 32
    683c:	51 e4       	ldi	r21, 0x41	; 65
    683e:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    6842:	dc 01       	movw	r26, r24
    6844:	cb 01       	movw	r24, r22
    6846:	bc 01       	movw	r22, r24
    6848:	cd 01       	movw	r24, r26
    684a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    684e:	dc 01       	movw	r26, r24
    6850:	cb 01       	movw	r24, r22
    6852:	9e 83       	std	Y+6, r25	; 0x06
    6854:	8d 83       	std	Y+5, r24	; 0x05
    6856:	0f c0       	rjmp	.+30     	; 0x6876 <CCS_Control+0x202>
    6858:	80 e9       	ldi	r24, 0x90	; 144
    685a:	91 e0       	ldi	r25, 0x01	; 1
    685c:	9c 83       	std	Y+4, r25	; 0x04
    685e:	8b 83       	std	Y+3, r24	; 0x03
    6860:	8b 81       	ldd	r24, Y+3	; 0x03
    6862:	9c 81       	ldd	r25, Y+4	; 0x04
    6864:	01 97       	sbiw	r24, 0x01	; 1
    6866:	f1 f7       	brne	.-4      	; 0x6864 <CCS_Control+0x1f0>
    6868:	9c 83       	std	Y+4, r25	; 0x04
    686a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    686c:	8d 81       	ldd	r24, Y+5	; 0x05
    686e:	9e 81       	ldd	r25, Y+6	; 0x06
    6870:	01 97       	sbiw	r24, 0x01	; 1
    6872:	9e 83       	std	Y+6, r25	; 0x06
    6874:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6876:	8d 81       	ldd	r24, Y+5	; 0x05
    6878:	9e 81       	ldd	r25, Y+6	; 0x06
    687a:	00 97       	sbiw	r24, 0x00	; 0
    687c:	69 f7       	brne	.-38     	; 0x6858 <CCS_Control+0x1e4>
    687e:	14 c0       	rjmp	.+40     	; 0x68a8 <CCS_Control+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6880:	6f 81       	ldd	r22, Y+7	; 0x07
    6882:	78 85       	ldd	r23, Y+8	; 0x08
    6884:	89 85       	ldd	r24, Y+9	; 0x09
    6886:	9a 85       	ldd	r25, Y+10	; 0x0a
    6888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    688c:	dc 01       	movw	r26, r24
    688e:	cb 01       	movw	r24, r22
    6890:	9e 83       	std	Y+6, r25	; 0x06
    6892:	8d 83       	std	Y+5, r24	; 0x05
    6894:	8d 81       	ldd	r24, Y+5	; 0x05
    6896:	9e 81       	ldd	r25, Y+6	; 0x06
    6898:	9a 83       	std	Y+2, r25	; 0x02
    689a:	89 83       	std	Y+1, r24	; 0x01
    689c:	89 81       	ldd	r24, Y+1	; 0x01
    689e:	9a 81       	ldd	r25, Y+2	; 0x02
    68a0:	01 97       	sbiw	r24, 0x01	; 1
    68a2:	f1 f7       	brne	.-4      	; 0x68a0 <CCS_Control+0x22c>
    68a4:	9a 83       	std	Y+2, r25	; 0x02
    68a6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			ALARM_OFF();
    68a8:	0e 94 18 32 	call	0x6430	; 0x6430 <ALARM_OFF>
		}
		
     	// Reset CCS ADAS control flag
		CCS_ADAS_Control_flag =0 ;	
    68ac:	10 92 74 02 	sts	0x0274, r1
	}
}
    68b0:	6c 96       	adiw	r28, 0x1c	; 28
    68b2:	0f b6       	in	r0, 0x3f	; 63
    68b4:	f8 94       	cli
    68b6:	de bf       	out	0x3e, r29	; 62
    68b8:	0f be       	out	0x3f, r0	; 63
    68ba:	cd bf       	out	0x3d, r28	; 61
    68bc:	cf 91       	pop	r28
    68be:	df 91       	pop	r29
    68c0:	08 95       	ret

000068c2 <Gear_Control>:
 *                    deactivating alarm.
 * Parameters (in)  : None
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/
void Gear_Control(){
    68c2:	df 93       	push	r29
    68c4:	cf 93       	push	r28
    68c6:	cd b7       	in	r28, 0x3d	; 61
    68c8:	de b7       	in	r29, 0x3e	; 62
    68ca:	2e 97       	sbiw	r28, 0x0e	; 14
    68cc:	0f b6       	in	r0, 0x3f	; 63
    68ce:	f8 94       	cli
    68d0:	de bf       	out	0x3e, r29	; 62
    68d2:	0f be       	out	0x3f, r0	; 63
    68d4:	cd bf       	out	0x3d, r28	; 61
		// Check if brakes are engaged
		if ( Brakes_Current == 1)
    68d6:	80 91 6c 02 	lds	r24, 0x026C
    68da:	81 30       	cpi	r24, 0x01	; 1
    68dc:	09 f0       	breq	.+2      	; 0x68e0 <Gear_Control+0x1e>
    68de:	9a c0       	rjmp	.+308    	; 0x6a14 <Gear_Control+0x152>
		{
			Gear_counter ++;// Increment gear counter
    68e0:	80 91 6e 02 	lds	r24, 0x026E
    68e4:	8f 5f       	subi	r24, 0xFF	; 255
    68e6:	80 93 6e 02 	sts	0x026E, r24
			SPS_Current = 0 ; // Update SPS current state
    68ea:	10 92 87 02 	sts	0x0287, r1
			Gear_Current = Gear_Status[Gear_counter%3]; // Set gear current state based on gear counter
    68ee:	80 91 6e 02 	lds	r24, 0x026E
    68f2:	93 e0       	ldi	r25, 0x03	; 3
    68f4:	69 2f       	mov	r22, r25
    68f6:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    68fa:	89 2f       	mov	r24, r25
    68fc:	88 2f       	mov	r24, r24
    68fe:	90 e0       	ldi	r25, 0x00	; 0
    6900:	fc 01       	movw	r30, r24
    6902:	e3 5d       	subi	r30, 0xD3	; 211
    6904:	fd 4f       	sbci	r31, 0xFD	; 253
    6906:	80 81       	ld	r24, Z
    6908:	80 93 30 02 	sts	0x0230, r24
			
			// Activate buzzer
			BUZZER_ON();
    690c:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <BUZZER_ON>
    6910:	80 e0       	ldi	r24, 0x00	; 0
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	a0 e2       	ldi	r26, 0x20	; 32
    6916:	b1 e4       	ldi	r27, 0x41	; 65
    6918:	8b 87       	std	Y+11, r24	; 0x0b
    691a:	9c 87       	std	Y+12, r25	; 0x0c
    691c:	ad 87       	std	Y+13, r26	; 0x0d
    691e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6920:	6b 85       	ldd	r22, Y+11	; 0x0b
    6922:	7c 85       	ldd	r23, Y+12	; 0x0c
    6924:	8d 85       	ldd	r24, Y+13	; 0x0d
    6926:	9e 85       	ldd	r25, Y+14	; 0x0e
    6928:	20 e0       	ldi	r18, 0x00	; 0
    692a:	30 e0       	ldi	r19, 0x00	; 0
    692c:	4a e7       	ldi	r20, 0x7A	; 122
    692e:	55 e4       	ldi	r21, 0x45	; 69
    6930:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    6934:	dc 01       	movw	r26, r24
    6936:	cb 01       	movw	r24, r22
    6938:	8f 83       	std	Y+7, r24	; 0x07
    693a:	98 87       	std	Y+8, r25	; 0x08
    693c:	a9 87       	std	Y+9, r26	; 0x09
    693e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6940:	6f 81       	ldd	r22, Y+7	; 0x07
    6942:	78 85       	ldd	r23, Y+8	; 0x08
    6944:	89 85       	ldd	r24, Y+9	; 0x09
    6946:	9a 85       	ldd	r25, Y+10	; 0x0a
    6948:	20 e0       	ldi	r18, 0x00	; 0
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	40 e8       	ldi	r20, 0x80	; 128
    694e:	5f e3       	ldi	r21, 0x3F	; 63
    6950:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ltsf2>
    6954:	88 23       	and	r24, r24
    6956:	2c f4       	brge	.+10     	; 0x6962 <Gear_Control+0xa0>
		__ticks = 1;
    6958:	81 e0       	ldi	r24, 0x01	; 1
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	9e 83       	std	Y+6, r25	; 0x06
    695e:	8d 83       	std	Y+5, r24	; 0x05
    6960:	3f c0       	rjmp	.+126    	; 0x69e0 <Gear_Control+0x11e>
	else if (__tmp > 65535)
    6962:	6f 81       	ldd	r22, Y+7	; 0x07
    6964:	78 85       	ldd	r23, Y+8	; 0x08
    6966:	89 85       	ldd	r24, Y+9	; 0x09
    6968:	9a 85       	ldd	r25, Y+10	; 0x0a
    696a:	20 e0       	ldi	r18, 0x00	; 0
    696c:	3f ef       	ldi	r19, 0xFF	; 255
    696e:	4f e7       	ldi	r20, 0x7F	; 127
    6970:	57 e4       	ldi	r21, 0x47	; 71
    6972:	0e 94 2a 14 	call	0x2854	; 0x2854 <__gtsf2>
    6976:	18 16       	cp	r1, r24
    6978:	4c f5       	brge	.+82     	; 0x69cc <Gear_Control+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    697a:	6b 85       	ldd	r22, Y+11	; 0x0b
    697c:	7c 85       	ldd	r23, Y+12	; 0x0c
    697e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6980:	9e 85       	ldd	r25, Y+14	; 0x0e
    6982:	20 e0       	ldi	r18, 0x00	; 0
    6984:	30 e0       	ldi	r19, 0x00	; 0
    6986:	40 e2       	ldi	r20, 0x20	; 32
    6988:	51 e4       	ldi	r21, 0x41	; 65
    698a:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulsf3>
    698e:	dc 01       	movw	r26, r24
    6990:	cb 01       	movw	r24, r22
    6992:	bc 01       	movw	r22, r24
    6994:	cd 01       	movw	r24, r26
    6996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    699a:	dc 01       	movw	r26, r24
    699c:	cb 01       	movw	r24, r22
    699e:	9e 83       	std	Y+6, r25	; 0x06
    69a0:	8d 83       	std	Y+5, r24	; 0x05
    69a2:	0f c0       	rjmp	.+30     	; 0x69c2 <Gear_Control+0x100>
    69a4:	80 e9       	ldi	r24, 0x90	; 144
    69a6:	91 e0       	ldi	r25, 0x01	; 1
    69a8:	9c 83       	std	Y+4, r25	; 0x04
    69aa:	8b 83       	std	Y+3, r24	; 0x03
    69ac:	8b 81       	ldd	r24, Y+3	; 0x03
    69ae:	9c 81       	ldd	r25, Y+4	; 0x04
    69b0:	01 97       	sbiw	r24, 0x01	; 1
    69b2:	f1 f7       	brne	.-4      	; 0x69b0 <Gear_Control+0xee>
    69b4:	9c 83       	std	Y+4, r25	; 0x04
    69b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    69b8:	8d 81       	ldd	r24, Y+5	; 0x05
    69ba:	9e 81       	ldd	r25, Y+6	; 0x06
    69bc:	01 97       	sbiw	r24, 0x01	; 1
    69be:	9e 83       	std	Y+6, r25	; 0x06
    69c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    69c2:	8d 81       	ldd	r24, Y+5	; 0x05
    69c4:	9e 81       	ldd	r25, Y+6	; 0x06
    69c6:	00 97       	sbiw	r24, 0x00	; 0
    69c8:	69 f7       	brne	.-38     	; 0x69a4 <Gear_Control+0xe2>
    69ca:	14 c0       	rjmp	.+40     	; 0x69f4 <Gear_Control+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    69cc:	6f 81       	ldd	r22, Y+7	; 0x07
    69ce:	78 85       	ldd	r23, Y+8	; 0x08
    69d0:	89 85       	ldd	r24, Y+9	; 0x09
    69d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    69d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    69d8:	dc 01       	movw	r26, r24
    69da:	cb 01       	movw	r24, r22
    69dc:	9e 83       	std	Y+6, r25	; 0x06
    69de:	8d 83       	std	Y+5, r24	; 0x05
    69e0:	8d 81       	ldd	r24, Y+5	; 0x05
    69e2:	9e 81       	ldd	r25, Y+6	; 0x06
    69e4:	9a 83       	std	Y+2, r25	; 0x02
    69e6:	89 83       	std	Y+1, r24	; 0x01
    69e8:	89 81       	ldd	r24, Y+1	; 0x01
    69ea:	9a 81       	ldd	r25, Y+2	; 0x02
    69ec:	01 97       	sbiw	r24, 0x01	; 1
    69ee:	f1 f7       	brne	.-4      	; 0x69ec <Gear_Control+0x12a>
    69f0:	9a 83       	std	Y+2, r25	; 0x02
    69f2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			BUZZER_OFF();
    69f4:	0e 94 38 35 	call	0x6a70	; 0x6a70 <BUZZER_OFF>

			// If CCS is active, trigger CCS control
			if(CCS_Current){
    69f8:	80 91 a7 02 	lds	r24, 0x02A7
    69fc:	88 23       	and	r24, r24
    69fe:	81 f0       	breq	.+32     	; 0x6a20 <Gear_Control+0x15e>
				CCS_counter++;
    6a00:	80 91 a6 02 	lds	r24, 0x02A6
    6a04:	8f 5f       	subi	r24, 0xFF	; 255
    6a06:	80 93 a6 02 	sts	0x02A6, r24
				CCS_Current = 0;
    6a0a:	10 92 a7 02 	sts	0x02A7, r1
				CCS_Control();
    6a0e:	0e 94 3a 33 	call	0x6674	; 0x6674 <CCS_Control>
    6a12:	06 c0       	rjmp	.+12     	; 0x6a20 <Gear_Control+0x15e>
			}
		}
		
		else if (Brakes_Current == 0)
    6a14:	80 91 6c 02 	lds	r24, 0x026C
    6a18:	88 23       	and	r24, r24
    6a1a:	11 f4       	brne	.+4      	; 0x6a20 <Gear_Control+0x15e>
		{
			// If brakes are not engaged Activate alarm
			ALARM_ON();
    6a1c:	0e 94 0e 32 	call	0x641c	; 0x641c <ALARM_ON>
				
	}
	// Wait for button press to deactivate alarm
	while (!(Get_ButtonStatus(BUTTON_4)));
    6a20:	83 e0       	ldi	r24, 0x03	; 3
    6a22:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <Get_ButtonStatus>
    6a26:	88 23       	and	r24, r24
    6a28:	d9 f3       	breq	.-10     	; 0x6a20 <Gear_Control+0x15e>
	// Deactivate alarm
		ALARM_OFF();
    6a2a:	0e 94 18 32 	call	0x6430	; 0x6430 <ALARM_OFF>
}
    6a2e:	2e 96       	adiw	r28, 0x0e	; 14
    6a30:	0f b6       	in	r0, 0x3f	; 63
    6a32:	f8 94       	cli
    6a34:	de bf       	out	0x3e, r29	; 62
    6a36:	0f be       	out	0x3f, r0	; 63
    6a38:	cd bf       	out	0x3d, r28	; 61
    6a3a:	cf 91       	pop	r28
    6a3c:	df 91       	pop	r29
    6a3e:	08 95       	ret

00006a40 <BUZZER_Init>:
#include "BUZZER_private.h"



void BUZZER_Init (void)
{
    6a40:	df 93       	push	r29
    6a42:	cf 93       	push	r28
    6a44:	cd b7       	in	r28, 0x3d	; 61
    6a46:	de b7       	in	r29, 0x3e	; 62
	DIO_Set_Pin_Direction(PORT_C,PIN6 , OUTPUT);
    6a48:	82 e0       	ldi	r24, 0x02	; 2
    6a4a:	66 e0       	ldi	r22, 0x06	; 6
    6a4c:	40 e0       	ldi	r20, 0x00	; 0
    6a4e:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>
}
    6a52:	cf 91       	pop	r28
    6a54:	df 91       	pop	r29
    6a56:	08 95       	ret

00006a58 <BUZZER_ON>:
void BUZZER_ON(void)
{
    6a58:	df 93       	push	r29
    6a5a:	cf 93       	push	r28
    6a5c:	cd b7       	in	r28, 0x3d	; 61
    6a5e:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin(PORT_C , PIN6 , HIGH);
    6a60:	82 e0       	ldi	r24, 0x02	; 2
    6a62:	66 e0       	ldi	r22, 0x06	; 6
    6a64:	41 e0       	ldi	r20, 0x01	; 1
    6a66:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
}
    6a6a:	cf 91       	pop	r28
    6a6c:	df 91       	pop	r29
    6a6e:	08 95       	ret

00006a70 <BUZZER_OFF>:
void BUZZER_OFF(void)
{
    6a70:	df 93       	push	r29
    6a72:	cf 93       	push	r28
    6a74:	cd b7       	in	r28, 0x3d	; 61
    6a76:	de b7       	in	r29, 0x3e	; 62
	DIO_Write_Pin(PORT_C , PIN6 , LOW);
    6a78:	82 e0       	ldi	r24, 0x02	; 2
    6a7a:	66 e0       	ldi	r22, 0x06	; 6
    6a7c:	40 e0       	ldi	r20, 0x00	; 0
    6a7e:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <DIO_Write_Pin>
}
    6a82:	cf 91       	pop	r28
    6a84:	df 91       	pop	r29
    6a86:	08 95       	ret

00006a88 <BAS_Main>:
#include "BAS.h"



void BAS_Main(void)
{
    6a88:	df 93       	push	r29
    6a8a:	cf 93       	push	r28
    6a8c:	cd b7       	in	r28, 0x3d	; 61
    6a8e:	de b7       	in	r29, 0x3e	; 62
	
    6a90:	cf 91       	pop	r28
    6a92:	df 91       	pop	r29
    6a94:	08 95       	ret

00006a96 <TIMER_ISR>:
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void TIMER_ISR (void)
{
    6a96:	df 93       	push	r29
    6a98:	cf 93       	push	r28
    6a9a:	cd b7       	in	r28, 0x3d	; 61
    6a9c:	de b7       	in	r29, 0x3e	; 62
	static u8 flag =0 ;
	static u8 flag_2 = 0 ;
	// Control relay based on state flag
	if (RELAY_State_Flag_1 == 1 )
    6a9e:	80 91 85 02 	lds	r24, 0x0285
    6aa2:	81 30       	cpi	r24, 0x01	; 1
    6aa4:	a1 f4       	brne	.+40     	; 0x6ace <TIMER_ISR+0x38>
	{
		if(flag == 0 )
    6aa6:	80 91 90 02 	lds	r24, 0x0290
    6aaa:	88 23       	and	r24, r24
    6aac:	39 f4       	brne	.+14     	; 0x6abc <TIMER_ISR+0x26>
		{
			RELAY_ON(RELAY_ONE);
    6aae:	81 e0       	ldi	r24, 0x01	; 1
    6ab0:	0e 94 72 24 	call	0x48e4	; 0x48e4 <RELAY_ON>
			flag = 1 ;
    6ab4:	81 e0       	ldi	r24, 0x01	; 1
    6ab6:	80 93 90 02 	sts	0x0290, r24
    6aba:	09 c0       	rjmp	.+18     	; 0x6ace <TIMER_ISR+0x38>
		}
		else if (flag ==1 )
    6abc:	80 91 90 02 	lds	r24, 0x0290
    6ac0:	81 30       	cpi	r24, 0x01	; 1
    6ac2:	29 f4       	brne	.+10     	; 0x6ace <TIMER_ISR+0x38>
		{
			RELAY_OFF(RELAY_ONE);
    6ac4:	81 e0       	ldi	r24, 0x01	; 1
    6ac6:	0e 94 8d 24 	call	0x491a	; 0x491a <RELAY_OFF>
			flag = 0;
    6aca:	10 92 90 02 	sts	0x0290, r1
		}
	}

	if (RELAY_State_Flag_2 == 1 )
    6ace:	80 91 86 02 	lds	r24, 0x0286
    6ad2:	81 30       	cpi	r24, 0x01	; 1
    6ad4:	a1 f4       	brne	.+40     	; 0x6afe <TIMER_ISR+0x68>
	{
		if(flag_2 == 0 )
    6ad6:	80 91 8f 02 	lds	r24, 0x028F
    6ada:	88 23       	and	r24, r24
    6adc:	39 f4       	brne	.+14     	; 0x6aec <TIMER_ISR+0x56>
		{
			RELAY_ON(RELAY_TWO);
    6ade:	82 e0       	ldi	r24, 0x02	; 2
    6ae0:	0e 94 72 24 	call	0x48e4	; 0x48e4 <RELAY_ON>
			flag_2 = 1 ;
    6ae4:	81 e0       	ldi	r24, 0x01	; 1
    6ae6:	80 93 8f 02 	sts	0x028F, r24
    6aea:	09 c0       	rjmp	.+18     	; 0x6afe <TIMER_ISR+0x68>
		}
		else if (flag_2 ==1 )
    6aec:	80 91 8f 02 	lds	r24, 0x028F
    6af0:	81 30       	cpi	r24, 0x01	; 1
    6af2:	29 f4       	brne	.+10     	; 0x6afe <TIMER_ISR+0x68>
		{
			RELAY_OFF(RELAY_TWO);
    6af4:	82 e0       	ldi	r24, 0x02	; 2
    6af6:	0e 94 8d 24 	call	0x491a	; 0x491a <RELAY_OFF>
			flag_2 = 0;
    6afa:	10 92 8f 02 	sts	0x028F, r1
		}
	}

	// Increment seconds and perform time calculations
	seconds ++ ;
    6afe:	80 91 89 02 	lds	r24, 0x0289
    6b02:	8f 5f       	subi	r24, 0xFF	; 255
    6b04:	80 93 89 02 	sts	0x0289, r24
	monitor_flag_counter_1s = 1 ;
    6b08:	81 e0       	ldi	r24, 0x01	; 1
    6b0a:	80 93 82 02 	sts	0x0282, r24
	if(seconds%5 == 0){
    6b0e:	80 91 89 02 	lds	r24, 0x0289
    6b12:	95 e0       	ldi	r25, 0x05	; 5
    6b14:	69 2f       	mov	r22, r25
    6b16:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    6b1a:	89 2f       	mov	r24, r25
    6b1c:	88 23       	and	r24, r24
    6b1e:	51 f4       	brne	.+20     	; 0x6b34 <TIMER_ISR+0x9e>
		if(Gear_Current == 'D')
    6b20:	80 91 30 02 	lds	r24, 0x0230
    6b24:	84 34       	cpi	r24, 0x44	; 68
    6b26:	31 f4       	brne	.+12     	; 0x6b34 <TIMER_ISR+0x9e>
		{
			monitor_flag_counter_5s =1 ;
    6b28:	81 e0       	ldi	r24, 0x01	; 1
    6b2a:	80 93 83 02 	sts	0x0283, r24
			checkspeedchange = 1 ;
    6b2e:	81 e0       	ldi	r24, 0x01	; 1
    6b30:	80 93 75 02 	sts	0x0275, r24
		if(Gear_Current == 'D')
		{
			checkspeedchange = 1 ;
		}	
	}*/
	if ( seconds == 60)
    6b34:	80 91 89 02 	lds	r24, 0x0289
    6b38:	8c 33       	cpi	r24, 0x3C	; 60
    6b3a:	b9 f5       	brne	.+110    	; 0x6baa <TIMER_ISR+0x114>
	{
		seconds = 0 ;
    6b3c:	10 92 89 02 	sts	0x0289, r1
		mintues ++ ;
    6b40:	80 91 8a 02 	lds	r24, 0x028A
    6b44:	8f 5f       	subi	r24, 0xFF	; 255
    6b46:	80 93 8a 02 	sts	0x028A, r24
		if (mintues == 60)
    6b4a:	80 91 8a 02 	lds	r24, 0x028A
    6b4e:	8c 33       	cpi	r24, 0x3C	; 60
    6b50:	61 f5       	brne	.+88     	; 0x6baa <TIMER_ISR+0x114>
		{
			mintues = 0 ;
    6b52:	10 92 8a 02 	sts	0x028A, r1
			hours ++ ;
    6b56:	80 91 8b 02 	lds	r24, 0x028B
    6b5a:	8f 5f       	subi	r24, 0xFF	; 255
    6b5c:	80 93 8b 02 	sts	0x028B, r24
			if(hours==24)
    6b60:	80 91 8b 02 	lds	r24, 0x028B
    6b64:	88 31       	cpi	r24, 0x18	; 24
    6b66:	09 f5       	brne	.+66     	; 0x6baa <TIMER_ISR+0x114>
			{
				hours = 0;
    6b68:	10 92 8b 02 	sts	0x028B, r1
				days++ ;
    6b6c:	80 91 33 02 	lds	r24, 0x0233
    6b70:	8f 5f       	subi	r24, 0xFF	; 255
    6b72:	80 93 33 02 	sts	0x0233, r24
				if(days == 30 )
    6b76:	80 91 33 02 	lds	r24, 0x0233
    6b7a:	8e 31       	cpi	r24, 0x1E	; 30
    6b7c:	b1 f4       	brne	.+44     	; 0x6baa <TIMER_ISR+0x114>
				{
					days = 0 ;
    6b7e:	10 92 33 02 	sts	0x0233, r1
					months ++ ;
    6b82:	80 91 34 02 	lds	r24, 0x0234
    6b86:	8f 5f       	subi	r24, 0xFF	; 255
    6b88:	80 93 34 02 	sts	0x0234, r24
					if(months ==12)
    6b8c:	80 91 34 02 	lds	r24, 0x0234
    6b90:	8c 30       	cpi	r24, 0x0C	; 12
    6b92:	59 f4       	brne	.+22     	; 0x6baa <TIMER_ISR+0x114>
					{
						months = 0 ;
    6b94:	10 92 34 02 	sts	0x0234, r1
						years++;
    6b98:	80 91 35 02 	lds	r24, 0x0235
    6b9c:	90 91 36 02 	lds	r25, 0x0236
    6ba0:	01 96       	adiw	r24, 0x01	; 1
    6ba2:	90 93 36 02 	sts	0x0236, r25
    6ba6:	80 93 35 02 	sts	0x0235, r24
		}
	}


	// Increment kilometers counter while in Drive gear
	if(Gear_Current=='D')
    6baa:	80 91 30 02 	lds	r24, 0x0230
    6bae:	84 34       	cpi	r24, 0x44	; 68
    6bb0:	99 f4       	brne	.+38     	; 0x6bd8 <TIMER_ISR+0x142>
	{
		kms_counter += 1+(speed / 50 ) ;
    6bb2:	80 91 a8 02 	lds	r24, 0x02A8
    6bb6:	92 e3       	ldi	r25, 0x32	; 50
    6bb8:	69 2f       	mov	r22, r25
    6bba:	0e 94 51 3a 	call	0x74a2	; 0x74a2 <__udivmodqi4>
    6bbe:	28 2f       	mov	r18, r24
    6bc0:	30 e0       	ldi	r19, 0x00	; 0
    6bc2:	80 91 8c 02 	lds	r24, 0x028C
    6bc6:	90 91 8d 02 	lds	r25, 0x028D
    6bca:	82 0f       	add	r24, r18
    6bcc:	93 1f       	adc	r25, r19
    6bce:	01 96       	adiw	r24, 0x01	; 1
    6bd0:	90 93 8d 02 	sts	0x028D, r25
    6bd4:	80 93 8c 02 	sts	0x028C, r24

	}


}
    6bd8:	cf 91       	pop	r28
    6bda:	df 91       	pop	r29
    6bdc:	08 95       	ret

00006bde <ADAS_Init>:
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void ADAS_Init(void)
{ 
    6bde:	df 93       	push	r29
    6be0:	cf 93       	push	r28
    6be2:	cd b7       	in	r28, 0x3d	; 61
    6be4:	de b7       	in	r29, 0x3e	; 62
	// Initialize keypad, LCD, LED, buzzer, and relays
	KeyPad_Init();
    6be6:	0e 94 5f 31 	call	0x62be	; 0x62be <KeyPad_Init>
	LCD_Init();
    6bea:	0e 94 8a 2a 	call	0x5514	; 0x5514 <LCD_Init>
	LED_Init();
    6bee:	0e 94 21 25 	call	0x4a42	; 0x4a42 <LED_Init>
	BUZZER_Init();
    6bf2:	0e 94 20 35 	call	0x6a40	; 0x6a40 <BUZZER_Init>
	RELAY_Init(RELAY_ONE);
    6bf6:	81 e0       	ldi	r24, 0x01	; 1
    6bf8:	0e 94 57 24 	call	0x48ae	; 0x48ae <RELAY_Init>
	RELAY_Init(RELAY_TWO);
    6bfc:	82 e0       	ldi	r24, 0x02	; 2
    6bfe:	0e 94 57 24 	call	0x48ae	; 0x48ae <RELAY_Init>




	// Initialize master timer and set callback function
	M_Timer_Void_TimerInit();
    6c02:	0e 94 7c 17 	call	0x2ef8	; 0x2ef8 <M_Timer_Void_TimerInit>
	M_Timer_Void_SetCallBack(TIMER_ISR);
    6c06:	8b e4       	ldi	r24, 0x4B	; 75
    6c08:	95 e3       	ldi	r25, 0x35	; 53
    6c0a:	0e 94 70 19 	call	0x32e0	; 0x32e0 <M_Timer_Void_SetCallBack>
	M_Timer_Void_TimerSetTime(1000); // Set timer period
    6c0e:	68 ee       	ldi	r22, 0xE8	; 232
    6c10:	73 e0       	ldi	r23, 0x03	; 3
    6c12:	80 e0       	ldi	r24, 0x00	; 0
    6c14:	90 e0       	ldi	r25, 0x00	; 0
    6c16:	0e 94 98 17 	call	0x2f30	; 0x2f30 <M_Timer_Void_TimerSetTime>

	// Initialize ADC interrupt for sensor readings
	ADC_voidInt();
    6c1a:	0e 94 43 22 	call	0x4486	; 0x4486 <ADC_voidInt>

	// Set pin direction for sensor input
	DIO_Set_Pin_Direction(PORT_A, PIN0, INFREE);
    6c1e:	80 e0       	ldi	r24, 0x00	; 0
    6c20:	60 e0       	ldi	r22, 0x00	; 0
    6c22:	41 e0       	ldi	r20, 0x01	; 1
    6c24:	0e 94 85 1d 	call	0x3b0a	; 0x3b0a <DIO_Set_Pin_Direction>

	// Initialize external interrupt for gear control
	EXTI_SetCallBack(EXTI1, Gear_Control);
    6c28:	21 e6       	ldi	r18, 0x61	; 97
    6c2a:	34 e3       	ldi	r19, 0x34	; 52
    6c2c:	81 e0       	ldi	r24, 0x01	; 1
    6c2e:	b9 01       	movw	r22, r18
    6c30:	0e 94 4a 1b 	call	0x3694	; 0x3694 <EXTI_SetCallBack>
	EXTI_Init(EXTI1, FALLING_EDGE);
    6c34:	81 e0       	ldi	r24, 0x01	; 1
    6c36:	62 e0       	ldi	r22, 0x02	; 2
    6c38:	0e 94 10 1b 	call	0x3620	; 0x3620 <EXTI_Init>



}
    6c3c:	cf 91       	pop	r28
    6c3e:	df 91       	pop	r29
    6c40:	08 95       	ret

00006c42 <LCD_Display>:
		0x00
};
u8 SpeakerChar[] = {0x01, 0x03, 0x07, 0x1f, 0x1f, 0x07, 0x03, 0x01};

void LCD_Display(void)
{
    6c42:	df 93       	push	r29
    6c44:	cf 93       	push	r28
    6c46:	00 d0       	rcall	.+0      	; 0x6c48 <LCD_Display+0x6>
    6c48:	cd b7       	in	r28, 0x3d	; 61
    6c4a:	de b7       	in	r29, 0x3e	; 62
	// Update LED based on CCS counter
	LED_write(LED_GREEN , CCS_counter%2);
    6c4c:	80 91 a6 02 	lds	r24, 0x02A6
    6c50:	98 2f       	mov	r25, r24
    6c52:	91 70       	andi	r25, 0x01	; 1
    6c54:	81 e0       	ldi	r24, 0x01	; 1
    6c56:	69 2f       	mov	r22, r25
    6c58:	0e 94 49 26 	call	0x4c92	; 0x4c92 <LED_write>

	LCD_Goto(0, 14);
    6c5c:	80 e0       	ldi	r24, 0x00	; 0
    6c5e:	6e e0       	ldi	r22, 0x0E	; 14
    6c60:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	if(Gear_Current == 'D'){
    6c64:	80 91 30 02 	lds	r24, 0x0230
    6c68:	84 34       	cpi	r24, 0x44	; 68
    6c6a:	29 f4       	brne	.+10     	; 0x6c76 <LCD_Display+0x34>
		//LCD_Generate_Char(bell, 0);
		LCD_Write_string("DM");
    6c6c:	88 e6       	ldi	r24, 0x68	; 104
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
    6c74:	0c c0       	rjmp	.+24     	; 0x6c8e <LCD_Display+0x4c>
	}
	else if(Gear_Current != 'D'){
    6c76:	80 91 30 02 	lds	r24, 0x0230
    6c7a:	84 34       	cpi	r24, 0x44	; 68
    6c7c:	41 f0       	breq	.+16     	; 0x6c8e <LCD_Display+0x4c>
		LCD_Goto(0, 14);
    6c7e:	80 e0       	ldi	r24, 0x00	; 0
    6c80:	6e e0       	ldi	r22, 0x0E	; 14
    6c82:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		LCD_Write_string("  ");
    6c86:	8b e6       	ldi	r24, 0x6B	; 107
    6c88:	90 e0       	ldi	r25, 0x00	; 0
    6c8a:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	}
	LCD_Goto(0, 17);
    6c8e:	80 e0       	ldi	r24, 0x00	; 0
    6c90:	61 e1       	ldi	r22, 0x11	; 17
    6c92:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("G:");
    6c96:	8e e6       	ldi	r24, 0x6E	; 110
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(0, 19);
    6c9e:	80 e0       	ldi	r24, 0x00	; 0
    6ca0:	63 e1       	ldi	r22, 0x13	; 19
    6ca2:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_Char(Gear_Current);
    6ca6:	80 91 30 02 	lds	r24, 0x0230
    6caa:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>


	// Display different menu screens based on Display_Menu_Flag
	switch (Display_Menu_Flag % 4) {
    6cae:	80 91 3b 02 	lds	r24, 0x023B
    6cb2:	88 2f       	mov	r24, r24
    6cb4:	90 e0       	ldi	r25, 0x00	; 0
    6cb6:	9c 01       	movw	r18, r24
    6cb8:	23 70       	andi	r18, 0x03	; 3
    6cba:	30 70       	andi	r19, 0x00	; 0
    6cbc:	3a 83       	std	Y+2, r19	; 0x02
    6cbe:	29 83       	std	Y+1, r18	; 0x01
    6cc0:	89 81       	ldd	r24, Y+1	; 0x01
    6cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    6cc4:	81 30       	cpi	r24, 0x01	; 1
    6cc6:	91 05       	cpc	r25, r1
    6cc8:	a9 f0       	breq	.+42     	; 0x6cf4 <LCD_Display+0xb2>
    6cca:	29 81       	ldd	r18, Y+1	; 0x01
    6ccc:	3a 81       	ldd	r19, Y+2	; 0x02
    6cce:	22 30       	cpi	r18, 0x02	; 2
    6cd0:	31 05       	cpc	r19, r1
    6cd2:	2c f4       	brge	.+10     	; 0x6cde <LCD_Display+0x9c>
    6cd4:	89 81       	ldd	r24, Y+1	; 0x01
    6cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    6cd8:	00 97       	sbiw	r24, 0x00	; 0
    6cda:	a9 f0       	breq	.+42     	; 0x6d06 <LCD_Display+0xc4>
    6cdc:	16 c0       	rjmp	.+44     	; 0x6d0a <LCD_Display+0xc8>
    6cde:	29 81       	ldd	r18, Y+1	; 0x01
    6ce0:	3a 81       	ldd	r19, Y+2	; 0x02
    6ce2:	22 30       	cpi	r18, 0x02	; 2
    6ce4:	31 05       	cpc	r19, r1
    6ce6:	49 f0       	breq	.+18     	; 0x6cfa <LCD_Display+0xb8>
    6ce8:	89 81       	ldd	r24, Y+1	; 0x01
    6cea:	9a 81       	ldd	r25, Y+2	; 0x02
    6cec:	83 30       	cpi	r24, 0x03	; 3
    6cee:	91 05       	cpc	r25, r1
    6cf0:	39 f0       	breq	.+14     	; 0x6d00 <LCD_Display+0xbe>
    6cf2:	0b c0       	rjmp	.+22     	; 0x6d0a <LCD_Display+0xc8>
	case 1:
		LCD_MENU_1(); // Display Menu 1
    6cf4:	0e 94 8a 36 	call	0x6d14	; 0x6d14 <LCD_MENU_1>
    6cf8:	08 c0       	rjmp	.+16     	; 0x6d0a <LCD_Display+0xc8>
		break;
	case 2:
		LCD_MENU_2(); // Display Menu 2
    6cfa:	0e 94 75 37 	call	0x6eea	; 0x6eea <LCD_MENU_2>
    6cfe:	05 c0       	rjmp	.+10     	; 0x6d0a <LCD_Display+0xc8>
		break;
	case 3:
		LCD_MENU_3(); // Display Menu 3
    6d00:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <LCD_MENU_3>
    6d04:	02 c0       	rjmp	.+4      	; 0x6d0a <LCD_Display+0xc8>
		break;
	case 0:
		LCD_MENU_4(); // Display Menu 4
    6d06:	0e 94 e6 37 	call	0x6fcc	; 0x6fcc <LCD_MENU_4>
		LCD_Write_string("Alert: Wake Up");
		LCD_Goto(0, 15);
		LCD_Generate_Char(SpeakerChar, 1);
	}
	 */
}
    6d0a:	0f 90       	pop	r0
    6d0c:	0f 90       	pop	r0
    6d0e:	cf 91       	pop	r28
    6d10:	df 91       	pop	r29
    6d12:	08 95       	ret

00006d14 <LCD_MENU_1>:
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void LCD_MENU_1(void)
{
    6d14:	df 93       	push	r29
    6d16:	cf 93       	push	r28
    6d18:	cd b7       	in	r28, 0x3d	; 61
    6d1a:	de b7       	in	r29, 0x3e	; 62
	// Display menu header
	LCD_Goto(0, 0);
    6d1c:	80 e0       	ldi	r24, 0x00	; 0
    6d1e:	60 e0       	ldi	r22, 0x00	; 0
    6d20:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("1/4");
    6d24:	81 e7       	ldi	r24, 0x71	; 113
    6d26:	90 e0       	ldi	r25, 0x00	; 0
    6d28:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	// Display CCS status
	LCD_Goto(1, 0);
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	60 e0       	ldi	r22, 0x00	; 0
    6d30:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("CCS : ");
    6d34:	85 e7       	ldi	r24, 0x75	; 117
    6d36:	90 e0       	ldi	r25, 0x00	; 0
    6d38:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(1, 6);
    6d3c:	81 e0       	ldi	r24, 0x01	; 1
    6d3e:	66 e0       	ldi	r22, 0x06	; 6
    6d40:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string(Status_display[CCS_counter % 2]);
    6d44:	80 91 a6 02 	lds	r24, 0x02A6
    6d48:	88 2f       	mov	r24, r24
    6d4a:	90 e0       	ldi	r25, 0x00	; 0
    6d4c:	81 70       	andi	r24, 0x01	; 1
    6d4e:	90 70       	andi	r25, 0x00	; 0
    6d50:	88 0f       	add	r24, r24
    6d52:	99 1f       	adc	r25, r25
    6d54:	fc 01       	movw	r30, r24
    6d56:	e9 5c       	subi	r30, 0xC9	; 201
    6d58:	fd 4f       	sbci	r31, 0xFD	; 253
    6d5a:	80 81       	ld	r24, Z
    6d5c:	91 81       	ldd	r25, Z+1	; 0x01
    6d5e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	LCD_Goto(1,11);
    6d62:	81 e0       	ldi	r24, 0x01	; 1
    6d64:	6b e0       	ldi	r22, 0x0B	; 11
    6d66:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("DM: ");
    6d6a:	8c e7       	ldi	r24, 0x7C	; 124
    6d6c:	90 e0       	ldi	r25, 0x00	; 0
    6d6e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	if(Gear_Current == 'D')
    6d72:	80 91 30 02 	lds	r24, 0x0230
    6d76:	84 34       	cpi	r24, 0x44	; 68
    6d78:	29 f4       	brne	.+10     	; 0x6d84 <LCD_MENU_1+0x70>
	{
		LCD_Write_string("ON ");
    6d7a:	84 e6       	ldi	r24, 0x64	; 100
    6d7c:	90 e0       	ldi	r25, 0x00	; 0
    6d7e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
    6d82:	04 c0       	rjmp	.+8      	; 0x6d8c <LCD_MENU_1+0x78>
	}
	else
	{
		LCD_Write_string("OFF");
    6d84:	80 e6       	ldi	r24, 0x60	; 96
    6d86:	90 e0       	ldi	r25, 0x00	; 0
    6d88:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	}

	// Display BAS status
	LCD_Goto(2, 0);
    6d8c:	82 e0       	ldi	r24, 0x02	; 2
    6d8e:	60 e0       	ldi	r22, 0x00	; 0
    6d90:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("BAS : ");
    6d94:	81 e8       	ldi	r24, 0x81	; 129
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(2, 6);
    6d9c:	82 e0       	ldi	r24, 0x02	; 2
    6d9e:	66 e0       	ldi	r22, 0x06	; 6
    6da0:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string(Status_display[BAS_Current % 2]);
    6da4:	80 91 6d 02 	lds	r24, 0x026D
    6da8:	88 2f       	mov	r24, r24
    6daa:	90 e0       	ldi	r25, 0x00	; 0
    6dac:	81 70       	andi	r24, 0x01	; 1
    6dae:	90 70       	andi	r25, 0x00	; 0
    6db0:	88 0f       	add	r24, r24
    6db2:	99 1f       	adc	r25, r25
    6db4:	fc 01       	movw	r30, r24
    6db6:	e9 5c       	subi	r30, 0xC9	; 201
    6db8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dba:	80 81       	ld	r24, Z
    6dbc:	91 81       	ldd	r25, Z+1	; 0x01
    6dbe:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	// Display SPS status
	LCD_Goto(3, 0);
    6dc2:	83 e0       	ldi	r24, 0x03	; 3
    6dc4:	60 e0       	ldi	r22, 0x00	; 0
    6dc6:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("SPS : ");
    6dca:	88 e8       	ldi	r24, 0x88	; 136
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(3, 6);
    6dd2:	83 e0       	ldi	r24, 0x03	; 3
    6dd4:	66 e0       	ldi	r22, 0x06	; 6
    6dd6:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string(Status_display[SPS_Current % 2]);
    6dda:	80 91 87 02 	lds	r24, 0x0287
    6dde:	88 2f       	mov	r24, r24
    6de0:	90 e0       	ldi	r25, 0x00	; 0
    6de2:	81 70       	andi	r24, 0x01	; 1
    6de4:	90 70       	andi	r25, 0x00	; 0
    6de6:	88 0f       	add	r24, r24
    6de8:	99 1f       	adc	r25, r25
    6dea:	fc 01       	movw	r30, r24
    6dec:	e9 5c       	subi	r30, 0xC9	; 201
    6dee:	fd 4f       	sbci	r31, 0xFD	; 253
    6df0:	80 81       	ld	r24, Z
    6df2:	91 81       	ldd	r25, Z+1	; 0x01
    6df4:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	// Display SPS speed limit if active
	if (SPS_Current == 1) {
    6df8:	80 91 87 02 	lds	r24, 0x0287
    6dfc:	81 30       	cpi	r24, 0x01	; 1
    6dfe:	91 f4       	brne	.+36     	; 0x6e24 <LCD_MENU_1+0x110>
		LCD_Goto(3, 13);
    6e00:	83 e0       	ldi	r24, 0x03	; 3
    6e02:	6d e0       	ldi	r22, 0x0D	; 13
    6e04:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		LCD_Write_Num_in3Dig(speed_limit);
    6e08:	80 91 8e 02 	lds	r24, 0x028E
    6e0c:	88 2f       	mov	r24, r24
    6e0e:	90 e0       	ldi	r25, 0x00	; 0
    6e10:	0e 94 bd 30 	call	0x617a	; 0x617a <LCD_Write_Num_in3Dig>
		LCD_Write_Char(' ');
    6e14:	80 e2       	ldi	r24, 0x20	; 32
    6e16:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
		LCD_Write_string("kph");
    6e1a:	8f e8       	ldi	r24, 0x8F	; 143
    6e1c:	90 e0       	ldi	r25, 0x00	; 0
    6e1e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
    6e22:	08 c0       	rjmp	.+16     	; 0x6e34 <LCD_MENU_1+0x120>
	} else {
		LCD_Goto(3, 13);
    6e24:	83 e0       	ldi	r24, 0x03	; 3
    6e26:	6d e0       	ldi	r22, 0x0D	; 13
    6e28:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		LCD_Write_string("---    ");
    6e2c:	83 e9       	ldi	r24, 0x93	; 147
    6e2e:	90 e0       	ldi	r25, 0x00	; 0
    6e30:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	}

}
    6e34:	cf 91       	pop	r28
    6e36:	df 91       	pop	r29
    6e38:	08 95       	ret

00006e3a <Display_Blocks>:
 * Return value     : None
 **************************************************************************/

// Function to display blocks of pixels based on ADC reading
#define MAX_SPEED 200
void Display_Blocks(int speed) {
    6e3a:	df 93       	push	r29
    6e3c:	cf 93       	push	r28
    6e3e:	cd b7       	in	r28, 0x3d	; 61
    6e40:	de b7       	in	r29, 0x3e	; 62
    6e42:	28 97       	sbiw	r28, 0x08	; 8
    6e44:	0f b6       	in	r0, 0x3f	; 63
    6e46:	f8 94       	cli
    6e48:	de bf       	out	0x3e, r29	; 62
    6e4a:	0f be       	out	0x3f, r0	; 63
    6e4c:	cd bf       	out	0x3d, r28	; 61
    6e4e:	98 87       	std	Y+8, r25	; 0x08
    6e50:	8f 83       	std	Y+7, r24	; 0x07
	// Calculate the number of blocks based on ADC reading
	if(speed > MAX_SPEED){
    6e52:	8f 81       	ldd	r24, Y+7	; 0x07
    6e54:	98 85       	ldd	r25, Y+8	; 0x08
    6e56:	89 3c       	cpi	r24, 0xC9	; 201
    6e58:	91 05       	cpc	r25, r1
    6e5a:	24 f0       	brlt	.+8      	; 0x6e64 <Display_Blocks+0x2a>
		speed = MAX_SPEED;
    6e5c:	88 ec       	ldi	r24, 0xC8	; 200
    6e5e:	90 e0       	ldi	r25, 0x00	; 0
    6e60:	98 87       	std	Y+8, r25	; 0x08
    6e62:	8f 83       	std	Y+7, r24	; 0x07
	}
	int num_blocks = (speed * 20) / MAX_SPEED; // 20 blocks on a 4x20 LCD
    6e64:	8f 81       	ldd	r24, Y+7	; 0x07
    6e66:	98 85       	ldd	r25, Y+8	; 0x08
    6e68:	9c 01       	movw	r18, r24
    6e6a:	22 0f       	add	r18, r18
    6e6c:	33 1f       	adc	r19, r19
    6e6e:	22 0f       	add	r18, r18
    6e70:	33 1f       	adc	r19, r19
    6e72:	c9 01       	movw	r24, r18
    6e74:	88 0f       	add	r24, r24
    6e76:	99 1f       	adc	r25, r25
    6e78:	88 0f       	add	r24, r24
    6e7a:	99 1f       	adc	r25, r25
    6e7c:	82 0f       	add	r24, r18
    6e7e:	93 1f       	adc	r25, r19
    6e80:	28 ec       	ldi	r18, 0xC8	; 200
    6e82:	30 e0       	ldi	r19, 0x00	; 0
    6e84:	b9 01       	movw	r22, r18
    6e86:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <__divmodhi4>
    6e8a:	cb 01       	movw	r24, r22
    6e8c:	9e 83       	std	Y+6, r25	; 0x06
    6e8e:	8d 83       	std	Y+5, r24	; 0x05

	// Display blocks on the LCD
	for (int i = 0; i < num_blocks; i++) {
    6e90:	1c 82       	std	Y+4, r1	; 0x04
    6e92:	1b 82       	std	Y+3, r1	; 0x03
    6e94:	08 c0       	rjmp	.+16     	; 0x6ea6 <Display_Blocks+0x6c>
		LCD_Write_Char(0xFF); // Display a block of pixels (you may need to adjust this based on your LCD and character set)
    6e96:	8f ef       	ldi	r24, 0xFF	; 255
    6e98:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
		speed = MAX_SPEED;
	}
	int num_blocks = (speed * 20) / MAX_SPEED; // 20 blocks on a 4x20 LCD

	// Display blocks on the LCD
	for (int i = 0; i < num_blocks; i++) {
    6e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    6e9e:	9c 81       	ldd	r25, Y+4	; 0x04
    6ea0:	01 96       	adiw	r24, 0x01	; 1
    6ea2:	9c 83       	std	Y+4, r25	; 0x04
    6ea4:	8b 83       	std	Y+3, r24	; 0x03
    6ea6:	2b 81       	ldd	r18, Y+3	; 0x03
    6ea8:	3c 81       	ldd	r19, Y+4	; 0x04
    6eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    6eac:	9e 81       	ldd	r25, Y+6	; 0x06
    6eae:	28 17       	cp	r18, r24
    6eb0:	39 07       	cpc	r19, r25
    6eb2:	8c f3       	brlt	.-30     	; 0x6e96 <Display_Blocks+0x5c>
		LCD_Write_Char(0xFF); // Display a block of pixels (you may need to adjust this based on your LCD and character set)
	}

	// If the number of blocks is less than 20, fill the remaining space with spaces
	for (int i = num_blocks; i < 20; i++) {
    6eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    6eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    6eb8:	9a 83       	std	Y+2, r25	; 0x02
    6eba:	89 83       	std	Y+1, r24	; 0x01
    6ebc:	08 c0       	rjmp	.+16     	; 0x6ece <Display_Blocks+0x94>
		LCD_Write_Char(' '); // Display a space
    6ebe:	80 e2       	ldi	r24, 0x20	; 32
    6ec0:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	for (int i = 0; i < num_blocks; i++) {
		LCD_Write_Char(0xFF); // Display a block of pixels (you may need to adjust this based on your LCD and character set)
	}

	// If the number of blocks is less than 20, fill the remaining space with spaces
	for (int i = num_blocks; i < 20; i++) {
    6ec4:	89 81       	ldd	r24, Y+1	; 0x01
    6ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    6ec8:	01 96       	adiw	r24, 0x01	; 1
    6eca:	9a 83       	std	Y+2, r25	; 0x02
    6ecc:	89 83       	std	Y+1, r24	; 0x01
    6ece:	89 81       	ldd	r24, Y+1	; 0x01
    6ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    6ed2:	84 31       	cpi	r24, 0x14	; 20
    6ed4:	91 05       	cpc	r25, r1
    6ed6:	9c f3       	brlt	.-26     	; 0x6ebe <Display_Blocks+0x84>
		LCD_Write_Char(' '); // Display a space
	}
}
    6ed8:	28 96       	adiw	r28, 0x08	; 8
    6eda:	0f b6       	in	r0, 0x3f	; 63
    6edc:	f8 94       	cli
    6ede:	de bf       	out	0x3e, r29	; 62
    6ee0:	0f be       	out	0x3f, r0	; 63
    6ee2:	cd bf       	out	0x3d, r28	; 61
    6ee4:	cf 91       	pop	r28
    6ee6:	df 91       	pop	r29
    6ee8:	08 95       	ret

00006eea <LCD_MENU_2>:
void LCD_MENU_2(void)
{
    6eea:	df 93       	push	r29
    6eec:	cf 93       	push	r28
    6eee:	cd b7       	in	r28, 0x3d	; 61
    6ef0:	de b7       	in	r29, 0x3e	; 62
	// Display menu header
	LCD_Goto(0, 0);
    6ef2:	80 e0       	ldi	r24, 0x00	; 0
    6ef4:	60 e0       	ldi	r22, 0x00	; 0
    6ef6:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("2/4");
    6efa:	8b e9       	ldi	r24, 0x9B	; 155
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	// Display current speed
	LCD_Goto(1, 0);
    6f02:	81 e0       	ldi	r24, 0x01	; 1
    6f04:	60 e0       	ldi	r22, 0x00	; 0
    6f06:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("SPEED : ");
    6f0a:	8f e9       	ldi	r24, 0x9F	; 159
    6f0c:	90 e0       	ldi	r25, 0x00	; 0
    6f0e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	if(Gear_Current == 'D')
    6f12:	80 91 30 02 	lds	r24, 0x0230
    6f16:	84 34       	cpi	r24, 0x44	; 68
    6f18:	e9 f4       	brne	.+58     	; 0x6f54 <LCD_MENU_2+0x6a>
	{
		LCD_Goto(1, 8);
    6f1a:	81 e0       	ldi	r24, 0x01	; 1
    6f1c:	68 e0       	ldi	r22, 0x08	; 8
    6f1e:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		LCD_Write_Num_in3Dig(speed);
    6f22:	80 91 a8 02 	lds	r24, 0x02A8
    6f26:	88 2f       	mov	r24, r24
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	0e 94 bd 30 	call	0x617a	; 0x617a <LCD_Write_Num_in3Dig>
		LCD_Goto(1, 13);
    6f2e:	81 e0       	ldi	r24, 0x01	; 1
    6f30:	6d e0       	ldi	r22, 0x0D	; 13
    6f32:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		LCD_Write_string("Kph");
    6f36:	88 ea       	ldi	r24, 0xA8	; 168
    6f38:	90 e0       	ldi	r25, 0x00	; 0
    6f3a:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
		LCD_Goto(3, 0);
    6f3e:	83 e0       	ldi	r24, 0x03	; 3
    6f40:	60 e0       	ldi	r22, 0x00	; 0
    6f42:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		Display_Blocks(speed);
    6f46:	80 91 a8 02 	lds	r24, 0x02A8
    6f4a:	88 2f       	mov	r24, r24
    6f4c:	90 e0       	ldi	r25, 0x00	; 0
    6f4e:	0e 94 1d 37 	call	0x6e3a	; 0x6e3a <Display_Blocks>
    6f52:	08 c0       	rjmp	.+16     	; 0x6f64 <LCD_MENU_2+0x7a>

	}
	else
	{
		LCD_Goto(1, 8);
    6f54:	81 e0       	ldi	r24, 0x01	; 1
    6f56:	68 e0       	ldi	r22, 0x08	; 8
    6f58:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
		LCD_Write_string("         ");
    6f5c:	8c ea       	ldi	r24, 0xAC	; 172
    6f5e:	90 e0       	ldi	r25, 0x00	; 0
    6f60:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	}


	// Display current gear
	LCD_Goto(2, 0);
    6f64:	82 e0       	ldi	r24, 0x02	; 2
    6f66:	60 e0       	ldi	r22, 0x00	; 0
    6f68:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("GEAR  : ");
    6f6c:	86 eb       	ldi	r24, 0xB6	; 182
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(2, 8);
    6f74:	82 e0       	ldi	r24, 0x02	; 2
    6f76:	68 e0       	ldi	r22, 0x08	; 8
    6f78:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_Char(Gear_Current);
    6f7c:	80 91 30 02 	lds	r24, 0x0230
    6f80:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
}
    6f84:	cf 91       	pop	r28
    6f86:	df 91       	pop	r29
    6f88:	08 95       	ret

00006f8a <LCD_MENU_3>:
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void LCD_MENU_3(void)
{
    6f8a:	df 93       	push	r29
    6f8c:	cf 93       	push	r28
    6f8e:	cd b7       	in	r28, 0x3d	; 61
    6f90:	de b7       	in	r29, 0x3e	; 62
	// Display menu header
	LCD_Goto(0, 0);
    6f92:	80 e0       	ldi	r24, 0x00	; 0
    6f94:	60 e0       	ldi	r22, 0x00	; 0
    6f96:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("3/4");
    6f9a:	8f eb       	ldi	r24, 0xBF	; 191
    6f9c:	90 e0       	ldi	r25, 0x00	; 0
    6f9e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	// Display speed limit setting
	LCD_Goto(1, 0);
    6fa2:	81 e0       	ldi	r24, 0x01	; 1
    6fa4:	60 e0       	ldi	r22, 0x00	; 0
    6fa6:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("SPEED LIMIT : ");
    6faa:	83 ec       	ldi	r24, 0xC3	; 195
    6fac:	90 e0       	ldi	r25, 0x00	; 0
    6fae:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(1, 14);
    6fb2:	81 e0       	ldi	r24, 0x01	; 1
    6fb4:	6e e0       	ldi	r22, 0x0E	; 14
    6fb6:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_Num_in3Dig(speed_limit);
    6fba:	80 91 8e 02 	lds	r24, 0x028E
    6fbe:	88 2f       	mov	r24, r24
    6fc0:	90 e0       	ldi	r25, 0x00	; 0
    6fc2:	0e 94 bd 30 	call	0x617a	; 0x617a <LCD_Write_Num_in3Dig>
}
    6fc6:	cf 91       	pop	r28
    6fc8:	df 91       	pop	r29
    6fca:	08 95       	ret

00006fcc <LCD_MENU_4>:
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void LCD_MENU_4(void )
{
    6fcc:	df 93       	push	r29
    6fce:	cf 93       	push	r28
    6fd0:	cd b7       	in	r28, 0x3d	; 61
    6fd2:	de b7       	in	r29, 0x3e	; 62
	// Display menu header
	LCD_Goto(0, 0);
    6fd4:	80 e0       	ldi	r24, 0x00	; 0
    6fd6:	60 e0       	ldi	r22, 0x00	; 0
    6fd8:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("4/4");
    6fdc:	82 ed       	ldi	r24, 0xD2	; 210
    6fde:	90 e0       	ldi	r25, 0x00	; 0
    6fe0:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

	// Display date
	LCD_Goto(1, 0);
    6fe4:	81 e0       	ldi	r24, 0x01	; 1
    6fe6:	60 e0       	ldi	r22, 0x00	; 0
    6fe8:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("DATE : ");
    6fec:	86 ed       	ldi	r24, 0xD6	; 214
    6fee:	90 e0       	ldi	r25, 0x00	; 0
    6ff0:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(1, 7);
    6ff4:	81 e0       	ldi	r24, 0x01	; 1
    6ff6:	67 e0       	ldi	r22, 0x07	; 7
    6ff8:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_Num_in4Dig(years);
    6ffc:	80 91 35 02 	lds	r24, 0x0235
    7000:	90 91 36 02 	lds	r25, 0x0236
    7004:	0e 94 19 31 	call	0x6232	; 0x6232 <LCD_Write_Num_in4Dig>
	LCD_Write_Char('/');
    7008:	8f e2       	ldi	r24, 0x2F	; 47
    700a:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Num_in2Dig(months);
    700e:	80 91 34 02 	lds	r24, 0x0234
    7012:	88 2f       	mov	r24, r24
    7014:	90 e0       	ldi	r25, 0x00	; 0
    7016:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <LCD_Write_Num_in2Dig>
	LCD_Write_Char('/');
    701a:	8f e2       	ldi	r24, 0x2F	; 47
    701c:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Num_in2Dig(days);
    7020:	80 91 33 02 	lds	r24, 0x0233
    7024:	88 2f       	mov	r24, r24
    7026:	90 e0       	ldi	r25, 0x00	; 0
    7028:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <LCD_Write_Num_in2Dig>

	// Display time
	LCD_Goto(2, 0);
    702c:	82 e0       	ldi	r24, 0x02	; 2
    702e:	60 e0       	ldi	r22, 0x00	; 0
    7030:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("TIME : ");
    7034:	8e ed       	ldi	r24, 0xDE	; 222
    7036:	90 e0       	ldi	r25, 0x00	; 0
    7038:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(2, 8);
    703c:	82 e0       	ldi	r24, 0x02	; 2
    703e:	68 e0       	ldi	r22, 0x08	; 8
    7040:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_Num_in2Dig(hours);
    7044:	80 91 8b 02 	lds	r24, 0x028B
    7048:	88 2f       	mov	r24, r24
    704a:	90 e0       	ldi	r25, 0x00	; 0
    704c:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <LCD_Write_Num_in2Dig>
	LCD_Write_Char(':');
    7050:	8a e3       	ldi	r24, 0x3A	; 58
    7052:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Num_in2Dig(mintues);
    7056:	80 91 8a 02 	lds	r24, 0x028A
    705a:	88 2f       	mov	r24, r24
    705c:	90 e0       	ldi	r25, 0x00	; 0
    705e:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <LCD_Write_Num_in2Dig>
	LCD_Write_Char(':');
    7062:	8a e3       	ldi	r24, 0x3A	; 58
    7064:	0e 94 99 30 	call	0x6132	; 0x6132 <LCD_Write_Char>
	LCD_Write_Num_in2Dig(seconds);
    7068:	80 91 89 02 	lds	r24, 0x0289
    706c:	88 2f       	mov	r24, r24
    706e:	90 e0       	ldi	r25, 0x00	; 0
    7070:	0e 94 f3 30 	call	0x61e6	; 0x61e6 <LCD_Write_Num_in2Dig>

	// Display kilometers counter
	LCD_Goto(3, 0);
    7074:	83 e0       	ldi	r24, 0x03	; 3
    7076:	60 e0       	ldi	r22, 0x00	; 0
    7078:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("KMs counter :");
    707c:	86 ee       	ldi	r24, 0xE6	; 230
    707e:	90 e0       	ldi	r25, 0x00	; 0
    7080:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
	LCD_Goto(3, 13);
    7084:	83 e0       	ldi	r24, 0x03	; 3
    7086:	6d e0       	ldi	r22, 0x0D	; 13
    7088:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_Num_in3Dig(kms_counter);
    708c:	80 91 8c 02 	lds	r24, 0x028C
    7090:	90 91 8d 02 	lds	r25, 0x028D
    7094:	0e 94 bd 30 	call	0x617a	; 0x617a <LCD_Write_Num_in3Dig>
	LCD_Write_string(" KMs");
    7098:	84 ef       	ldi	r24, 0xF4	; 244
    709a:	90 e0       	ldi	r25, 0x00	; 0
    709c:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>

}
    70a0:	cf 91       	pop	r28
    70a2:	df 91       	pop	r29
    70a4:	08 95       	ret

000070a6 <LCD_AlertMenu>:

void LCD_AlertMenu(void)
{
    70a6:	df 93       	push	r29
    70a8:	cf 93       	push	r28
    70aa:	cd b7       	in	r28, 0x3d	; 61
    70ac:	de b7       	in	r29, 0x3e	; 62
	LCD_Clear();
    70ae:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <LCD_Clear>
	LCD_Goto(0,5);
    70b2:	80 e0       	ldi	r24, 0x00	; 0
    70b4:	65 e0       	ldi	r22, 0x05	; 5
    70b6:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
	LCD_Write_string("WAKE UP");
    70ba:	89 ef       	ldi	r24, 0xF9	; 249
    70bc:	90 e0       	ldi	r25, 0x00	; 0
    70be:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
}
    70c2:	cf 91       	pop	r28
    70c4:	df 91       	pop	r29
    70c6:	08 95       	ret

000070c8 <SPS_task>:
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void SPS_task(void)
{
    70c8:	df 93       	push	r29
    70ca:	cf 93       	push	r28
    70cc:	cd b7       	in	r28, 0x3d	; 61
    70ce:	de b7       	in	r29, 0x3e	; 62
	if (SPS_Current == 1 && Gear_Current == 'D') {
    70d0:	80 91 87 02 	lds	r24, 0x0287
    70d4:	81 30       	cpi	r24, 0x01	; 1
    70d6:	d1 f4       	brne	.+52     	; 0x710c <SPS_task+0x44>
    70d8:	80 91 30 02 	lds	r24, 0x0230
    70dc:	84 34       	cpi	r24, 0x44	; 68
    70de:	b1 f4       	brne	.+44     	; 0x710c <SPS_task+0x44>
		// Vehicle is in drive mode and speed sensor is enabled
		if (speed > speed_limit) {
    70e0:	90 91 a8 02 	lds	r25, 0x02A8
    70e4:	80 91 8e 02 	lds	r24, 0x028E
    70e8:	89 17       	cp	r24, r25
    70ea:	20 f4       	brcc	.+8      	; 0x70f4 <SPS_task+0x2c>
			// Speed exceeds the speed limit, activate relay
			RELAY_State_Flag_1 = 1;
    70ec:	81 e0       	ldi	r24, 0x01	; 1
    70ee:	80 93 85 02 	sts	0x0285, r24
    70f2:	15 c0       	rjmp	.+42     	; 0x711e <SPS_task+0x56>
		} else if (speed <= speed_limit) {
    70f4:	90 91 a8 02 	lds	r25, 0x02A8
    70f8:	80 91 8e 02 	lds	r24, 0x028E
    70fc:	89 17       	cp	r24, r25
    70fe:	78 f0       	brcs	.+30     	; 0x711e <SPS_task+0x56>
			// Speed is within the speed limit, deactivate relay
			RELAY_State_Flag_1 = 0;
    7100:	10 92 85 02 	sts	0x0285, r1
			RELAY_OFF(RELAY_ONE);
    7104:	81 e0       	ldi	r24, 0x01	; 1
    7106:	0e 94 8d 24 	call	0x491a	; 0x491a <RELAY_OFF>
    710a:	09 c0       	rjmp	.+18     	; 0x711e <SPS_task+0x56>
		}
	} else if (SPS_Current == 0) {
    710c:	80 91 87 02 	lds	r24, 0x0287
    7110:	88 23       	and	r24, r24
    7112:	29 f4       	brne	.+10     	; 0x711e <SPS_task+0x56>
		// Speed sensor is disabled, deactivate relay
		RELAY_State_Flag_1 = 0;
    7114:	10 92 85 02 	sts	0x0285, r1
		RELAY_OFF(RELAY_ONE);
    7118:	81 e0       	ldi	r24, 0x01	; 1
    711a:	0e 94 8d 24 	call	0x491a	; 0x491a <RELAY_OFF>
	}
}
    711e:	cf 91       	pop	r28
    7120:	df 91       	pop	r29
    7122:	08 95       	ret

00007124 <ADAS_Task>:
 * Parameters (out) : None
 * Return value     : None
 **************************************************************************/

void ADAS_Task(void)
{
    7124:	df 93       	push	r29
    7126:	cf 93       	push	r28
    7128:	cd b7       	in	r28, 0x3d	; 61
    712a:	de b7       	in	r29, 0x3e	; 62
	// Gas Pedal task
	Gas_Padel();
    712c:	0e 94 52 32 	call	0x64a4	; 0x64a4 <Gas_Padel>

	// Monitor driver behavior
	Driver_Monitor_Task();
    7130:	0e 94 3a 39 	call	0x7274	; 0x7274 <Driver_Monitor_Task>

	// Speed Sensor task
	SPS_task();
    7134:	0e 94 64 38 	call	0x70c8	; 0x70c8 <SPS_task>

	// Cruise Control System Control task
	CCS_Control();
    7138:	0e 94 3a 33 	call	0x6674	; 0x6674 <CCS_Control>

	// Display information on LCD
	LCD_Display();
    713c:	0e 94 21 36 	call	0x6c42	; 0x6c42 <LCD_Display>

	// Start timer for periodic tasks
	M_Timer_Void_TimerStart(TIMER0_CHANNEL);
    7140:	80 e0       	ldi	r24, 0x00	; 0
    7142:	0e 94 03 18 	call	0x3006	; 0x3006 <M_Timer_Void_TimerStart>


	// Get input from keypad
	key = KEYPAD_GetInput();
    7146:	0e 94 8e 31 	call	0x631c	; 0x631c <KEYPAD_GetInput>
    714a:	80 93 32 02 	sts	0x0232, r24

	// Process keypad input
	if(key != DEFAULT_KEY)
    714e:	80 91 32 02 	lds	r24, 0x0232
    7152:	8e 32       	cpi	r24, 0x2E	; 46
    7154:	09 f4       	brne	.+2      	; 0x7158 <ADAS_Task+0x34>
    7156:	84 c0       	rjmp	.+264    	; 0x7260 <ADAS_Task+0x13c>
	{
		checkflagcounter ++ ;  // Increment counter for flag checking
    7158:	80 91 7e 02 	lds	r24, 0x027E
    715c:	90 91 7f 02 	lds	r25, 0x027F
    7160:	a0 91 80 02 	lds	r26, 0x0280
    7164:	b0 91 81 02 	lds	r27, 0x0281
    7168:	01 96       	adiw	r24, 0x01	; 1
    716a:	a1 1d       	adc	r26, r1
    716c:	b1 1d       	adc	r27, r1
    716e:	80 93 7e 02 	sts	0x027E, r24
    7172:	90 93 7f 02 	sts	0x027F, r25
    7176:	a0 93 80 02 	sts	0x0280, r26
    717a:	b0 93 81 02 	sts	0x0281, r27

		// Process different key inputs

		if(key == 'N')
    717e:	80 91 32 02 	lds	r24, 0x0232
    7182:	8e 34       	cpi	r24, 0x4E	; 78
    7184:	41 f4       	brne	.+16     	; 0x7196 <ADAS_Task+0x72>
		{
			Display_Menu_Flag -- ;
    7186:	80 91 3b 02 	lds	r24, 0x023B
    718a:	81 50       	subi	r24, 0x01	; 1
    718c:	80 93 3b 02 	sts	0x023B, r24
			LCD_Clear();
    7190:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <LCD_Clear>
    7194:	6c c0       	rjmp	.+216    	; 0x726e <ADAS_Task+0x14a>
		}
		else if (key == 'O')
    7196:	80 91 32 02 	lds	r24, 0x0232
    719a:	8f 34       	cpi	r24, 0x4F	; 79
    719c:	41 f4       	brne	.+16     	; 0x71ae <ADAS_Task+0x8a>
		{
			Display_Menu_Flag++ ;
    719e:	80 91 3b 02 	lds	r24, 0x023B
    71a2:	8f 5f       	subi	r24, 0xFF	; 255
    71a4:	80 93 3b 02 	sts	0x023B, r24
			LCD_Clear();
    71a8:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <LCD_Clear>
    71ac:	60 c0       	rjmp	.+192    	; 0x726e <ADAS_Task+0x14a>
		}
		else if(key == 'G')
    71ae:	80 91 32 02 	lds	r24, 0x0232
    71b2:	87 34       	cpi	r24, 0x47	; 71
    71b4:	89 f4       	brne	.+34     	; 0x71d8 <ADAS_Task+0xb4>
		{
			if(Gear_Current == 'D')
    71b6:	80 91 30 02 	lds	r24, 0x0230
    71ba:	84 34       	cpi	r24, 0x44	; 68
    71bc:	09 f0       	breq	.+2      	; 0x71c0 <ADAS_Task+0x9c>
    71be:	57 c0       	rjmp	.+174    	; 0x726e <ADAS_Task+0x14a>
			{
				TOGGLE_BIT(BAS_Current , 0);
    71c0:	90 91 6d 02 	lds	r25, 0x026D
    71c4:	81 e0       	ldi	r24, 0x01	; 1
    71c6:	89 27       	eor	r24, r25
    71c8:	80 93 6d 02 	sts	0x026D, r24
				BAS_counter++ ;
    71cc:	80 91 84 02 	lds	r24, 0x0284
    71d0:	8f 5f       	subi	r24, 0xFF	; 255
    71d2:	80 93 84 02 	sts	0x0284, r24
    71d6:	4b c0       	rjmp	.+150    	; 0x726e <ADAS_Task+0x14a>
			}

		}
		else if (key == 'K')
    71d8:	80 91 32 02 	lds	r24, 0x0232
    71dc:	8b 34       	cpi	r24, 0x4B	; 75
    71de:	61 f4       	brne	.+24     	; 0x71f8 <ADAS_Task+0xd4>
		{
			if(Gear_Current == 'D')
    71e0:	80 91 30 02 	lds	r24, 0x0230
    71e4:	84 34       	cpi	r24, 0x44	; 68
    71e6:	09 f0       	breq	.+2      	; 0x71ea <ADAS_Task+0xc6>
    71e8:	42 c0       	rjmp	.+132    	; 0x726e <ADAS_Task+0x14a>
			{
				TOGGLE_BIT(SPS_Current , 0);
    71ea:	80 91 87 02 	lds	r24, 0x0287
    71ee:	91 e0       	ldi	r25, 0x01	; 1
    71f0:	89 27       	eor	r24, r25
    71f2:	80 93 87 02 	sts	0x0287, r24
    71f6:	3b c0       	rjmp	.+118    	; 0x726e <ADAS_Task+0x14a>
			}

		}
		else if (key == 'I')
    71f8:	80 91 32 02 	lds	r24, 0x0232
    71fc:	89 34       	cpi	r24, 0x49	; 73
    71fe:	69 f4       	brne	.+26     	; 0x721a <ADAS_Task+0xf6>
		{
			speed_limit+=5;
    7200:	80 91 8e 02 	lds	r24, 0x028E
    7204:	8b 5f       	subi	r24, 0xFB	; 251
    7206:	80 93 8e 02 	sts	0x028E, r24
			if(speed_limit >=150)
    720a:	80 91 8e 02 	lds	r24, 0x028E
    720e:	86 39       	cpi	r24, 0x96	; 150
    7210:	70 f1       	brcs	.+92     	; 0x726e <ADAS_Task+0x14a>
			{
				speed_limit =150 ;
    7212:	86 e9       	ldi	r24, 0x96	; 150
    7214:	80 93 8e 02 	sts	0x028E, r24
    7218:	2a c0       	rjmp	.+84     	; 0x726e <ADAS_Task+0x14a>
			}
		}
		else if (key == 'M')
    721a:	80 91 32 02 	lds	r24, 0x0232
    721e:	8d 34       	cpi	r24, 0x4D	; 77
    7220:	61 f4       	brne	.+24     	; 0x723a <ADAS_Task+0x116>
		{
			speed_limit-=5;
    7222:	80 91 8e 02 	lds	r24, 0x028E
    7226:	85 50       	subi	r24, 0x05	; 5
    7228:	80 93 8e 02 	sts	0x028E, r24
			if(speed_limit>=250)
    722c:	80 91 8e 02 	lds	r24, 0x028E
    7230:	8a 3f       	cpi	r24, 0xFA	; 250
    7232:	e8 f0       	brcs	.+58     	; 0x726e <ADAS_Task+0x14a>
			{
				speed_limit = 0 ;
    7234:	10 92 8e 02 	sts	0x028E, r1
    7238:	1a c0       	rjmp	.+52     	; 0x726e <ADAS_Task+0x14a>
			}

		}
		else if (key == 'E')
    723a:	80 91 32 02 	lds	r24, 0x0232
    723e:	85 34       	cpi	r24, 0x45	; 69
    7240:	29 f4       	brne	.+10     	; 0x724c <ADAS_Task+0x128>
		{
			brakes_status_flag = 0 ;
    7242:	10 92 88 02 	sts	0x0288, r1
			Brakes_Padel();
    7246:	0e 94 1f 33 	call	0x663e	; 0x663e <Brakes_Padel>
    724a:	11 c0       	rjmp	.+34     	; 0x726e <ADAS_Task+0x14a>
		}
		else if (key == 'F')
    724c:	80 91 32 02 	lds	r24, 0x0232
    7250:	86 34       	cpi	r24, 0x46	; 70
    7252:	69 f4       	brne	.+26     	; 0x726e <ADAS_Task+0x14a>
		{
			CCS_ADAS_Control_flag = 1;
    7254:	81 e0       	ldi	r24, 0x01	; 1
    7256:	80 93 74 02 	sts	0x0274, r24
			CCS_Control();
    725a:	0e 94 3a 33 	call	0x6674	; 0x6674 <CCS_Control>
    725e:	07 c0       	rjmp	.+14     	; 0x726e <ADAS_Task+0x14a>
		}
	}
	else
	{
		brakes_status_flag = 1 ;
    7260:	81 e0       	ldi	r24, 0x01	; 1
    7262:	80 93 88 02 	sts	0x0288, r24
		Brakes_Padel();
    7266:	0e 94 1f 33 	call	0x663e	; 0x663e <Brakes_Padel>
		CCS_ADAS_Control_flag = 0 ;
    726a:	10 92 74 02 	sts	0x0274, r1
	}
}
    726e:	cf 91       	pop	r28
    7270:	df 91       	pop	r29
    7272:	08 95       	ret

00007274 <Driver_Monitor_Task>:
//}



void Driver_Monitor_Task (void)
{
    7274:	df 93       	push	r29
    7276:	cf 93       	push	r28
    7278:	cd b7       	in	r28, 0x3d	; 61
    727a:	de b7       	in	r29, 0x3e	; 62
	static u32 warning_after = 0 ;
	static u8 warning_flag_counter = 0 ;


	// Check if the gear is in 'D' mode
	if ( Gear_Current == 'D')
    727c:	80 91 30 02 	lds	r24, 0x0230
    7280:	84 34       	cpi	r24, 0x44	; 68
    7282:	09 f0       	breq	.+2      	; 0x7286 <Driver_Monitor_Task+0x12>
    7284:	db c0       	rjmp	.+438    	; 0x743c <Driver_Monitor_Task+0x1c8>
	{
		// Check if the local flag is not set (indicating first iteration)
		if(local_flag == 0 )
    7286:	80 91 a2 02 	lds	r24, 0x02A2
    728a:	88 23       	and	r24, r24
    728c:	09 f5       	brne	.+66     	; 0x72d0 <Driver_Monitor_Task+0x5c>
		{
			check_before = checkflagcounter ;  // Store initial counter value
    728e:	80 91 7e 02 	lds	r24, 0x027E
    7292:	90 91 7f 02 	lds	r25, 0x027F
    7296:	a0 91 80 02 	lds	r26, 0x0280
    729a:	b0 91 81 02 	lds	r27, 0x0281
    729e:	80 93 9e 02 	sts	0x029E, r24
    72a2:	90 93 9f 02 	sts	0x029F, r25
    72a6:	a0 93 a0 02 	sts	0x02A0, r26
    72aa:	b0 93 a1 02 	sts	0x02A1, r27
			warning_before = warning_flag_counter ;
    72ae:	80 91 91 02 	lds	r24, 0x0291
    72b2:	88 2f       	mov	r24, r24
    72b4:	90 e0       	ldi	r25, 0x00	; 0
    72b6:	a0 e0       	ldi	r26, 0x00	; 0
    72b8:	b0 e0       	ldi	r27, 0x00	; 0
    72ba:	80 93 96 02 	sts	0x0296, r24
    72be:	90 93 97 02 	sts	0x0297, r25
    72c2:	a0 93 98 02 	sts	0x0298, r26
    72c6:	b0 93 99 02 	sts	0x0299, r27
			local_flag = 1 ;  // Set local flag to indicate subsequent iterations
    72ca:	81 e0       	ldi	r24, 0x01	; 1
    72cc:	80 93 a2 02 	sts	0x02A2, r24
		}

		// Check if the monitor flag is set and time has elapsed
		if ( monitor_flag_counter_1s==1 && seconds !=  0)
    72d0:	80 91 82 02 	lds	r24, 0x0282
    72d4:	81 30       	cpi	r24, 0x01	; 1
    72d6:	09 f0       	breq	.+2      	; 0x72da <Driver_Monitor_Task+0x66>
    72d8:	40 c0       	rjmp	.+128    	; 0x735a <Driver_Monitor_Task+0xe6>
    72da:	80 91 89 02 	lds	r24, 0x0289
    72de:	88 23       	and	r24, r24
    72e0:	e1 f1       	breq	.+120    	; 0x735a <Driver_Monitor_Task+0xe6>
		{
			check_after = checkflagcounter ; // Store counter value after time interval
    72e2:	80 91 7e 02 	lds	r24, 0x027E
    72e6:	90 91 7f 02 	lds	r25, 0x027F
    72ea:	a0 91 80 02 	lds	r26, 0x0280
    72ee:	b0 91 81 02 	lds	r27, 0x0281
    72f2:	80 93 9a 02 	sts	0x029A, r24
    72f6:	90 93 9b 02 	sts	0x029B, r25
    72fa:	a0 93 9c 02 	sts	0x029C, r26
    72fe:	b0 93 9d 02 	sts	0x029D, r27

			// Check if the counter values before and after the time interval are equal
			if(check_before != check_after)
    7302:	20 91 9e 02 	lds	r18, 0x029E
    7306:	30 91 9f 02 	lds	r19, 0x029F
    730a:	40 91 a0 02 	lds	r20, 0x02A0
    730e:	50 91 a1 02 	lds	r21, 0x02A1
    7312:	80 91 9a 02 	lds	r24, 0x029A
    7316:	90 91 9b 02 	lds	r25, 0x029B
    731a:	a0 91 9c 02 	lds	r26, 0x029C
    731e:	b0 91 9d 02 	lds	r27, 0x029D
    7322:	28 17       	cp	r18, r24
    7324:	39 07       	cpc	r19, r25
    7326:	4a 07       	cpc	r20, r26
    7328:	5b 07       	cpc	r21, r27
    732a:	a9 f0       	breq	.+42     	; 0x7356 <Driver_Monitor_Task+0xe2>
			{
				warning_flag_counter++;
    732c:	80 91 91 02 	lds	r24, 0x0291
    7330:	8f 5f       	subi	r24, 0xFF	; 255
    7332:	80 93 91 02 	sts	0x0291, r24
				LED_OFF(LED_YELLOW);
    7336:	83 e0       	ldi	r24, 0x03	; 3
    7338:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <LED_OFF>

				LCD_Goto(0,5);
    733c:	80 e0       	ldi	r24, 0x00	; 0
    733e:	65 e0       	ldi	r22, 0x05	; 5
    7340:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
				LCD_Write_string("         ");
    7344:	8c ea       	ldi	r24, 0xAC	; 172
    7346:	90 e0       	ldi	r25, 0x00	; 0
    7348:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
				RELAY_OFF(RELAY_TWO);
    734c:	82 e0       	ldi	r24, 0x02	; 2
    734e:	0e 94 8d 24 	call	0x491a	; 0x491a <RELAY_OFF>

				RELAY_State_Flag_2 = 0;
    7352:	10 92 86 02 	sts	0x0286, r1
			}
			monitor_flag_counter_1s = 0 ;// Reset monitor flag counter
    7356:	10 92 82 02 	sts	0x0282, r1
		}
		check_before = check_after ;	// Update check_before for next iteration
    735a:	80 91 9a 02 	lds	r24, 0x029A
    735e:	90 91 9b 02 	lds	r25, 0x029B
    7362:	a0 91 9c 02 	lds	r26, 0x029C
    7366:	b0 91 9d 02 	lds	r27, 0x029D
    736a:	80 93 9e 02 	sts	0x029E, r24
    736e:	90 93 9f 02 	sts	0x029F, r25
    7372:	a0 93 a0 02 	sts	0x02A0, r26
    7376:	b0 93 a1 02 	sts	0x02A1, r27

		// Check if the monitor flag is set and time has elapsed
		if ( monitor_flag_counter_5s==1 && seconds !=  0)
    737a:	80 91 83 02 	lds	r24, 0x0283
    737e:	81 30       	cpi	r24, 0x01	; 1
    7380:	09 f0       	breq	.+2      	; 0x7384 <Driver_Monitor_Task+0x110>
    7382:	4b c0       	rjmp	.+150    	; 0x741a <Driver_Monitor_Task+0x1a6>
    7384:	80 91 89 02 	lds	r24, 0x0289
    7388:	88 23       	and	r24, r24
    738a:	09 f4       	brne	.+2      	; 0x738e <Driver_Monitor_Task+0x11a>
    738c:	46 c0       	rjmp	.+140    	; 0x741a <Driver_Monitor_Task+0x1a6>
		{

			warning_after = warning_flag_counter ; // Store counter value after time interval
    738e:	80 91 91 02 	lds	r24, 0x0291
    7392:	88 2f       	mov	r24, r24
    7394:	90 e0       	ldi	r25, 0x00	; 0
    7396:	a0 e0       	ldi	r26, 0x00	; 0
    7398:	b0 e0       	ldi	r27, 0x00	; 0
    739a:	80 93 92 02 	sts	0x0292, r24
    739e:	90 93 93 02 	sts	0x0293, r25
    73a2:	a0 93 94 02 	sts	0x0294, r26
    73a6:	b0 93 95 02 	sts	0x0295, r27

			// Check if the counter values before and after the time interval are equal
			if(warning_before == warning_after)
    73aa:	20 91 96 02 	lds	r18, 0x0296
    73ae:	30 91 97 02 	lds	r19, 0x0297
    73b2:	40 91 98 02 	lds	r20, 0x0298
    73b6:	50 91 99 02 	lds	r21, 0x0299
    73ba:	80 91 92 02 	lds	r24, 0x0292
    73be:	90 91 93 02 	lds	r25, 0x0293
    73c2:	a0 91 94 02 	lds	r26, 0x0294
    73c6:	b0 91 95 02 	lds	r27, 0x0295
    73ca:	28 17       	cp	r18, r24
    73cc:	39 07       	cpc	r19, r25
    73ce:	4a 07       	cpc	r20, r26
    73d0:	5b 07       	cpc	r21, r27
    73d2:	a1 f4       	brne	.+40     	; 0x73fc <Driver_Monitor_Task+0x188>
			{
				//If driver remains inactive, turn on yellow LED and display "WAKE UP" message
				LED_ON(LED_YELLOW);
    73d4:	83 e0       	ldi	r24, 0x03	; 3
    73d6:	0e 94 50 25 	call	0x4aa0	; 0x4aa0 <LED_ON>

				LCD_Goto(0,5);
    73da:	80 e0       	ldi	r24, 0x00	; 0
    73dc:	65 e0       	ldi	r22, 0x05	; 5
    73de:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
				LCD_Write_string("WAKE UP");
    73e2:	89 ef       	ldi	r24, 0xF9	; 249
    73e4:	90 e0       	ldi	r25, 0x00	; 0
    73e6:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
				LCD_Generate_Char(SpeakerChar, 1);
    73ea:	84 e4       	ldi	r24, 0x44	; 68
    73ec:	92 e0       	ldi	r25, 0x02	; 2
    73ee:	61 e0       	ldi	r22, 0x01	; 1
    73f0:	0e 94 49 30 	call	0x6092	; 0x6092 <LCD_Generate_Char>

				RELAY_State_Flag_2 = 1 ;
    73f4:	81 e0       	ldi	r24, 0x01	; 1
    73f6:	80 93 86 02 	sts	0x0286, r24
    73fa:	0d c0       	rjmp	.+26     	; 0x7416 <Driver_Monitor_Task+0x1a2>
			}
			else
			{
				// If driver becomes active, turn off yellow LED and clear message
				LED_OFF(LED_YELLOW);
    73fc:	83 e0       	ldi	r24, 0x03	; 3
    73fe:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <LED_OFF>
				LCD_Goto(0,5);
    7402:	80 e0       	ldi	r24, 0x00	; 0
    7404:	65 e0       	ldi	r22, 0x05	; 5
    7406:	0e 94 a5 2d 	call	0x5b4a	; 0x5b4a <LCD_Goto>
				LCD_Write_string("         ");
    740a:	8c ea       	ldi	r24, 0xAC	; 172
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <LCD_Write_string>
				RELAY_State_Flag_2= 0 ;
    7412:	10 92 86 02 	sts	0x0286, r1
			}
			monitor_flag_counter_5s = 0 ;// Reset monitor flag counter
    7416:	10 92 83 02 	sts	0x0283, r1
		}
		warning_before = warning_after ;	// Update check_before for next iteration
    741a:	80 91 92 02 	lds	r24, 0x0292
    741e:	90 91 93 02 	lds	r25, 0x0293
    7422:	a0 91 94 02 	lds	r26, 0x0294
    7426:	b0 91 95 02 	lds	r27, 0x0295
    742a:	80 93 96 02 	sts	0x0296, r24
    742e:	90 93 97 02 	sts	0x0297, r25
    7432:	a0 93 98 02 	sts	0x0298, r26
    7436:	b0 93 99 02 	sts	0x0299, r27
    743a:	07 c0       	rjmp	.+14     	; 0x744a <Driver_Monitor_Task+0x1d6>
	}
	else if (Gear_Current != 'D')
    743c:	80 91 30 02 	lds	r24, 0x0230
    7440:	84 34       	cpi	r24, 0x44	; 68
    7442:	19 f0       	breq	.+6      	; 0x744a <Driver_Monitor_Task+0x1d6>
	{
		// If gear is not in 'D' mode, turn off yellow LED
		LED_OFF(LED_YELLOW);
    7444:	83 e0       	ldi	r24, 0x03	; 3
    7446:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <LED_OFF>

	}
}
    744a:	cf 91       	pop	r28
    744c:	df 91       	pop	r29
    744e:	08 95       	ret

00007450 <main>:
#include "ADAS_interface.h"
#include "EEPROM_interface.h"
#include "avr/interrupt.h"

int main(void)
{
    7450:	df 93       	push	r29
    7452:	cf 93       	push	r28
    7454:	cd b7       	in	r28, 0x3d	; 61
    7456:	de b7       	in	r29, 0x3e	; 62

	sei();
    7458:	78 94       	sei


	ADAS_Init();
    745a:	0e 94 ef 35 	call	0x6bde	; 0x6bde <ADAS_Init>



	while (1)
	{
		ADAS_Task();
    745e:	0e 94 92 38 	call	0x7124	; 0x7124 <ADAS_Task>
    7462:	fd cf       	rjmp	.-6      	; 0x745e <main+0xe>

00007464 <__mulsi3>:
    7464:	62 9f       	mul	r22, r18
    7466:	d0 01       	movw	r26, r0
    7468:	73 9f       	mul	r23, r19
    746a:	f0 01       	movw	r30, r0
    746c:	82 9f       	mul	r24, r18
    746e:	e0 0d       	add	r30, r0
    7470:	f1 1d       	adc	r31, r1
    7472:	64 9f       	mul	r22, r20
    7474:	e0 0d       	add	r30, r0
    7476:	f1 1d       	adc	r31, r1
    7478:	92 9f       	mul	r25, r18
    747a:	f0 0d       	add	r31, r0
    747c:	83 9f       	mul	r24, r19
    747e:	f0 0d       	add	r31, r0
    7480:	74 9f       	mul	r23, r20
    7482:	f0 0d       	add	r31, r0
    7484:	65 9f       	mul	r22, r21
    7486:	f0 0d       	add	r31, r0
    7488:	99 27       	eor	r25, r25
    748a:	72 9f       	mul	r23, r18
    748c:	b0 0d       	add	r27, r0
    748e:	e1 1d       	adc	r30, r1
    7490:	f9 1f       	adc	r31, r25
    7492:	63 9f       	mul	r22, r19
    7494:	b0 0d       	add	r27, r0
    7496:	e1 1d       	adc	r30, r1
    7498:	f9 1f       	adc	r31, r25
    749a:	bd 01       	movw	r22, r26
    749c:	cf 01       	movw	r24, r30
    749e:	11 24       	eor	r1, r1
    74a0:	08 95       	ret

000074a2 <__udivmodqi4>:
    74a2:	99 1b       	sub	r25, r25
    74a4:	79 e0       	ldi	r23, 0x09	; 9
    74a6:	04 c0       	rjmp	.+8      	; 0x74b0 <__udivmodqi4_ep>

000074a8 <__udivmodqi4_loop>:
    74a8:	99 1f       	adc	r25, r25
    74aa:	96 17       	cp	r25, r22
    74ac:	08 f0       	brcs	.+2      	; 0x74b0 <__udivmodqi4_ep>
    74ae:	96 1b       	sub	r25, r22

000074b0 <__udivmodqi4_ep>:
    74b0:	88 1f       	adc	r24, r24
    74b2:	7a 95       	dec	r23
    74b4:	c9 f7       	brne	.-14     	; 0x74a8 <__udivmodqi4_loop>
    74b6:	80 95       	com	r24
    74b8:	08 95       	ret

000074ba <__udivmodhi4>:
    74ba:	aa 1b       	sub	r26, r26
    74bc:	bb 1b       	sub	r27, r27
    74be:	51 e1       	ldi	r21, 0x11	; 17
    74c0:	07 c0       	rjmp	.+14     	; 0x74d0 <__udivmodhi4_ep>

000074c2 <__udivmodhi4_loop>:
    74c2:	aa 1f       	adc	r26, r26
    74c4:	bb 1f       	adc	r27, r27
    74c6:	a6 17       	cp	r26, r22
    74c8:	b7 07       	cpc	r27, r23
    74ca:	10 f0       	brcs	.+4      	; 0x74d0 <__udivmodhi4_ep>
    74cc:	a6 1b       	sub	r26, r22
    74ce:	b7 0b       	sbc	r27, r23

000074d0 <__udivmodhi4_ep>:
    74d0:	88 1f       	adc	r24, r24
    74d2:	99 1f       	adc	r25, r25
    74d4:	5a 95       	dec	r21
    74d6:	a9 f7       	brne	.-22     	; 0x74c2 <__udivmodhi4_loop>
    74d8:	80 95       	com	r24
    74da:	90 95       	com	r25
    74dc:	bc 01       	movw	r22, r24
    74de:	cd 01       	movw	r24, r26
    74e0:	08 95       	ret

000074e2 <__divmodhi4>:
    74e2:	97 fb       	bst	r25, 7
    74e4:	09 2e       	mov	r0, r25
    74e6:	07 26       	eor	r0, r23
    74e8:	0a d0       	rcall	.+20     	; 0x74fe <__divmodhi4_neg1>
    74ea:	77 fd       	sbrc	r23, 7
    74ec:	04 d0       	rcall	.+8      	; 0x74f6 <__divmodhi4_neg2>
    74ee:	e5 df       	rcall	.-54     	; 0x74ba <__udivmodhi4>
    74f0:	06 d0       	rcall	.+12     	; 0x74fe <__divmodhi4_neg1>
    74f2:	00 20       	and	r0, r0
    74f4:	1a f4       	brpl	.+6      	; 0x74fc <__divmodhi4_exit>

000074f6 <__divmodhi4_neg2>:
    74f6:	70 95       	com	r23
    74f8:	61 95       	neg	r22
    74fa:	7f 4f       	sbci	r23, 0xFF	; 255

000074fc <__divmodhi4_exit>:
    74fc:	08 95       	ret

000074fe <__divmodhi4_neg1>:
    74fe:	f6 f7       	brtc	.-4      	; 0x74fc <__divmodhi4_exit>
    7500:	90 95       	com	r25
    7502:	81 95       	neg	r24
    7504:	9f 4f       	sbci	r25, 0xFF	; 255
    7506:	08 95       	ret

00007508 <__udivmodsi4>:
    7508:	a1 e2       	ldi	r26, 0x21	; 33
    750a:	1a 2e       	mov	r1, r26
    750c:	aa 1b       	sub	r26, r26
    750e:	bb 1b       	sub	r27, r27
    7510:	fd 01       	movw	r30, r26
    7512:	0d c0       	rjmp	.+26     	; 0x752e <__udivmodsi4_ep>

00007514 <__udivmodsi4_loop>:
    7514:	aa 1f       	adc	r26, r26
    7516:	bb 1f       	adc	r27, r27
    7518:	ee 1f       	adc	r30, r30
    751a:	ff 1f       	adc	r31, r31
    751c:	a2 17       	cp	r26, r18
    751e:	b3 07       	cpc	r27, r19
    7520:	e4 07       	cpc	r30, r20
    7522:	f5 07       	cpc	r31, r21
    7524:	20 f0       	brcs	.+8      	; 0x752e <__udivmodsi4_ep>
    7526:	a2 1b       	sub	r26, r18
    7528:	b3 0b       	sbc	r27, r19
    752a:	e4 0b       	sbc	r30, r20
    752c:	f5 0b       	sbc	r31, r21

0000752e <__udivmodsi4_ep>:
    752e:	66 1f       	adc	r22, r22
    7530:	77 1f       	adc	r23, r23
    7532:	88 1f       	adc	r24, r24
    7534:	99 1f       	adc	r25, r25
    7536:	1a 94       	dec	r1
    7538:	69 f7       	brne	.-38     	; 0x7514 <__udivmodsi4_loop>
    753a:	60 95       	com	r22
    753c:	70 95       	com	r23
    753e:	80 95       	com	r24
    7540:	90 95       	com	r25
    7542:	9b 01       	movw	r18, r22
    7544:	ac 01       	movw	r20, r24
    7546:	bd 01       	movw	r22, r26
    7548:	cf 01       	movw	r24, r30
    754a:	08 95       	ret

0000754c <__prologue_saves__>:
    754c:	2f 92       	push	r2
    754e:	3f 92       	push	r3
    7550:	4f 92       	push	r4
    7552:	5f 92       	push	r5
    7554:	6f 92       	push	r6
    7556:	7f 92       	push	r7
    7558:	8f 92       	push	r8
    755a:	9f 92       	push	r9
    755c:	af 92       	push	r10
    755e:	bf 92       	push	r11
    7560:	cf 92       	push	r12
    7562:	df 92       	push	r13
    7564:	ef 92       	push	r14
    7566:	ff 92       	push	r15
    7568:	0f 93       	push	r16
    756a:	1f 93       	push	r17
    756c:	cf 93       	push	r28
    756e:	df 93       	push	r29
    7570:	cd b7       	in	r28, 0x3d	; 61
    7572:	de b7       	in	r29, 0x3e	; 62
    7574:	ca 1b       	sub	r28, r26
    7576:	db 0b       	sbc	r29, r27
    7578:	0f b6       	in	r0, 0x3f	; 63
    757a:	f8 94       	cli
    757c:	de bf       	out	0x3e, r29	; 62
    757e:	0f be       	out	0x3f, r0	; 63
    7580:	cd bf       	out	0x3d, r28	; 61
    7582:	09 94       	ijmp

00007584 <__epilogue_restores__>:
    7584:	2a 88       	ldd	r2, Y+18	; 0x12
    7586:	39 88       	ldd	r3, Y+17	; 0x11
    7588:	48 88       	ldd	r4, Y+16	; 0x10
    758a:	5f 84       	ldd	r5, Y+15	; 0x0f
    758c:	6e 84       	ldd	r6, Y+14	; 0x0e
    758e:	7d 84       	ldd	r7, Y+13	; 0x0d
    7590:	8c 84       	ldd	r8, Y+12	; 0x0c
    7592:	9b 84       	ldd	r9, Y+11	; 0x0b
    7594:	aa 84       	ldd	r10, Y+10	; 0x0a
    7596:	b9 84       	ldd	r11, Y+9	; 0x09
    7598:	c8 84       	ldd	r12, Y+8	; 0x08
    759a:	df 80       	ldd	r13, Y+7	; 0x07
    759c:	ee 80       	ldd	r14, Y+6	; 0x06
    759e:	fd 80       	ldd	r15, Y+5	; 0x05
    75a0:	0c 81       	ldd	r16, Y+4	; 0x04
    75a2:	1b 81       	ldd	r17, Y+3	; 0x03
    75a4:	aa 81       	ldd	r26, Y+2	; 0x02
    75a6:	b9 81       	ldd	r27, Y+1	; 0x01
    75a8:	ce 0f       	add	r28, r30
    75aa:	d1 1d       	adc	r29, r1
    75ac:	0f b6       	in	r0, 0x3f	; 63
    75ae:	f8 94       	cli
    75b0:	de bf       	out	0x3e, r29	; 62
    75b2:	0f be       	out	0x3f, r0	; 63
    75b4:	cd bf       	out	0x3d, r28	; 61
    75b6:	ed 01       	movw	r28, r26
    75b8:	08 95       	ret

000075ba <_exit>:
    75ba:	f8 94       	cli

000075bc <__stop_program>:
    75bc:	ff cf       	rjmp	.-2      	; 0x75bc <__stop_program>
